{"version":3,"file":"component---src-pages-search-tsx-75b58aca6df70cc9b390.js","mappings":"iNA8DA,EAtDe,SAAC,GAAwC,IAAtCA,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SAChBC,GAAQC,EAAAA,EAAAA,IAASH,EAAKI,mBAC5B,ECVK,SAAwBC,GAE7B,OADcA,EAAOC,UAAU,GAAGC,MAAM,KAC3BC,QAAO,SAACC,EAAUC,GAC7B,GAAa,KAATA,EAAa,CACf,MAAqBA,EAAKH,MAAM,KAAzBI,EAAP,KAAYC,EAAZ,KACAH,EAAII,mBAAmBF,IAAQE,mBAAmBD,EAEpD,QAAOH,CALF,GAMJ,CAAC,EACL,CDCqBK,CAAeb,EAASI,QAApCU,EAAR,EAAQA,QACFC,EAAgBd,EAAMe,QAC1B,SAACC,GAAD,iBACE,UAAAA,EAAKC,aAAL,eAAYC,oBAAoBC,SAASN,aAAzC,EAAyCA,EAASK,wBAAlD,UACAF,EAAKI,eADL,aACAC,EACIH,oBACDC,SAASN,aAFZ,EAEYA,EAASK,yBACpB,UAACF,EAAKM,gBAAN,QAACC,EAAeC,MACf,SAACC,GAAD,OAAOA,EAAEP,uBAAwBL,aAA1B,EAA0BA,EAASK,oBAD1C,IANgB,IAWtB,OACEQ,EAAAA,EAAAA,IAACC,EAAAA,EAAD,MACED,EAAAA,EAAAA,IAACE,EAAAA,GAAD,CAAKX,MAAM,SAASY,KAAK,YACxBf,EAAcgB,QACbJ,EAAAA,EAAAA,IAACK,EAAAA,GAAD,CAAIC,UAAU,SAASC,EAAE,UAAzB,KACQP,EAAAA,EAAAA,IAAAA,OAAAA,KAAOb,GADf,UAC2C,KACzCa,EAAAA,EAAAA,IAAAA,OAAAA,KAAOZ,EAAcgB,QAFvB,gBAKAJ,EAAAA,EAAAA,IAACK,EAAAA,GAAD,CAAIC,UAAU,SAASC,EAAE,UAAzB,KACQP,EAAAA,EAAAA,IAAAA,OAAAA,KAAOb,GADf,uBAIFa,EAAAA,EAAAA,IAACQ,EAAAA,GAAD,CAAUlC,MAAOc,IA3BvB,C,wDEcA,IAda,SAAC,GAA6B,IAA3BqB,EAA0B,EAA1BA,SACd,OACET,EAAAA,EAAAA,IAACU,EAAAA,SAAD,MACEV,EAAAA,EAAAA,IAACW,EAAAA,GAAD,OACAX,EAAAA,EAAAA,IAACY,EAAAA,GAAD,CACEC,MAAO,CAAC,YAAa,YAAa,YAAa,WAAY,cAE1DJ,IAEHT,EAAAA,EAAAA,IAACc,EAAAA,GAAD,MATN,C","sources":["webpack://@beomy/blog/./src/pages/search.tsx","webpack://@beomy/blog/./src/utils/location.ts","webpack://@beomy/blog/./src/templates/list.tsx"],"sourcesContent":["import { graphql, PageProps } from 'gatsby';\nimport type { Data } from '@/models/graphQL';\nimport { searchToObject } from '@/utils/location';\nimport { H2 } from '@/atoms';\nimport { PostList, Seo } from '@/organisms';\nimport List from '@/templates/list';\nimport { usePosts } from '@/hooks';\n\nconst Search = ({ data, location }: PageProps<Data>) => {\n  const posts = usePosts(data.allMarkdownRemark);\n  const { keyword } = searchToObject(location.search);\n  const filteredPosts = posts.filter(\n    (post) =>\n      post.title?.toLocaleUpperCase().includes(keyword?.toLocaleUpperCase()) ||\n      post.summary\n        ?.toLocaleUpperCase()\n        .includes(keyword?.toLocaleUpperCase()) ||\n      !!post.category?.find(\n        (x) => x.toLocaleUpperCase() === keyword?.toLocaleUpperCase(),\n      ),\n  );\n\n  return (\n    <List>\n      <Seo title=\"Search\" path=\"/search\" />\n      {filteredPosts.length ? (\n        <H2 textAlign=\"center\" m=\"50px 0\">\n          &quot;<span>{keyword}</span>&quot;에 대해 총{' '}\n          <span>{filteredPosts.length}</span>건이 검색되었습니다.\n        </H2>\n      ) : (\n        <H2 textAlign=\"center\" m=\"50px 0\">\n          &quot;<span>{keyword}</span>&quot;에 대한 검색 결과가 없습니다.\n        </H2>\n      )}\n      <PostList posts={filteredPosts} />\n    </List>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: fields___createdDate }) {\n      edges {\n        node {\n          excerpt\n          frontmatter {\n            thumbnail: featured_img\n            summary\n            title\n            category\n          }\n          timeToRead\n          fields {\n            createdDate(formatString: \"YYYY-MM-DD\")\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\nexport default Search;\n","export function searchToObject(search: string): Record<string, string> {\n  const pairs = search.substring(1).split('&');\n  return pairs.reduce((obj: any, item) => {\n    if (item !== '') {\n      const [key, value] = item.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n    return obj;\n  }, {});\n}\n","import type { ReactNode } from 'react';\nimport { Fragment } from 'react';\nimport { Header, Contents, Footer } from '@/organisms';\n\ntype ListProps = {\n  children: ReactNode;\n};\n\nconst List = ({ children }: ListProps) => {\n  return (\n    <Fragment>\n      <Header />\n      <Contents\n        width={['screen.xs', 'screen.xs', 'screen.sm', 'screen.m', 'screen.lg']}\n      >\n        {children}\n      </Contents>\n      <Footer />\n    </Fragment>\n  );\n};\n\nexport default List;\n"],"names":["data","location","posts","usePosts","allMarkdownRemark","search","substring","split","reduce","obj","item","key","value","decodeURIComponent","searchToObject","keyword","filteredPosts","filter","post","title","toLocaleUpperCase","includes","summary","_post$summary","category","_post$category","find","x","___EmotionJSX","List","Seo","path","length","H2","textAlign","m","PostList","children","Fragment","Header","Contents","width","Footer"],"sourceRoot":""}