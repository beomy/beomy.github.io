{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"TL;DR…","frontmatter":{"thumbnail":"react/react.png","summary":"React 18에서 추가된 기능 중 가장 중요한 것이 사용자 경험을 향상할 수 있는 동시성 렌더링입니다. 이번 포스트에서는 동시성이 무엇인지 그리고 동시성을 위해 추가된 startTransition 함수와 useTransition, useDeferredValue 훅을 살펴보도록 하겠습니다.","title":"[React] Concurrent Rendering - 동시성 렌더링"},"timeToRead":6,"fields":{"createdDate":"2023-10-24","slug":"/tech/react/concurrent-rendering/"}}},{"node":{"excerpt":"사용하고 있는 외부 라이브러리 API를 자세히 알면 그 라이브러리에서 제공하는 다양한 기능을 사용할 수 있기 때문에 라이브러리를 더 멋있게 사용할 수 있습니다. 이번 포스트에서는 React Hook Form을 좀 더 멋있게 사용하기 위해 React…","frontmatter":{"thumbnail":"react/react-hook-form.png","summary":"사용하고 있는 외부 라이브러리 API를 자세히 알면 그 라이브러리에서 제공하는 다양한 기능들을 인지하고 사용할 수 있기 때문에 라이브러리를 더 멋있게 사용할 수 있습니다. 이번 포스트에서는 React Hook Form을 좀 더 멋있게 사용하기 위해 React Hook Form에서 제공하는 API들을 살펴보도록 하겠습니다.","title":"[React] react-hook-form API 레퍼런스"},"timeToRead":26,"fields":{"createdDate":"2023-10-13","slug":"/tech/react/react-hook-form-api-reference/"}}},{"node":{"excerpt":"TL;DR React Hook Form은 Uncontrolled 방식의 빠른 성능이 장점인 폼 관리 라이브러리입니다. 물론 Controlled 방식도 지원합니다. Uncontrolled…","frontmatter":{"thumbnail":"react/react-hook-form.png","summary":"React Hook Form은 사용자 입력을 받고 검증하는 것을 도와 주는 라이브러리로, React에서 폼을 관리하는 가장 유명한 라이브러리 중 하나입니다. React Hook Form을 사용하면 사용자에게 입력을 받고 검증하는데 드는 시간을 줄일 뿐만 아니라 더불어 성능까지 두 마리 토끼를 모두 잡을 수 있습니다.","title":"[React] react-hook-form으로 폼 관리하기"},"timeToRead":15,"fields":{"createdDate":"2023-07-31","slug":"/tech/react/react-hook-form/"}}},{"node":{"excerpt":"TL;DR 왼쪽부터 더 나은 결과를 보여준 라이브러리를 순서대로 나열하였습니다. 코드 양 (글자 수): react-hook-form < formik < rc-field-form 코드 양 (라인 수): formik < react-hook-form…","frontmatter":{"thumbnail":"react/react.png","summary":"FrontEnd 개발을 하다보면 사용자 입력을 받고 입력 받은 값을 검증하는데에 많은 시간을 쓰게 되는데, 폼 관리 라이브러리를 사용하게 되면 사용자에게 입력을 받고 검증하는데 드는 시간과 노력을 줄일 수 있습니다.","title":"[React] react-hook-form, formik, rc-field-form 폼 관리 어떤걸로 해야 할까"},"timeToRead":11,"fields":{"createdDate":"2023-07-15","slug":"/tech/react/form-libraries/"}}},{"node":{"excerpt":"…","frontmatter":{"thumbnail":"review/start-up-blog-writing.png","summary":"내가 책에서 원했던건 목차를 나누는 팁, 의미를 잘 전달하는 방법 같은 글을 잘 쓰는 디테일한 기술들이었다. 하지만 이 책은 디테일 보다는 큰 밑그림을 그려주는 책이다.","title":"[책 리뷰] Start up 블로그 글쓰기 나만의 콘텐츠로 성공하기"},"timeToRead":6,"fields":{"createdDate":"2023-07-02","slug":"/review/book/start-up-blog-writing/"}}},{"node":{"excerpt":"TanStack Query는 비동기 작업 처리를 돕는 라이브러리입니다. v3까지는 React Query라는 이름으로 React만 지원했는데, v4 부터 React 이외의 프레임워크(Vue, Svelte, Solid…","frontmatter":{"thumbnail":"react/tanstack-query.png","summary":"TanStack Query는 비동기 작업 처리를 돕는 라이브러리입니다. v3까지는 React Query라는 이름으로 React만 지원했는데, v4 부터 React 이외의 프레임워크(Vue, Svelte, Solid)에서 사용할 수 있도록 업데이트 되며 TanStack Query로 이름이 변경되었습니다.","title":"[React] TanStack Query v4 (React Query)"},"timeToRead":26,"fields":{"createdDate":"2023-06-13","slug":"/tech/react/tanstack-query-v4/"}}},{"node":{"excerpt":"이번 포스트에서는 를 사용하여 모노레포를 구성해 보도록 하겠습니다. 이번에 구성할 모노레포는 Emotion와 React, TypeScript를 사용한 서비스 프로젝트와 디자인 시스템 프로젝트입니다. 이전 포스트 [ETC] Monorepo…","frontmatter":{"thumbnail":"etc/monorepo.png","summary":"이번 포스트에서는 Yarn Berry를 사용하여 모노레포를 구성해 보도록 하겠습니다. 이번에 구성할 모노레포는 Emotion와 React, TypeScript를 사용한 서비스 프로젝트와 디자인 시스템 프로젝트입니다.","title":"[ETC] Monorepo - Yarn Berry"},"timeToRead":9,"fields":{"createdDate":"2023-02-15","slug":"/tech/etc/monorepo-yarn-berry/"}}},{"node":{"excerpt":"하나의 저장소(Repository)에서 여러개의 프로젝트를 관리하는 방식을 모노레포라고 합니다. 이번 포스트에서는 모노레포가 무엇인지 모노레포가 등장하기까지 어떻게 프로젝트 구성이 발전되어 왔는지 살펴보도록 하겠습니다. TL;DR…","frontmatter":{"thumbnail":"etc/monorepo.png","summary":"하나의 저장소(Repository)에서 여러개의 프로젝트를 관리하는 방식을 모노레포라고 합니다. 이번 포스트에서는 모노레포가 무엇인지 모노레포가 등장하기까지 어떻게 프로젝트 구성이 발전되어 왔는지 살펴보도록 하겠습니다.","title":"[ETC] Monorepo - 개념"},"timeToRead":6,"fields":{"createdDate":"2023-02-14","slug":"/tech/etc/monorepo-concept/"}}},{"node":{"excerpt":"은 과 같은 Node Package Manager입니다. 의 1 버전을 이라고 하고 의 2 버전 이상을 라고 합니다.  의 1 버전을  이라고 합니다. Yarn Classic 저장소에 프로젝트 설명을 보면, 1.x…","frontmatter":{"thumbnail":"etc/yarn_berry.png","summary":"Yarn은 NPM과 동일한 Node Package Manager입니다. Yarn의 1 버전을 Yarn Classic이라고 하고 Yarn의 2 버전 이상을 Yarn Berry라고 합니다.","title":"[ETC] Yarn Berry"},"timeToRead":8,"fields":{"createdDate":"2023-02-08","slug":"/tech/etc/yarn-berry/"}}},{"node":{"excerpt":"…","frontmatter":{"thumbnail":"etc/package_json.png","summary":"package.json 파일의 scripts 필드는 빌드, 실행 등에 사용되는 명령어를 선언하거나 패키지의 install, publish 전/후에 실행되는 스크립트 명령어를 선언할 때 사용됩니다.","title":"[ETC] package.json의 scripts"},"timeToRead":6,"fields":{"createdDate":"2022-12-12","slug":"/tech/etc/package-json-scripts/"}}},{"node":{"excerpt":"에는 프로젝트에 대한 설명, 종속성 패키지, 실행 스크립트 등의 정보를 담는 매니페이스(Manifest) 파일입니다. 이번 포스트에서는 에서 설정할 수 있는 필드 값들을 하나씩 살펴보도록 하겠습니다. 사용하는 패키지 매니저(NPM, Yarn, PNPM…","frontmatter":{"thumbnail":"etc/package_json.png","summary":"package.json에는 프로젝트에 대한 설명, 패키지, 실행 스크립트 등의 정보를 담는 매니페이스(Manifest) 파일입니다. 이번 포스트에서는 package.json에서 설정할 수 있는 필드 값들을 하나씩 살펴보도록 하겠습니다.","title":"[ETC] package.json 톺아보기"},"timeToRead":19,"fields":{"createdDate":"2022-10-14","slug":"/tech/etc/package-json/"}}},{"node":{"excerpt":"이번 포스트에서는 HTTP 요청과 응답에 사용되는 리소스를 최소화 하기 위한 기능 중 하나인 HTTP 캐시에 대해 살펴보도록 하겠습니다. 캐시 목적 HTTP 캐시는 첫 HTTP 요청 시 HTML, Image, JS, CSS…","frontmatter":{"thumbnail":"etc/HTTP_logo.png","summary":"HTTP 캐시는 첫 HTTP 요청 시 HTML, Image, JS, CSS 등의 파일을 다운로드 받아 특정 위치에 복사본을 저장하고 이후 동일한 HTTP 요청 시 다시 다운로드하지 않고 내부에 저장한 파일을 사용하여 더 빠르게 서비스하기 위한 기능입니다.","title":"[ETC] HTTP 캐시"},"timeToRead":17,"fields":{"createdDate":"2022-06-09","slug":"/tech/etc/http-caching/"}}},{"node":{"excerpt":"HTTP의 버전은 초기 버전인 HTTP/0.9부터, HTTP/1.0, HTTP/1.1, HTTP/2, 그리고 가장 최근 버전인 HTTP/3까지 5개의 버전이 있습니다. 이번 포스트에서 각 버전 별 특징을 살펴보도록 하겠습니다. HTTP/0.9 HTTP…","frontmatter":{"thumbnail":"etc/HTTP_logo.png","summary":"HTTP의 버전은 초기 버전인 HTTP/0.9부터, HTTP/1.0, HTTP/1.1, HTTP/2, 그리고 가장 최근 버전인 HTTP/3까지 5개의 버전이 있습니다. 이번 포스트에서 각 버전 별 특징을 살펴보도록 하겠습니다.","title":"[ETC] HTTP 버전"},"timeToRead":24,"fields":{"createdDate":"2022-03-21","slug":"/tech/etc/http-version/"}}},{"node":{"excerpt":"HTTP, HyperText Transfer Protocol은 인터넷에서 하이퍼텍스트(HyperText)를 전송(Transfer)하기 위한 통신 규약(Protocol)입니다. 이번 포스트에서 HTTP…","frontmatter":{"thumbnail":"etc/HTTP_logo.png","summary":"HTTP, HyperText Transfer Protocol은 인터넷에서 하이퍼텍스트(HyperText)를 전송(Transfer)하기 위한 통신 규약(Protocol)입니다.","title":"[ETC] HTTP 톺아보기"},"timeToRead":19,"fields":{"createdDate":"2022-01-23","slug":"/tech/etc/http/"}}},{"node":{"excerpt":"…","frontmatter":{"thumbnail":"browser/cookie.png","summary":"쿠키를 통해 사용자 인증이 이루어질 경우 쿠키가 탈취 되었을 때 큰 피해가 발생 할 수 있기 때문에 쿠키를 사용하기 전에 쿠키가 무엇인지 이해하고 주의하며 사용하는 것은 중요합니다.","title":"[Browser] Cookie 톺아보기"},"timeToRead":13,"fields":{"createdDate":"2021-10-18","slug":"/tech/browser/cookie/"}}},{"node":{"excerpt":"이번 포스트에서는 웹 취약성을 노리는 XSS와 XSRF(CSRF) 공격에 대해 살펴보도록 하겠습니다. XSS(Cross-Site Scripting) 사이트 간 스크립팅(XSS…","frontmatter":{"thumbnail":"etc/xss_xsrf_banner.png","summary":"웹 취약성을 노리는 XSS와 XSRF에 대해 살펴보도록 하겠습니다.","title":"[ETC] XSS와 XSRF"},"timeToRead":10,"fields":{"createdDate":"2021-07-28","slug":"/tech/etc/xss-xsrf/"}}},{"node":{"excerpt":"이번 포스트에서는 교차 출처 리소스 공유(Cross-Origin Resource Sharing, CORS)에 대해 이야기해보도록 하겠습니다. 아래 사진과 같은 에러를 보신 적이 있으셨을 수도 있습니다. access-control-allow-origin…","frontmatter":{"thumbnail":"browser/cors.png","summary":"교차 출처 리소스 공유(Cross-Origin Resource Sharing, CORS)에 대해 살펴보도록 하겠습니다.","title":"[Browser] CORS란?"},"timeToRead":15,"fields":{"createdDate":"2020-12-21","slug":"/tech/browser/cors/"}}},{"node":{"excerpt":"ES2020(ES11)에 추가된 기능들을 살펴보도록 하겠습니다. String.prototype.matchAll 문자열에서 일치하는 정규식을 iterator 형태로 반환하는 함수입니다. 사용방법은 와 동일합니다.  사용 iterator…","frontmatter":{"thumbnail":"javascript/js.png","summary":"ES2020에 추가된 기능을 살펴보도록 하겠습니다.","title":"[JavaScript] ECMAScript 2020"},"timeToRead":8,"fields":{"createdDate":"2020-09-01","slug":"/tech/javascript/es2020/"}}},{"node":{"excerpt":"전처리를 해주는 가 Svelte 공식 지원 라이브러리로 편입되면서, Svelte가 TypeScript를 공식 지원하게 되었습니다. 이번 포스트에서는 Rollup, Webpack 번들러에서 를 사용해서 Svelte에 TypeScript와 SCSS…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte + TS + SCSS 구조의 프로젝트를 만들어보도록 하겠습니다.","title":"[Svelte] Svelte + TS + SCSS + α"},"timeToRead":14,"fields":{"createdDate":"2020-08-26","slug":"/tech/svelte/svelte-ts-scss/"}}},{"node":{"excerpt":"ECMAScript는 ES5, ES6 등의 줄임말로 많이 접해 보셨을 겁니다. 이번 포스트에서는 ECMAScript가 무엇인지 이야기하도록 하겠습니다. ECMAScript 란? 1996년 넷스케이프에서 넷스케이프 네비게이터 2.…","frontmatter":{"thumbnail":"javascript/js.png","summary":"ECMAScript와 TC39 제안 프로세스가 무엇인지 알아보도록 하겠습니다.","title":"[JavaScript] ECMAScript 란"},"timeToRead":4,"fields":{"createdDate":"2020-08-12","slug":"/tech/javascript/ecma-script/"}}},{"node":{"excerpt":"스벨트 입문 강의를 출시했습니다. 블로그의 내용과 공식 문서를 토대로 인프런에 스벨트 입문 A부터 Z…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"스벨트 입문 강의가 인프런에 런칭되었습니다!","title":"[Svelte] 스벨트 입문 A부터 Z까지"},"timeToRead":3,"fields":{"createdDate":"2020-08-07","slug":"/tech/svelte/inflearn-svelte-for-beginner/"}}},{"node":{"excerpt":"처음 자바스크립트는 모듈을 가져오거나 내보내는 방법이 없어, 하나의 파일에 모든 기능들이 들어가야 했습니다. CJS, AMD, UMD, ESM…","frontmatter":{"thumbnail":"javascript/js.png","summary":"자바스크립트를 모듈화할 수 있게 한 CJS, AMD, UMD, ESM에 대해 살펴보겠습니다.","title":"[JavaScript] CJS, AMD, UMD, ESM"},"timeToRead":8,"fields":{"createdDate":"2020-05-25","slug":"/tech/javascript/cjs-amd-umd-esm/"}}},{"node":{"excerpt":"Svelte와 Vue를 사용하면서 느낀 차이점을 이야기해 보려고 합니다. 반응형 동작 Svelte와 Vue의 가장 큰 차이는 반응형 동작 방식이라고 생각합니다. Vue는 array…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte와 Vue를 사용하면서 느낀 차이점을 이야기해 보려고 합니다.","title":"[Svelte] Vue와 Svelte 비교"},"timeToRead":6,"fields":{"createdDate":"2020-05-01","slug":"/tech/svelte/vue-vs-svelte/"}}},{"node":{"excerpt":"…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Module context를 사용하면 같은 컴포넌트로 생성한 인스턴스 간의 코드를 공유할 수 있습니다.","title":"[Svelte] Module context"},"timeToRead":3,"fields":{"createdDate":"2020-04-25","slug":"/tech/svelte/module-context/"}}},{"node":{"excerpt":"Svelte는 유용한 몇 가지 내장 요소(element)를 제공합니다.  는 컴포넌트가 재귀적으로 자신을 포함할 수 있게 하는 요소입니다. 이 요소는 폴더 트리 구조와 같은 형태를 표현해야 할 때 유용합니다. svelte:option self…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte는 유용한 몇가지 내장 요소(element)를 제공합니다.","title":"[Svelte] Svelte 요소"},"timeToRead":7,"fields":{"createdDate":"2020-04-24","slug":"/tech/svelte/svelte-elements/"}}},{"node":{"excerpt":"Context API는 컴포넌트의 데이터와 함수를 props 외의 방법으로 전달하는 기능을 제공합니다. Mapbox GL 예제 Mapbox GL을 사용한 예제로 Context API…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Context API는 컴포넌트의 데이터와 함수를 props 외의 방법으로 전달하는 기능을 제공합니다.","title":"[Svelte] Context API"},"timeToRead":4,"fields":{"createdDate":"2020-04-18","slug":"/tech/svelte/context-api/"}}},{"node":{"excerpt":"이번 포스트에서는 컴포넌트가 자식 요소를 가질 수 있도록 기능을 제공하는 을 살펴보도록 하겠습니다. Slot HTML 요소는 아래와 같이 자식 요소를 가질 수 있습니다. 컴포넌트도 을 사용하면 자식 요소를 가질 수 있게 됩니다. Vue.js…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"컴포넌트가 자식 요소를 가질 수 있게 하는 Slot을 살펴봅니다.","title":"[Svelte] Slot"},"timeToRead":8,"fields":{"createdDate":"2020-04-12","slug":"/tech/svelte/slot/"}}},{"node":{"excerpt":"이번 포스트에서는 Svelte의 액션(action)에 대해 이야기하도록 하겠습니다. Svelte의 액션은 Vue.js의 커스텀 디렉티브와 유사합니다. Svelte의 액션을 만드는 방법과 Vue.js…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte의 액션은 Vue.js의 커스텀 디렉티브와 유사합니다. Svelte의 액션을 살펴보겠습니다.","title":"[Svelte] 액션"},"timeToRead":8,"fields":{"createdDate":"2020-04-03","slug":"/tech/svelte/action/"}}},{"node":{"excerpt":"Svelte…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte는 애니메이션을 간편히 사용할 수 있도록 애니메이션 디렉티브를 제공합니다.","title":"[Svelte] 애니메이션"},"timeToRead":7,"fields":{"createdDate":"2020-04-01","slug":"/tech/svelte/animation/"}}},{"node":{"excerpt":"Svelte는 DOM…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte는 DOM에 요소들이 추가, 제거되었을 때 트랜지션을 효과적으로 지원하는 트랜지션 디렉티브를 제공합니다.","title":"[Svelte] 트랜지션"},"timeToRead":16,"fields":{"createdDate":"2020-03-27","slug":"/tech/svelte/transition/"}}},{"node":{"excerpt":"Svelte는 변수를 DOM에 바인딩하고 DOM이 업데이트되면 자동으로 변수의 값이 업데이트됩니다. Svelte에서는 변수의 값이 업데이트되었을 때 애니메이션을 사용할 수 있는 Motion 기능을 제공합니다. 이번 포스트에서는 Svelte…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte에서는 변수의 값이 업데이트되었을 때 애니메이션을 사용할 수 있는 Motion 기능을 제공합니다.","title":"[Svelte] Motion"},"timeToRead":4,"fields":{"createdDate":"2020-03-21","slug":"/tech/svelte/motion/"}}},{"node":{"excerpt":"Vue.js의 상태 관리 라이브러리로 vuex를 공식 지원합니다. Svelte는 상태 관리 라이브러리를 따로 지원하지 않고, Svelte 내부()에 포함되어 있습니다. store…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte의 상태 관리를 지원하는 store를 제공합니다.","title":"[Svelte] Store"},"timeToRead":10,"fields":{"createdDate":"2020-03-18","slug":"/tech/svelte/store/"}}},{"node":{"excerpt":"이번 포스트에서는 컴포넌트의 생명주기(Lifecycle…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"컴포넌트의 생명주기(Lifecycle)를 이야기할 것입니다.","title":"[Svelte] 라이프 사이클"},"timeToRead":8,"fields":{"createdDate":"2020-03-09","slug":"/tech/svelte/lifecycle/"}}},{"node":{"excerpt":"이번 포스트에서는 [Svelte] 데이터 바인딩 기초에 이어 두 번째 데이터 바인딩을 이야기합니다. 많이 사용되지는 않지만 필요할 때 사용하면 편리한 기능들입니다. Media 태그 Svelte…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte의 데이터 바인딩을 이야기합니다. 많이 사용되지는 않지만 필요할 때 사용하면 편리한 기능들입니다.","title":"[Svelte] 데이터 바인딩 고급"},"timeToRead":9,"fields":{"createdDate":"2020-03-01","slug":"/tech/svelte/bindings-in-depth/"}}},{"node":{"excerpt":"이번 포스트에서는 데이터 바인딩을 이야기합니다. Vue.js에서 로 데이터 바인딩 하는 방법을 Svelte…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte의 기본적인 데이터 바인딩을 이야기합니다.","title":"[Svelte] 데이터 바인딩 기초"},"timeToRead":10,"fields":{"createdDate":"2020-02-29","slug":"/tech/svelte/bindings-basic/"}}},{"node":{"excerpt":"이번 포스트에서는 Svelte에서 이벤트를 다루는 방법을 이야기합니다. DOM 이벤트 Vue.js에서는 아래 코드와 같이 이벤트를 감지할 수 있습니다. Svelte…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte에서 이벤트를 다루는 방법을 이야기합니다.","title":"[Svelte] 이벤트 다루기"},"timeToRead":7,"fields":{"createdDate":"2020-02-19","slug":"/tech/svelte/events/"}}},{"node":{"excerpt":"이번 포스트에서는 HTML에서 조건문, 반복문을 표현하는 방법을 이야기합니다. Vue.js에는 없는 await 블록 기능은 Svelte의 장점이라고 생각합니다. 조건문 블록 Vue.js…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte 내의 HTML에서 조건문, 반복문을 표현하는 방법을 이야기합니다.","title":"[Svelte] 논리 블록"},"timeToRead":4,"fields":{"createdDate":"2020-02-13","slug":"/tech/svelte/logic-blocks/"}}},{"node":{"excerpt":"상위 컴포넌트에서 하위 컴포넌트로 전달되는 데이터들을 Properties라고 합니다. 보통 Props를 전달한다고 이야기합니다. 이번 포스트에서는 Svelte의 Props을 이야기 합니다. Props 정의 Vue.js에서 Props…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"상위 컴포넌트에서 하위 컴포넌트로 전달되는 데이터들을 Props라고 합니다. Svelte의 Props을 이야기 합니다.","title":"[Svelte] Props"},"timeToRead":3,"fields":{"createdDate":"2020-02-10","slug":"/tech/svelte/props/"}}},{"node":{"excerpt":"이번 포스트에서는 사용자 행동에 따라 반응형으로 동작하는 웹을 만들기 위한 Svelte 문법을 이야기합니다. Vue.js에 이벤트 리스너(Event Listener)를 등록하듯 Svelte에서 이벤트 리스너를 등록하는 방법과 Vue.js…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"사용자 행동에 따라 반응형으로 동작하는 웹을 만들기 위한 Svelte 문법을 이야기합니다.","title":"[Svelte] 반응형을 위한 문법"},"timeToRead":5,"fields":{"createdDate":"2020-02-07","slug":"/tech/svelte/reactivity-syntax/"}}},{"node":{"excerpt":"이번 포스트에서는 Svelte의 기본 문법을 이야기합니다. data 정의 화면에 반응형으로 표시되는 데이터를 Vue.js에서 정의하는 방법은 아래와 같습니다. Svelte에서는 동일한 코드를 아래와 같이 사용할 수 있습니다. Svelte…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"Svelte의 기본 문법을 Vue.js와 비교하여 이야기합니다.","title":"[Svelte] Svelte 기초 문법"},"timeToRead":5,"fields":{"createdDate":"2020-02-04","slug":"/tech/svelte/basic-svelte/"}}},{"node":{"excerpt":"Outdate 되었습니다. 최신 내용은 [Svelte] Svelte + TS + SCSS + α에 포스팅 되었습니다. 이번 포스트에서는 rollup + sass + typescript와 webpack + sass + typescript…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"rollup + sass + typescript와 webpack + sass + typescript를 사용할 수 있도록 Svelte 프로젝트를 구성하는 방법을 이야기합니다.","title":"[Svelte] Svelte 시작하기"},"timeToRead":14,"fields":{"createdDate":"2020-02-01","slug":"/tech/svelte/start-svelte/"}}},{"node":{"excerpt":"Vue.js, React, Angular를 프론트엔드 프레임워크 3대장이라고 흔히들 말합니다. 이번 포스트에서는 새롭게 등장한 Svelte라는 프레임워크를 소개합니다. 아직 정식 한글 문서를 제공하지 않고 있지만, 프레임워크…","frontmatter":{"thumbnail":"svelte/svelte.png","summary":"새롭게 등장한 Svelte라는 프레임워크를 소개합니다.","title":"[Svelte] Svelte 소개"},"timeToRead":7,"fields":{"createdDate":"2020-01-26","slug":"/tech/svelte/introduction-svelte/"}}},{"node":{"excerpt":"자바스크립트는 파서 차단 리소스(parser blocking resource)입니다. 브라우저는 HTML…","frontmatter":{"thumbnail":"browser/browser.png","summary":"script 태그를 비동기 처리하여 브라우저의 파싱을 차단하지 않는 방법에 대해 이야기할 것입니다.","title":"[Browser] async와 defer"},"timeToRead":6,"fields":{"createdDate":"2019-12-09","slug":"/tech/browser/async-defer/"}}},{"node":{"excerpt":"이번 포스트에서는 화면이 수정될 때, 렌더링 과정을 최적화하는 방법에 대해 이야기할 것입니다. 화면을 다시 그리는 과정은 크게 Reflow(Layout이라고도 함)와 Repaint(Redraw라고도 함) 두 개로 나눌 수 있습니다. Repaint…","frontmatter":{"thumbnail":"browser/browser.png","summary":"브라우저의 화면이 수정될 때, 렌더링 과정을 최적화 하는 방법에 대해 이야기 할 것입니다.","title":"[Browser] Reflow와 Repaint"},"timeToRead":20,"fields":{"createdDate":"2019-12-06","slug":"/tech/browser/reflow-repaint/"}}},{"node":{"excerpt":"이번 포스트에서는 [Browser] Critical Rendering Path 최적화에서 이야기한 리소스 우선순위를 지정할 수 있는  태그의 와 , 에 대해 이야기하도록 하겠습니다. preload…","frontmatter":{"thumbnail":"browser/browser.png","summary":"브라우저에서 리소스에 우선순위를 지정하여 다운로드할 수 있게 하는 방법에 대해 이야기하도록 하겠습니다.","title":"[Browser] 리소스 우선순위 - preload, preconnect, prefetch"},"timeToRead":14,"fields":{"createdDate":"2019-11-19","slug":"/tech/browser/preload-preconnect-prefetch/"}}},{"node":{"excerpt":"이번 포스트에서는 렌더링 최적화에 관해 이야기할 것입니다. 렌더링 최적화를 위해서는 우선 렌더링 과정을 이해하는 것이 좋습니다. [Browser…","frontmatter":{"thumbnail":"browser/browser.png","summary":"브라우저 렌더링 최적화 방법에 대해 이야기할 것입니다.","title":"[Browser] Critical Rendering Path 최적화"},"timeToRead":14,"fields":{"createdDate":"2019-10-29","slug":"/tech/browser/critical-rendering-path/"}}},{"node":{"excerpt":"이번 포스트에서는 브라우저가 화면을 렌더링 하는 과정에 대해 이야기할 것입니다. 렌더링 과정을 이해하면 웹페이지의 렌더링 최적화에 도움이 될 수 있겠죠? 렌더링 최적화 방법은 [Browser] Critical Rendering Path…","frontmatter":{"thumbnail":"browser/browser.png","summary":"브라우저가 화면을 렌더링 하는 과정에 대해 이야기할 것입니다.","title":"[Browser] 브라우저 렌더링"},"timeToRead":10,"fields":{"createdDate":"2019-10-16","slug":"/tech/browser/browser-rendering/"}}},{"node":{"excerpt":"이번 포스트에서는 자바스크립트 런타임의 동작 원리를 이야기하도록 하겠습니다. 런타임(runtime)이란 프로그래밍 언어가 구동되는 환경을 말합니다.(위키 링크를 보면 런타임 환경이라고 보시면 될 것 같습니다.) Node.js…","frontmatter":{"thumbnail":"javascript/js.png","summary":"자바스크립트 런타임의 동작 원리를 이야기 하도록 하겠습니다.","title":"[JavaScript] 자바스크립트 런타임"},"timeToRead":7,"fields":{"createdDate":"2019-09-14","slug":"/tech/javascript/javascript-runtime/"}}},{"node":{"excerpt":"7. View Render - 컴파일러에서 이야기 한  함수에서 view를 랜더링 하는데 사용된 2가지 함수인 와 에서 호출하는  함수와  함수에 대해 이야기 하도록 하겠습니다. view를 랜더링 하는 2가지 함수  함수에서 view…","frontmatter":{"thumbnail":"vuejs/vuejs.png","summary":"_render()와 _update()에서 호출하는 render 함수와 __patch__ 함수에 대해 이야기 하도록 하겠습니다.","title":"[Inside Vue] 9. View Render - Patch"},"timeToRead":10,"fields":{"createdDate":"2019-09-12","slug":"/tech/vuejs/view-render-patch/"}}},{"node":{"excerpt":"…","frontmatter":{"thumbnail":"vuejs/vuejs.png","summary":"baseCompile 함수에서 사용하는 parse, optimize, generate 함수에 대해 이야기합니다.","title":"[Inside Vue] 8. View Render - baseCompile 함수"},"timeToRead":5,"fields":{"createdDate":"2019-09-11","slug":"/tech/vuejs/view-render-baseCompile-function/"}}},{"node":{"excerpt":"이번 포스트에서는 view를 DOM에 그릴 수 있도록 브라우저에서 실행되는 코드로 변환하는 컴파일러 함수를 만드는 과정을 이야기 할 것입니다. 랜더링 함수 이전 포스트(6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy…","frontmatter":{"thumbnail":"vuejs/vuejs.png","summary":"view를 DOM에 그릴 수 있도록 브라우저에서 실행되는 코드로 변환하는 컴파일러 함수를 만드는 과정을 이야기할 것입니다.","title":"[Inside Vue] 7. View Render - 컴파일러"},"timeToRead":5,"fields":{"createdDate":"2019-09-10","slug":"/tech/vuejs/view-render-compiler/"}}},{"node":{"excerpt":"이전 포스트(5. Reactive - Observer, Dep and Watcher)에서는 와 , 의 관계에 대해 이야기하였습니다. 이번 포스트에서는 가 어떻게 값을 업데이트 하는지, View와 data…","frontmatter":{"thumbnail":"vuejs/vuejs.png","summary":"Vue에서 데이터를 업데이트 하는 3가지 방법을 이야기할 것입니다.","title":"[Inside Vue] 6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy, Sync, Queue)"},"timeToRead":10,"fields":{"createdDate":"2019-09-09","slug":"/tech/vuejs/reactive-lazy-sync-queue/"}}},{"node":{"excerpt":"이번 포스트에서는 Observer와 Dep, Watcher에 대해 이야기 하도록 하겠습니다. Vue는 data…","frontmatter":{"thumbnail":"vuejs/vuejs.png","summary":"Vue에서 데이터 변화를 감지하는 방법을 이야기할 것입니다.","title":"[Inside Vue] 5. Reactive - Observer, Dep and Watcher"},"timeToRead":13,"fields":{"createdDate":"2019-09-08","slug":"/tech/vuejs/reactive-observer-dep-watcher/"}}},{"node":{"excerpt":"이번 포스트에서는 Vue 코어 함수에서 호출하는  함수의 초기화 동작에 대해 이야기 할 것입니다.  함수 살펴보기 위의 코드는 코드 함수 코어 입니다. 이번 포스트에서는  함수를 살펴 보도록 하겠습니다. Vue를 사용할 때, 위의 코드처럼 Vue…","frontmatter":{"thumbnail":"vuejs/vuejs.png","summary":"Vue 코어 함수에서 호출하는 초기화 동작을 이야기할 것입니다.","title":"[Inside Vue] 4. Initialize - _init 함수"},"timeToRead":13,"fields":{"createdDate":"2019-09-07","slug":"/tech/vuejs/initialize-_init-function/"}}},{"node":{"excerpt":"이번 포스트에서는 2. Initialize - Vue 코어 함수에서 이야기 했던  파일의  5개의 mixin…","frontmatter":{"thumbnail":"vuejs/vuejs.png","summary":"Vue 코어 함수의 mixin 레이어를 이야기할 것입니다.","title":"[Inside Vue] 3. Initialize - Mixin Layer"},"timeToRead":7,"fields":{"createdDate":"2019-09-06","slug":"/tech/vuejs/initialize-mixin-layer/"}}},{"node":{"excerpt":"이번 포스트에서는 Vue의 코어 함수를 찾고, Vue의 큰 구조에 대해 이야기 할 것입니다. Vue의 큰 구조를 이해하면, 코드를 분석 할 때, 자세히 봐야할 파일과 그렇지 않아도 되는 파일들을 구분 하는데 도움이 될 수 있습니다. Vue…","frontmatter":{"thumbnail":"vuejs/vuejs.png","summary":"Vue의 큰 구조와 Vue의 코어 함수를 살펴볼 것입니다.","title":"[Inside Vue] 2. Initialize - Vue 코어 함수"},"timeToRead":6,"fields":{"createdDate":"2019-09-05","slug":"/tech/vuejs/initialize-vue-core-function/"}}},{"node":{"excerpt":"Vue를 사용하면서, Vue의 코드를 한번 분석해 보고 싶었습니다. Vue를 GitHub…","frontmatter":{"thumbnail":"vuejs/vuejs.png","summary":"Vue의 코드를 분석하기 전에 준비 사항과 분석을 시작하는 과정을 이야기할 것입니다.","title":"[Inside Vue] 1. Introduction - Vue Code 분석"},"timeToRead":7,"fields":{"createdDate":"2019-09-04","slug":"/tech/vuejs/introduction-vue-code-analysis/"}}}]}},"pageContext":{}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}