{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/browser/browser-rendering/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/a061b86ded539904e8b39295bf3695a3/f635c/browser.png","srcSet":"/static/a061b86ded539904e8b39295bf3695a3/a5da5/browser.png 300w,\n/static/a061b86ded539904e8b39295bf3695a3/cadb4/browser.png 750w,\n/static/a061b86ded539904e8b39295bf3695a3/feb73/browser.png 1080w,\n/static/a061b86ded539904e8b39295bf3695a3/6032c/browser.png 1366w,\n/static/a061b86ded539904e8b39295bf3695a3/3d4b2/browser.png 1920w,\n/static/a061b86ded539904e8b39295bf3695a3/f635c/browser.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/a061b86ded539904e8b39295bf3695a3/29f5b/browser.webp 300w,\n/static/a061b86ded539904e8b39295bf3695a3/11ba1/browser.webp 750w,\n/static/a061b86ded539904e8b39295bf3695a3/089e1/browser.webp 1080w,\n/static/a061b86ded539904e8b39295bf3695a3/ad4fd/browser.webp 1366w,\n/static/a061b86ded539904e8b39295bf3695a3/d8a73/browser.webp 1920w,\n/static/a061b86ded539904e8b39295bf3695a3/a28c0/browser.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p>이번 포스트에서는 브라우저가 화면을 렌더링 하는 과정에 대해 이야기할 것입니다. 렌더링 과정을 이해하면 웹페이지의 렌더링 최적화에 도움이 될 수 있겠죠? 렌더링 최적화 방법은 <a href=\"/tech/browser/critical-rendering-path\">[Browser] Critical Rendering Path 최적화</a>에서 다룰 예정입니다.</p>\n<h2 id=\"브라우저-구조\" style=\"position:relative;\">브라우저 구조<a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"브라우저 구조 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>브라우저의 렌더링 과정을 이야기하기 전에 브라우저의 구조를 잠시 살펴보겠습니다.</p>\n<p><img src=\"/assets/img/posts/browser/browser_architecture.png\" alt=\"브라우저 구조\"></p>\n<ul>\n<li>User Interface: 주소 표시줄, 이전/다음 버튼, 북마크 메뉴 등. 요청한 페이지를 보여주는 창을 제외한 나머지 모든 부분</li>\n<li>Browser Engine: User Interface와 Rendering Engine 사이의 동작을 제어</li>\n<li>Rendering Engine: 요청한 콘텐츠를 표시, HTML을 요청하면 HTML과 CSS를 파싱 하여 화면에 표시함</li>\n<li>Networking: HTTP 요청과 같은 네트워크 호출에 사용됨</li>\n<li>Javascript Interpreter(또는 Engine): 자바스크립트 코드를 해석하고 실행함. 크롬에서는 <a href=\"/tech/javascript/javascript-runtime/#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%94%EC%A7%84-v8\">V8 엔진</a>을 사용함</li>\n<li>Display Backend: 기본적인 위젯(콤보 박스 등..)을 그림</li>\n<li>Data Persistence: Local Storage, 쿠키 등 클라이언트 사이드에서 데이터를 저장하는 영역</li>\n</ul>\n<p>구조는 브라우저마다 조금씩 다를 수 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">파이어폭스 브라우저</th>\n<th align=\"center\">크롬 브라우저</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><img src=\"/assets/img/posts/browser/firefox_architecture.png\" alt=\"파이어폭스 구조\"></td>\n<td align=\"center\"><img src=\"/assets/img/posts/browser/chrome_architecture.png\" alt=\"크롬 구조\"></td>\n</tr>\n</tbody>\n</table>\n<p>파이어폭스 브라우저와 크롬 브라우저의 구조는 위의 그림과 같이 차이가 있습니다. 이번 포스트에서는 브라우저의 구조에서 렌더링 엔진에 대해 이야기할 것입니다.</p>\n<h2 id=\"렌더링-엔진\" style=\"position:relative;\">렌더링 엔진<a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%97%94%EC%A7%84\" aria-label=\"렌더링 엔진 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>렌더링 엔진의 역할은 요청받은 내용을 브라우저 화면에 나타내는 일입니다. HTML, CSS, JavaScript 등의 파일을 브라우저가 화면에 표시할 수 있도록 변환하여 픽셀 단위로 나타냅니다.</p>\n<h3 id=\"렌더링-엔진들\" style=\"position:relative;\">렌더링 엔진들<a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%97%94%EC%A7%84%EB%93%A4\" aria-label=\"렌더링 엔진들 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>브라우저마다 사용하는 렌더링 엔진들이 다릅니다. 렌더링 엔진이 브라우저마다 다르기 때문에, 같은 소스가 브라우저마다 다르게 그려지는 크로스 브라우징 이슈가 발생하게 됩니다.(자바스크립트 엔진이 달라 발생하기도 합니다.)</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">브라우저</th>\n<th align=\"center\">렌더링 엔진</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">IE</td>\n<td align=\"center\">Trident</td>\n</tr>\n<tr>\n<td align=\"center\">Edge</td>\n<td align=\"center\">EdgeHTML, Blink</td>\n</tr>\n<tr>\n<td align=\"center\">Chrome</td>\n<td align=\"center\">Webkit, Blink(버전 28 이후)</td>\n</tr>\n<tr>\n<td align=\"center\">Safari</td>\n<td align=\"center\">Webkit</td>\n</tr>\n<tr>\n<td align=\"center\">FireFox</td>\n<td align=\"center\">Gecko</td>\n</tr>\n</tbody>\n</table>\n<p>크롬 브라우저(정확히는 크로미움은)는 사파리 브라우저에서 사용하는 Webkit을 사용하다가 버전 28 이후 Webkit 소스를 Fork 하여 Blink 엔진을 만들어 사용하고 있습니다.</p>\n<h4 id=\"참고-크로미움이란\" style=\"position:relative;\">참고: 크로미움이란?<a href=\"#%EC%B0%B8%EA%B3%A0-%ED%81%AC%EB%A1%9C%EB%AF%B8%EC%9B%80%EC%9D%B4%EB%9E%80\" aria-label=\"참고 크로미움이란 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>크롬은 크로미움 기반으로 만들어진 브라우저라는 이야기를 많이 들어보셨을 것입니다. <a href=\"https://ko.wikipedia.org/wiki/%ED%81%AC%EB%A1%9C%EB%AF%B8%EC%97%84_(%EC%9B%B9_%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80)\">크로미움</a>은 오픈 소스 웹 브라우저입니다. <a href=\"https://chromium.woolyss.com/download/ko/\">https://chromium.woolyss.com/download/ko/</a>에서 다운로드해 브라우저로 사용할 수도 있습니다.</p>\n<p>크로미움은 V8이라는 자바스크립트 엔진과 Blink라는 렌더링 엔진을 사용하는 브라우저입니다. 크롬이 크로미움 기반으로 만들어졌다는 것은 오픈 소스인 크로미움 브라우저 코드 위에 살을 덧붙여 개발되었다는 의미입니다.</p>\n<p>크로미움 기반의 크롬이 절반 이상 점유율을 차지하고 있습니다(<a href=\"https://www.koreahtml5.kr/front/stats/browser/browserUseStats.do\">브라우저 점유율</a> 참고). 이제는 Edge 브라우저도 크로미움 기반의 브라우저가 되었습니다. Edge 브라우저가 사용하던 EdgeHTML 렌더링 엔진을 포기하고 크로미움 기반의 브라우저를 만들겠다고 발표를 했습니다.(<a href=\"https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/\">Edge 브라우저의 크로미움 도입 발표</a> 참고)</p>\n<h3 id=\"동작-과정-요약\" style=\"position:relative;\">동작 과정 요약<a href=\"#%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95-%EC%9A%94%EC%95%BD\" aria-label=\"동작 과정 요약 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>렌더링 엔진은 요청한 문서의 내용을 얻는 것에서 시작합니다. 문서는 보통 8KB 단위로 전송됩니다.</p>\n<p><img src=\"/assets/img/posts/browser/rendering_engine_process_summary.png\" alt=\"렌더링 엔진 동작 과정 요약\"></p>\n<p>위의 그림은 렌더링 엔진의 기본 동작 과정을 나타낸 그림입니다.</p>\n<p>렌더링 엔진은 HTML 문서를 파싱 하여 DOM 트리를 만들고, CSS 문서를 파싱 하여 CSSOM 트리를 만듭니다. DOM과 CSSOM을 이용하여 렌더 트리를 만듭니다.</p>\n<p>렌더 트리 생성이 끝나면 Layout(Reflow라고도 합니다)이 시작됩니다. 이 과정은 각 노드가 화면의 정확한 위치에 표시하기 위해 위치와 크기를 계산하는 과정을 말합니다.  마지막으로 계산된 위치과 크기 등의 스타일들이 실제 픽셀로 표현하는 과정이 시작됩니다. 이 과정을 Paint(Rasterizing라고도 합니다.)라고 합니다.</p>\n<h3 id=\"동작-과정-상세\" style=\"position:relative;\">동작 과정 상세<a href=\"#%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95-%EC%83%81%EC%84%B8\" aria-label=\"동작 과정 상세 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><img src=\"/assets/img/posts/browser/webkit_rendering_engine_process.png\" alt=\"웹킷 렌더링 엔진 동작 과정\"></p>\n<p>위의 그림은 Webkit의 렌더링 동작 과정입니다. 위의 렌더링 동작 과정을 간략히 이야기하면,</p>\n<ol>\n<li><span style=\"background: #FFC000;\">HTML</span>을 <span style=\"background: #5B9BD5;\">파싱</span>하여 DOM 노드를 만듭니다. 이 <span style=\"background: #A5A5A5;\">DOM 노드들을 병합</span>하여 <span style=\"background: #70AD47;\">DOM 트리</span>를 만듭니다.</li>\n<li><span style=\"background: #FFC000;\">CSS</span>를 <span style=\"background: #5B9BD5;\">파싱</span>하여, <span style=\"background: #70AD47;\">스타일 규칙</span>을 만듭니다.</li>\n<li><span style=\"background: #70AD47;\">DOM 트리</span>와 <span style=\"background: #70AD47;\">스타일 규칙</span>을 사용하여, <span style=\"background: #5B9BD5;\">Attachment</span>라는 과정을 통해 <span style=\"background: #70AD47;\">Render 트리</span>를 생성합니다.</li>\n<li><span style=\"background: #70AD47;\">Render 트리</span>를 <span style=\"background: #5B9BD5;\">배치(Layout)</span>합니다.</li>\n<li><span style=\"background: #70AD47;\">Render 트리</span>를 화면에 <span style=\"background: #5B9BD5;\">그림(Painting)</span>니다.</li>\n</ol>\n<p>위의 5가지 과정을 통해 브라우저는 렌더링을 합니다. (색깔 별로 위의 그림의 과정을 표시했습니다.)</p>\n<p><img src=\"/assets/img/posts/browser/gecko_rendering_engine_process.png\" alt=\"게코 렌더링 엔진 동작 과정\"></p>\n<p>위의 그림은 Gecko의 렌더링 동작 과정입니다.</p>\n<p>Webkit과 Gecko는 용어가 약간 다르지만 렌더링 과정은 유사합니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Webkit</th>\n<th align=\"center\">Gecko</th>\n<th align=\"center\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Render Tree</td>\n<td align=\"center\">Frame Tree</td>\n<td align=\"center\">렌더링 되는 노드 트리</td>\n</tr>\n<tr>\n<td align=\"center\">Render Object</td>\n<td align=\"center\">Frame</td>\n<td align=\"center\">렌더링 되는 노드</td>\n</tr>\n<tr>\n<td align=\"center\">Layout</td>\n<td align=\"center\">Reflow</td>\n<td align=\"center\">렌더링 되는 노드를 배치하는 과정</td>\n</tr>\n<tr>\n<td align=\"center\">Attachment</td>\n<td align=\"center\">Frame Constructor</td>\n<td align=\"center\">렌더링 되는 노드 트리를 만드는 과정</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">Content Sink</td>\n<td align=\"center\">DOM 노드를 만드는 과정</td>\n</tr>\n</tbody>\n</table>\n<p>Webkit과 Gecko는 위의 표 정도의 차이를 가지고 있습니다.</p>\n<h2 id=\"parser\" style=\"position:relative;\">Parser<a href=\"#parser\" aria-label=\"parser permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>파싱은 서버로부터 전송받은 문서의 문자열을 브라우저가 이해할 수 있는 구조로 변환하는 과정을 파싱이라고 합니다. 파싱 결과는 문서 구조를 나타내는 노드 트리인데, 파싱 트리(parse tree) 또는 문법 트리(syntax tree)라고 합니다.</p>\n<h3 id=\"domdocumnet-object-model\" style=\"position:relative;\">DOM(Documnet Object Model)<a href=\"#domdocumnet-object-model\" aria-label=\"domdocumnet object model permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><img src=\"/assets/img/posts/browser/dom_parsing_summary.png\" alt=\"DOM 파싱 요약\"></p>\n<p>위의 그림은 <a href=\"/tech/browser/browser-rendering/#%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95-%EC%83%81%EC%84%B8\">동작 과정 상세</a>에서 이야기한 DOM을 파싱 하는 과정입니다. 이 과정에 대해 좀 더 자세히 이야기하도록 하겠습니다.</p>\n<p><img src=\"/assets/img/posts/browser/dom_parsing.png\" alt=\"DOM Parsing\"></p>\n<ol>\n<li>변환(Conversion): HTML의 원시 바이트(raw bytes)를 읽어와 해당 파일에 지정된 인코딩(UTF-8 등...)에 따라 문자열로 변환하는 과정입니다.</li>\n<li>토큰화(Tokenizing): 문자열을 <a href=\"http://www.w3.org/TR/html5/\">W3C HTML5 표준</a>에 따라 고유 토큰(<code class=\"language-text\">&lt;html></code>, <code class=\"language-text\">&lt;body></code>등, 꺽쇠괄호로 묶인 문자열)으로 변환합니다. 각 토큰은 특별한 의미와 고유한 규칙을 가집니다.</li>\n<li>렉싱(Lexing): 토큰을 해당 속성 및 규칙을 정의한 객체(Nodes)로 변환합니다.</li>\n<li>DOM 생성(Dom construction): HTML은 상위-하위 관계로 정의할 수 있어, 트리 구조로 나타낼 수 있습니다. 렉싱 과정을 거쳐 생성된 노드들을 트리 구조로 변환합니다.</li>\n</ol>\n<p><img src=\"/assets/img/posts/browser/dom_tree.png\" alt=\"DOM Tree\"></p>\n<p>위에서 이야기한 4가지 과정을 모두 거치면 위의 그림과 같은 트리 형태의 DOM이 만들어집니다. 브라우저는 이후 모든 페이지 처리를 이 DOM을 사용합니다.</p>\n<h3 id=\"cssomcss-object-model\" style=\"position:relative;\">CSSOM(CSS Object Model)<a href=\"#cssomcss-object-model\" aria-label=\"cssomcss object model permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><img src=\"/assets/img/posts/browser/css_parsing_summary.png\" alt=\"CSS 파싱 요약\"></p>\n<p>이번에는 위의 그림과 같이 CSS를 파싱 하는 부분을 이야기하도록 하겠습니다.</p>\n<p><img src=\"/assets/img/posts/browser/cssom_construction.png\" alt=\"CSSOM 생성\"></p>\n<p>위의 그림과 같이 DOM을 생성하는 과정 그대로 CSSOM을 생성합니다.</p>\n<p>브라우저는 DOM을 생성하는 동안 외부 CSS를 참조하는 <code class=\"language-text\">&lt;link></code> 태그를 만나게 되면 브라우저에 리소스를 요청합니다. CSS의 원시 바이트(raw bytes)가 문자열로 변환된 후 차례로 토큰과 노드로 변환되고 마지막으로 CSSOM(CSS Object Model)이라는 트리 구조를 만듭니다.</p>\n<p><img src=\"/assets/img/posts/browser/cssom_tree.png\" alt=\"CSSOM Tree\"></p>\n<p>CSSOM이 트리 구조를 가지는 이유는 하향식으로 규칙을 적용하기 때문입니다. 최종 스타일을 계산할 때 브라우저는 해당 노드에 적용 가능한 가장 일반적인 규칙으로 시작해 더 구체적인 규칙을 적용하는 방식입니다.</p>\n<p>위의 CSSOM 트리 그림을 보시면 하양식 규칙 적용을 좀 더 쉽게 이해할 수 있습니다. <code class=\"language-text\">body</code> 태그 내에 있는 <code class=\"language-text\">span</code> 태그 안에 포함된 텍스트의 크기는 16px이고 색상은 빨간색입니다. 하지만 <code class=\"language-text\">span</code> 태그가 <code class=\"language-text\">p</code> 태그의 하위인 경우 해당 콘텐츠는 표시되지 않습니다.</p>\n<h3 id=\"참고-javascript와-css\" style=\"position:relative;\">참고: JavaScript와 CSS<a href=\"#%EC%B0%B8%EA%B3%A0-javascript%EC%99%80-css\" aria-label=\"참고 javascript와 css permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>HTML과 CSS, 자바스크립트를 파싱 하여 렌더 트리를 형성하고 화면에 그리는 과정을 최적화하면 브라우저의 렌더링 속도를 높여 사용성을 개선할 수 있습니다. 자바스크립트와 CSS가 렌더링 과정에 어떤 영향을 미치는지 살펴보도록 하겠습니다.</p>\n<h4 id=\"javascript\" style=\"position:relative;\">JavaScript<a href=\"#javascript\" aria-label=\"javascript permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>자바스크립트는 파서 차단 리소스(parser blocking resource)입니다. 브라우저는 문서를 파싱 하다가 자바스크립트를 만나면 진행하던 파싱을 중지하고 자바스크립트 엔진에게 권한을 넘겨 자바스크립트를 파싱하고 실행합니다.</p>\n<p>자바스크립트가 실행되는 동안 문서의 파싱은 중단됩니다. 자바스크립트는 파싱을 중단시키기 때문에, 보통 자바스크립트를 <code class=\"language-text\">&lt;head></code> 태그가 아닌 <code class=\"language-text\">&lt;body></code> 태그가 닫히기 바로 전에 사용되도록 하는 것이 좋습니다.</p>\n<p><code class=\"language-text\">&lt;script></code> 태그에 <code class=\"language-text\">defer</code> 속성을 주면, 문서 파싱은 중단되지 않고 문서 파싱이 완료된 이후에 자바스크립트가 실행됩니다.\nHTML5에서 스크립트를 비동기(<code class=\"language-text\">async</code>)로 처리하는 속성이 추가되었습니다. 자바스크립트가 별도의 맥락에 의해 파싱 되고 실행된다.</p>\n<p><a href=\"/tech/browser/async-defer/\">[Browser] async와 defer</a>에서 <code class=\"language-text\">defer</code> 속성과 <code class=\"language-text\">async</code> 속성의 차이를 확인하실 수 있습니다.</p>\n<h4 id=\"css\" style=\"position:relative;\">CSS<a href=\"#css\" aria-label=\"css permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>CSS는 렌더링 차단 리소스(render blocking resource)입니다. CSS는 렌더링을 할 때 반드시 필요한 리소스이기 때문에 브라우저는 빠르게 CSS를 다운로드하는 것이 좋습니다. <code class=\"language-text\">&lt;head></code> 태그 안에서 정의하여 빠르게 리소스를 받을 수 있도록 해야 합니다.</p>\n<p>CSS는 DOM 트리를 변경하지 않기 때문에 문서 파싱을 기다리거나 중단할 이유가 없습니다. 그러나 자바스크립트에서 스타일 정보를 요청하는 경우, CSS가 파싱 되지 않은 상태라면 스크립트 에러가 발생할 수 있습니다.</p>\n<p>이런 문제를 해결하기 위해 파이어폭스는 로드 중이거나 파싱 중인 CSS가 있는 경우 모든 자바스크립트 실행을 중지합니다. 반면 웹킷은 로드되지 않은 CSS 가운데 문제가 될 만한 속성이 있을 때에만 자바스크립트를 중단합니다.</p>\n<h2 id=\"attachment\" style=\"position:relative;\">Attachment<a href=\"#attachment\" aria-label=\"attachment permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>CSSOM 트리와 DOM 트리를 결합하여, 표시해야 할 순서로 내용을 그려낼 수 있도록 하기 위해 렌더 트리를 형성합니다. 이 과정을 웹킷에서는 Attachment라고 합니다. 렌더 트리는 화면에 표시되는 각 노드의 위치를 계산하는 레이아웃에 사용되고 픽셀을 화면에 그리는 페인트 과정에도 사용됩니다.</p>\n<h3 id=\"렌더-트리-구축\" style=\"position:relative;\">렌더 트리 구축<a href=\"#%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%B6%95\" aria-label=\"렌더 트리 구축 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><img src=\"/assets/img/posts/browser/attachment_summary.png\" alt=\"Attachment 요약\"></p>\n<p>위의 그림의 attachment 과정을 이야기하도록 하겠습니다. 브라우저가 DOM 및 CSSOM을 렌더 트리에 결합합니다. 렌더 트리는 페이지에 표시되는 모든 DOM 콘텐츠와 각 노드에 대한 모든 CSSOM 스타일 정보를 가집니다.</p>\n<p><img src=\"/assets/img/posts/browser/render_tree_construction.png\" alt=\"Render Tree 형성\"></p>\n<p>렌더 트리를 생성하려면 브라우저는 대략 3가지 작업을 수행합니다.</p>\n<ol>\n<li>DOM 트리의 루트에서 시작하여 화면에 표시되는 노드 각각을 탐색합니다.</li>\n</ol>\n<ul>\n<li>화면에 표시되지 않는 일부 노드들(<code class=\"language-text\">script</code>, <code class=\"language-text\">meta</code> 태그 등..)은 렌더 트리에 반영되지 않습니다.</li>\n<li>CSS에 의해 화면에서 숨겨지는 노드들은 렌더 트리에 반영되지 않습니다. 위의 예시에서 <code class=\"language-text\">span</code> 노드의 경우 <code class=\"language-text\">display:none</code>이 설정되기 때문에 렌더 트리에 반영되지 않습니다.</li>\n</ul>\n<ol start=\"2\">\n<li>화면에 표시되는 각 노드에 대해 적절하게 일치하는 CSSOM 규칙을 찾아 적용합니다.</li>\n<li>화면에 표시되는 노드를 콘텐츠 및 계산된 스타일과 함께 내보냅니다.</li>\n</ol>\n<h3 id=\"dom-트리와-렌더-트리의-관계\" style=\"position:relative;\">DOM 트리와 렌더 트리의 관계<a href=\"#dom-%ED%8A%B8%EB%A6%AC%EC%99%80-%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"dom 트리와 렌더 트리의 관계 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>렌더 트리 구축의 1번에서 잠깐 이야기 한 것처럼 화면에 표시되지 않는 노드들은 렌더 트리에 포함되지 않습니다. 예를 들어, <code class=\"language-text\">&lt;head></code> 태그와 같은 비시각적 DOM 노드는 렌더 트리에 추가되지 않습니다.</p>\n<p>뿐만 아니라 CSS로 인해 <code class=\"language-text\">display</code> 속성에 <code class=\"language-text\">none</code> 값이 할당된 노드들을 렌더 트리에 추가되지 않습니다. 하지만, <code class=\"language-text\">visibility:hidden</code>은 렌더 트리에 포함됩니다. <code class=\"language-text\">visibility</code> 속성에 <code class=\"language-text\">hidden</code> 값이 할당된 노드는 화면에 공간을 차지하기 때문에 렌더 트리에 포함됩니다.</p>\n<h2 id=\"layout\" style=\"position:relative;\">Layout<a href=\"#layout\" aria-label=\"layout permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><img src=\"/assets/img/posts/browser/layout_summary.png\" alt=\"Layout 요약\"></p>\n<p>렌더 트리가 생성되고, 기기의 뷰포트 내에서 렌더 트리의 노드가 정확한 위치와 크기를 계산하는 과정을 Layout(혹은 Reflow)라고 합니다. 모든 상대적인 측정값은 화면에서 절대적인 픽셀로 변환됩니다. 즉 CSS에 상대적인 값인 %로 할당된 값들은 절대적인 값은 px 단위로 변환 됩니다.</p>\n<h2 id=\"painting\" style=\"position:relative;\">Painting<a href=\"#painting\" aria-label=\"painting permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><img src=\"/assets/img/posts/browser/painting_summary.png\" alt=\"Painting 요약\"></p>\n<p>렌더 트리의 각 노드를 화면의 실제 픽셀로 나타내는 과정을 Painting(혹은 rasterizing)라고 합니다. Painting 과정 후 브라우저 화면에 UI가 나타나게 됩니다.</p>\n<h2 id=\"요약\" style=\"position:relative;\">요약<a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>지금까지 이야기했던 내용들을 핵심만 요약하여 5가지로 정리해 보면,</p>\n<ol>\n<li>HTML 마크업을 처리하고 DOM 트리를 빌드 합니다. (DOM 파싱)</li>\n<li>CSS 마크업을 처리하고 CSSOM 트리를 빌드 합니다. (CSS 파싱)</li>\n<li>DOM 및 CSSOM을 결합하여 렌더 트리를 형성합니다. (Attachment)</li>\n<li>렌더 트리에서 레이아웃을 실행하여 각 노드의 기하학적 형태를 계산합니다. (Layout)</li>\n<li>개별 노드를 화면에 페인트 합니다. (Painting)</li>\n</ol>\n<p>위의 5단계를 걸쳐 브라우저는 화면에 렌더링 하게 됩니다.</p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path?hl=ko\">https://developers.google.com/web/fundamentals/performance/critical-rendering-path?hl=ko</a></li>\n<li><a href=\"https://janghanboram.github.io/2018/06/06/browser-rendering/\">https://janghanboram.github.io/2018/06/06/browser-rendering/</a></li>\n<li><a href=\"https://d2.naver.com/helloworld/59361\">https://d2.naver.com/helloworld/59361</a></li>\n<li><a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm#Render_tree_construction\">http://taligarsiel.com/Projects/howbrowserswork1.htm#Render_tree_construction</a></li>\n<li><a href=\"https://grosskurth.ca/papers/browser-refarch.pdf\">https://grosskurth.ca/papers/browser-refarch.pdf</a></li>\n<li><a href=\"https://yilpe93.github.io/2018/06/18/etc/web-browser/\">https://yilpe93.github.io/2018/06/18/etc/web-browser/</a></li>\n<li><a href=\"https://sangbui.com/sb-files/BrowserArchitecture_ClientSide.pdf\">https://sangbui.com/sb-files/BrowserArchitecture_ClientSide.pdf</a></li>\n<li><a href=\"https://medium.com/@monica1109/how-does-web-browsers-work-c95ad628a509\">https://medium.com/@monica1109/how-does-web-browsers-work-c95ad628a509</a></li>\n<li><a href=\"https://blog.lgcns.com/1911\">https://blog.lgcns.com/1911</a></li>\n<li><a href=\"https://cisctbd.github.io/Report.pdf\">https://cisctbd.github.io/Report.pdf</a></li>\n<li><a href=\"https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/\">https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EA%B5%AC%EC%A1%B0\">브라우저 구조</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%97%94%EC%A7%84\">렌더링 엔진</a></p>\n<ul>\n<li><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%97%94%EC%A7%84%EB%93%A4\">렌더링 엔진들</a></li>\n<li><a href=\"#%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95-%EC%9A%94%EC%95%BD\">동작 과정 요약</a></li>\n<li><a href=\"#%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95-%EC%83%81%EC%84%B8\">동작 과정 상세</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#parser\">Parser</a></p>\n<ul>\n<li><a href=\"#domdocumnet-object-model\">DOM(Documnet Object Model)</a></li>\n<li><a href=\"#cssomcss-object-model\">CSSOM(CSS Object Model)</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0-javascript%EC%99%80-css\">참고: JavaScript와 CSS</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#attachment\">Attachment</a></p>\n<ul>\n<li><a href=\"#%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%B6%95\">렌더 트리 구축</a></li>\n<li><a href=\"#dom-%ED%8A%B8%EB%A6%AC%EC%99%80-%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EA%B4%80%EA%B3%84\">DOM 트리와 렌더 트리의 관계</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#layout\">Layout</a></p>\n</li>\n<li>\n<p><a href=\"#painting\">Painting</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></p>\n</li>\n</ul>","timeToRead":10,"excerpt":"이번 포스트에서는 브라우저가 화면을 렌더링 하는 과정에 대해 이야기할 것입니다. 렌더링 과정을 이해하면 웹페이지의 렌더링 최적화에 도움이 될 수 있겠죠? 렌더링 최적화 방법은 [Browser] Critical Rendering Path…","frontmatter":{"title":"[Browser] 브라우저 렌더링","thumbnail":"browser/browser.png","summary":"브라우저가 화면을 렌더링 하는 과정에 대해 이야기할 것입니다."},"fields":{"createdDate":"2019-10-16"}}},"pageContext":{"slug":"/tech/browser/browser-rendering/","image":"browser/browser.png","next":{"frontmatter":{"title":"[Browser] Critical Rendering Path 최적화"},"fields":{"slug":"/tech/browser/critical-rendering-path/"}},"previous":{"frontmatter":{"title":"[JavaScript] 자바스크립트 런타임"},"fields":{"slug":"/tech/javascript/javascript-runtime/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}