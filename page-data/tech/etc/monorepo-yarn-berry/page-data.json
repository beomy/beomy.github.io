{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/etc/monorepo-yarn-berry/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/dd214e6c1aab7e34210b9f0644856a40/f635c/monorepo.png","srcSet":"/static/dd214e6c1aab7e34210b9f0644856a40/a5da5/monorepo.png 300w,\n/static/dd214e6c1aab7e34210b9f0644856a40/cadb4/monorepo.png 750w,\n/static/dd214e6c1aab7e34210b9f0644856a40/feb73/monorepo.png 1080w,\n/static/dd214e6c1aab7e34210b9f0644856a40/6032c/monorepo.png 1366w,\n/static/dd214e6c1aab7e34210b9f0644856a40/3d4b2/monorepo.png 1920w,\n/static/dd214e6c1aab7e34210b9f0644856a40/f635c/monorepo.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/dd214e6c1aab7e34210b9f0644856a40/29f5b/monorepo.webp 300w,\n/static/dd214e6c1aab7e34210b9f0644856a40/11ba1/monorepo.webp 750w,\n/static/dd214e6c1aab7e34210b9f0644856a40/089e1/monorepo.webp 1080w,\n/static/dd214e6c1aab7e34210b9f0644856a40/ad4fd/monorepo.webp 1366w,\n/static/dd214e6c1aab7e34210b9f0644856a40/d8a73/monorepo.webp 1920w,\n/static/dd214e6c1aab7e34210b9f0644856a40/a28c0/monorepo.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p>이번 포스트에서는 <code class=\"language-text\">Yarn Berry</code>를 사용하여 모노레포를 구성해 보도록 하겠습니다. 이번에 구성할 모노레포는 Emotion와 React, TypeScript를 사용한 서비스 프로젝트와 디자인 시스템 프로젝트입니다. 이전 포스트 <a href=\"/tech/etc/monorepo-concept/\">[ETC] Monorepo - 개념</a>과 <a href=\"/tech/etc/yarn-berry/\">[ETC] Yarn Berry</a>, <a href=\"/tech/etc/package-json/\">[ETC] package.json 톺아보기</a>는 이번 포스트를 이해하는데 도움을 줄 수 있습니다.</p>\n<p>이번 포스트에서 생성한 모노레포는 <a href=\"https://github.com/beomy/monorepo-yarn-berry\">monorepo-yarn-berry</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"프로젝트-생성하기\" style=\"position:relative;\">프로젝트 생성하기<a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"프로젝트 생성하기 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>현재 Node LTS 버전인 18버전을 사용하여 <code class=\"language-text\">Yarn Berry</code> 모노레포를 만들어보도록 하겠습니다. 제가 사용하는 Node 버전은 18.12.0입니다.</p>\n<p><img src=\"/assets/img/posts/etc/node_version.png\" alt=\"노드 버전\"></p>\n<p>먼저 아래 명령어로 <code class=\"language-text\">Yarn</code>을 전역으로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -g <span class=\"token function\">yarn</span></code></pre></div>\n<p><code class=\"language-text\">Yarn Berry</code> 프로젝트는 아래 명령어로 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> init -2</code></pre></div>\n<p><img src=\"/assets/img/posts/etc/create_yarn_berry_project.png\" alt=\"Yarn Berry 프로젝트 만들기\"></p>\n<p>명령어를 실행하면 위의 그림과 같이 <code class=\"language-text\">Yarn Berry</code> 프로젝트가 생성됩니다.</p>\n<blockquote>\n<h5 id=\"yarn-classic에서-yarn-berry로-마이그레이션-하기\" style=\"position:relative;\"><code class=\"language-text\">Yarn Classic</code>에서 <code class=\"language-text\">Yarn Berry</code>로 마이그레이션 하기<a href=\"#yarn-classic%EC%97%90%EC%84%9C-yarn-berry%EB%A1%9C-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%ED%95%98%EA%B8%B0\" aria-label=\"yarn classic에서 yarn berry로 마이그레이션 하기 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><code class=\"language-text\">Yarn Classic</code>으로 만들어진 프로젝트를 <code class=\"language-text\">Yarn Berry</code>로 업데이트 하고 싶다면, <code class=\"language-text\">Yarn Classic</code> 프로젝트에서 아래 명령어를 실행하면 <code class=\"language-text\">Yarn Berry</code> stable 버전으로 업데이트 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token builtin class-name\">set</span> version stable</code></pre></div>\n</blockquote>\n<h3 id=\"yarn-workspace-설정하기\" style=\"position:relative;\">yarn workspace 설정하기<a href=\"#yarn-workspace-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"yarn workspace 설정하기 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>워크스페이스(workspace)란 모노레포의 하위 프로젝트를 말합니다. 아래 코드와 같이 <code class=\"language-text\">package.json</code>의 <code class=\"language-text\">workspaces</code>에 워크스페이스가 어느 경로에 있는지 작성해 줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>위의 코드는 <code class=\"language-text\">packages</code> 디렉토리 하위에 모든 워크스페이스가 있다는 것을 이야기합니다.</p>\n<h2 id=\"vscode-설정하기\" style=\"position:relative;\">VSCode 설정하기<a href=\"#vscode-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"vscode 설정하기 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>이번 포스트는 VSCode를 사용하여 모노레포 프로젝트를 생성합니다. 다른 IDE를 사용하고 계신다면 이 부분은 넘기서도 무방합니다. VSCode를 사용한다면 아래 목록의 순서대로 진행합니다.</p>\n<ol>\n<li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=arcanis.vscode-zipfs\">ZipFS</a> VSCode 확장 프로그램 설치하기</strong>: <code class=\"language-text\">Yarn Berry</code>는 Zip 형태로 의존성을 관리하기 때문에 Zip 파일을 읽기 위한 확장 프로그램이 필요합니다.</li>\n<li><strong>TypeScript 설치하기</strong>: TypeScript를 사용하기 위해 모노레포 프로젝트 루트에 <code class=\"language-text\">yarn add -D typescript</code> 명령어를 사용하여 TypeScript를 설치 해 줍니다.</li>\n<li><strong>yarn sdk 설치</strong>: VSCode에서 <code class=\"language-text\">Yarn Berry</code>를 사용하기 위해서는 yarn의 vscode sdk가 필요한데, <code class=\"language-text\">yarn dlx @yarnpkg/sdks vscode</code> 명령어를 사용하여 설치합니다.</li>\n<li><strong>TypeScript 허용</strong>\nyarn sdk 설치가 끝나면, 아래 그림과 같은 팝업이 뜨는데, <code class=\"language-text\">Allow</code>를 클릭하여 TypeScript 사용을 허용해 줍니다.\n<img src=\"/assets/img/posts/etc/typescript_allow_1.png\" alt=\"TypeScript 허용\">\n만약 위의 팝업이 뜨지 않거나 <code class=\"language-text\">Dismiss</code> 클릭하는 등으로 TypeScript 사용 허용을 해주지 못했다면, 아래 그림과 같이 <code class=\"language-text\">Command Pallette</code>(Cmd(Crtl) + Shift + P) -> <code class=\"language-text\">TypeScript: Select TypeScript Version...</code> -> <code class=\"language-text\">Use Workspace Version</code>를 클릭해 줍니다.\n<img src=\"/assets/img/posts/etc/typescript_allow_2.png\" alt=\"TypeScript 허용\"></li>\n</ol>\n<h2 id=\"하위-프로젝트-만들기\" style=\"position:relative;\">하위 프로젝트 만들기<a href=\"#%ED%95%98%EC%9C%84-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"하위 프로젝트 만들기 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Emotion과 React, TypeScript를 사용하는 디자인 시스템 프로젝트와 서비스 프로젝트를 만들고, 서비스 프로젝트에서 디자인 시스템 프로젝트의 디자인 컴포넌트를 가져와 사용하는 프로젝트를 만들어 보겠습니다.</p>\n<h3 id=\"디자인-시스템-프로젝트\" style=\"position:relative;\">디자인 시스템 프로젝트<a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"디자인 시스템 프로젝트 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>먼저 Emotion, React, TypeScript를 사용하는 디자인 시스템 프로젝트를 만들어보겠습니다.</p>\n<h4 id=\"packagejson-생성\" style=\"position:relative;\"><code class=\"language-text\">package.json</code> 생성<a href=\"#packagejson-%EC%83%9D%EC%84%B1\" aria-label=\"packagejson 생성 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">packages/design-system</code> 디렉토리를 생성하고 아래와 같이 간단한 <code class=\"language-text\">package.json</code>을 작성 후 필요한 패키지를 설치하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@monorepo/design-system\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"패키지-설치\" style=\"position:relative;\">패키지 설치<a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">package.json</code>을 위에 코드와 같이 작성한 후, 아래 코드를 실행하여 필요한 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> workspace @monorepo/design-system <span class=\"token function\">add</span> -D typescript react react-dom @emotion/react @emotion/styled @types/react @types/react-dom</code></pre></div>\n<blockquote>\n<h5 id=\"yarn-workspace-명령어\" style=\"position:relative;\"><code class=\"language-text\">yarn workspace</code> 명령어<a href=\"#yarn-workspace-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"yarn workspace 명령어 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><code class=\"language-text\">yarn workspace &lt;workspaceName> &lt;commandName></code> 형태로 특정 워크스페이스의 스크립트를 실행할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">yarn workspace @monorepo/design-system add -D typescript</code>: <code class=\"language-text\">@monorepo/design-system</code> 프로젝트에 개발자 의존성을 가진 TypeScript를 설치하는 명령어입니다.</li>\n<li><code class=\"language-text\">yarn workspace @monorepo/design-system run test</code>: <code class=\"language-text\">@monorepo/design-system</code> 프로젝트의 <code class=\"language-text\">test</code> 스크립트(<code class=\"language-text\">package.json</code>에 <code class=\"language-text\">scripts</code>의 기록된...)를 실행하는 명령어입니다.</li>\n</ul>\n</blockquote>\n<h4 id=\"peerdependencies-설정\" style=\"position:relative;\"><code class=\"language-text\">peerDependencies</code> 설정<a href=\"#peerdependencies-%EC%84%A4%EC%A0%95\" aria-label=\"peerdependencies 설정 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>아래 코드와 같이 <code class=\"language-text\">package.json</code>의 <code class=\"language-text\">peerDependencies</code>를 설정해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"peerDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@emotion/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"11.x\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@emotion/styled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"11.x\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"18.x\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"18.x\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>디자인 시스템에서 사용하는 Emotion과 React는 디자인 시스템을 사용하는 쪽에서 제공해 줘야 하는 의존 패키기이기 때문에 <code class=\"language-text\">peerDependencies</code>에 정의 되어야 합니다. 만약 Emotion과 React가 <code class=\"language-text\">peerDependencies</code>로 정의되어 있지 않다면, 디자인 시스템과 서비스 프로젝트에서 각각 Emotion과 React 패키지가 존재하게 되어, Emotion의 Theme 등을 공유해서 사용할 수 없게 됩니다.</p>\n<h4 id=\"디자인-컴포넌트-작성\" style=\"position:relative;\">디자인 컴포넌트 작성<a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-label=\"디자인 컴포넌트 작성 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>간단한 버튼 디자인 컴포넌트를 아래와 같이 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// packages/design-system/src/Button.tsx</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> ReactNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> ReactNode\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> StyledButton <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background-color: transparent;\n  padding: 10px;\n  border: 1px solid #777;\n  border-radius: 5px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ButtonProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyledButton</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button</code></pre></div>\n<h4 id=\"디자인-컴포넌트-exports\" style=\"position:relative;\">디자인 컴포넌트 exports<a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-exports\" aria-label=\"디자인 컴포넌트 exports permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>작성한 디자인 컴포넌트를 다른 프로젝트에서 사용할 수 있도록 아래와 같이 exports 설정을 추가하도록 하겠습니다. 먼저 아래 코드와 같이 <code class=\"language-text\">index.ts</code>를 만들고 내보낼 컴포넌트를 작성해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// packages/design-system/src/index.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Button'</span></code></pre></div>\n<p>그 다음 <code class=\"language-text\">package.json</code>에 아래 코드와 같이 <code class=\"language-text\">main</code>과 <code class=\"language-text\">exports</code>를 작성하여 외부 프로젝트에서 사용할 수 있도록 내보내줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/index.ts\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"exports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\".\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/index.ts\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3 id=\"서비스-프로젝트\" style=\"position:relative;\">서비스 프로젝트<a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"서비스 프로젝트 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>작성한 디자인 시스템, Emotion, React, TypeScript를 사용하는 서비스 프로젝트를 만들어 보겠습니다.</p>\n<h4 id=\"프로젝트-생성\" style=\"position:relative;\">프로젝트 생성<a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"프로젝트 생성 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">create-react-app</code>을 사용하여 리엑트 프로젝트를 만들도록 하겠습니다. 아래 명령어를 차례로 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> create react-app packages/service --template typescript\n<span class=\"token function\">rm</span> -rf node_modules package-lock.json</code></pre></div>\n<p>위의 명령어로 프로젝트 생성시 NPM으로 패키지가 설치되기 때문에 <code class=\"language-text\">node_modules</code>와 <code class=\"language-text\">package-lock.json</code>을 제거해줍니다.</p>\n<h4 id=\"프로젝트-이름-변경\" style=\"position:relative;\">프로젝트 이름 변경<a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD\" aria-label=\"프로젝트 이름 변경 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>아래 코드와 같이 <code class=\"language-text\">packages/service/package.json</code>의 <code class=\"language-text\">name</code> 필드를 모노레포 네임스페이스로 변경해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@monorepo/service\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h4 id=\"패키지-설치-1\" style=\"position:relative;\">패키지 설치<a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98-1\" aria-label=\"패키지 설치 1 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>아래 코드를 차례로 실행하여 필요한 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> workspace @monorepo/service <span class=\"token function\">add</span> @monorepo/design-system @emotion/react @emotion/styled craco\n<span class=\"token function\">yarn</span> workspace @monorepo/service <span class=\"token function\">add</span> -D @emotion/babel-plugin @craco/craco @craco/types</code></pre></div>\n<h4 id=\"craco-설정\" style=\"position:relative;\">craco 설정<a href=\"#craco-%EC%84%A4%EC%A0%95\" aria-label=\"craco 설정 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>다른 워크스페이스의 코드를 가져와 사용하기 위해서는 webpack 설정을 추가해 주어야 하는데, craco를 사용해서 webpack 설정을 확장해 보도록 하겠습니다. 아래 코드처럼 <code class=\"language-text\">craco.config.ts</code>를 작성하여, Emotion 바벨 플러그인과 webpack의 babel-loader를 확장해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// packages/service/craco.config.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getLoader<span class=\"token punctuation\">,</span> loaderByName <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@craco/craco'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CracoConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@craco/types'</span>\n\n<span class=\"token keyword\">const</span> cracoConfig<span class=\"token operator\">:</span> CracoConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  babel<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@emotion'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  webpack<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">configure</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>webpackConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isFound<span class=\"token punctuation\">,</span> match <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getLoader</span><span class=\"token punctuation\">(</span>webpackConfig<span class=\"token punctuation\">,</span> <span class=\"token function\">loaderByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        match<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>include <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n        match<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>exclude <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> webpackConfig\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> cracoConfig</code></pre></div>\n<p>babel-loader의 <code class=\"language-text\">include</code> 필드를 <code class=\"language-text\">undefined</code>로 재정의 해주어야, 다른 워크스페이스의 코드를 가져와 사용할 수 있게 됩니다. <code class=\"language-text\">package.json</code>의 <code class=\"language-text\">scripts</code> 필드에서 사용했던 <code class=\"language-text\">react-script</code>를 아래 코드와 같이 <code class=\"language-text\">craco</code>로 변경해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"craco start\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"craco build\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"craco test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"craco eject\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h4 id=\"디자인-컴포넌트-사용\" style=\"position:relative;\">디자인 컴포넌트 사용<a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%82%AC%EC%9A%A9\" aria-label=\"디자인 컴포넌트 사용 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>아래 코드와 같이 작성했던 디자인 컴포넌트를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// packages/service/src/App.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@monorepo/design-system'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">TEST</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">yarn workspace @monorepo/service start</code> 명령어를 실행하여 결과물을 확인할 수 있습니다.</p>\n<h2 id=\"부록\" style=\"position:relative;\">부록<a href=\"#%EB%B6%80%EB%A1%9D\" aria-label=\"부록 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"스크립트-타이핑-최소화\" style=\"position:relative;\">스크립트 타이핑 최소화<a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%83%80%EC%9D%B4%ED%95%91-%EC%B5%9C%EC%86%8C%ED%99%94\" aria-label=\"스크립트 타이핑 최소화 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>모노레포의 워크스페이스의 스크립트를 실행하기 위해 매번 <code class=\"language-text\">yarn workspace @monorepo/design-system</code>을 타이핑하는 것은 너무 장황할 수 있습니다. 이런 타이핑 양을 줄이기 위해 아래 코드와 같이 <code class=\"language-text\">package.json</code>의 <code class=\"language-text\">scripts</code> 필드를 작성하면 작성해야 할 커맨드 라인이 줄일 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"ds\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn workspace @monorepo/design-system\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"service\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn workspace @monorepo/service\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드와 같이 작성하면 <code class=\"language-text\">yarn ds add react</code>의 명령어가 <code class=\"language-text\">yarn workspace @monorepo/design-system add react</code>와 동일하게 동작하게 됩니다. <code class=\"language-text\">yarn service add react</code>는 <code class=\"language-text\">yarn workspace @monorepo/service add react</code>와 동일합니다.</p>\n<h3 id=\"yarn-berry-플러그인\" style=\"position:relative;\"><code class=\"language-text\">Yarn Berry</code> 플러그인<a href=\"#yarn-berry-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\" aria-label=\"yarn berry 플러그인 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Yarn Berry</code>는 패키지를 편리하게 관리할 수 있게 도와주는 플러그인들을 제공합니다. <a href=\"https://yarnpkg.com/features/plugins\">Yarn Berry Plugins</a>에서 제공하는 플러그인들을 확인할 수 있습니다.</p>\n<p>대표적으로, <code class=\"language-text\">yarn plugin import workspace-tools</code> 명령어로 <code class=\"language-text\">workspace-tools</code>를 설치하면 <code class=\"language-text\">yarn workspaces foreach &lt;commandName></code> 명령어를 사용할 수 있게 됩니다. 이 명령어는 아래 그림과 같이 모든 워크스페이스의 스크립트를 실행합니다.</p>\n<p><img src=\"/assets/img/posts/etc/yarn_workspaces.gif\" alt=\"yarn workspaces\"></p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://yarnpkg.com/getting-started/editor-sdks#vscode\">https://yarnpkg.com/getting-started/editor-sdks#vscode</a></li>\n<li><a href=\"https://elvanov.com/2664\">https://elvanov.com/2664</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">프로젝트 생성하기</a></p>\n<ul>\n<li><a href=\"#yarn-workspace-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">yarn workspace 설정하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#vscode-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">VSCode 설정하기</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%98%EC%9C%84-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\">하위 프로젝트 만들기</a></p>\n<ul>\n<li><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\">디자인 시스템 프로젝트</a></li>\n<li><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\">서비스 프로젝트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B6%80%EB%A1%9D\">부록</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%83%80%EC%9D%B4%ED%95%91-%EC%B5%9C%EC%86%8C%ED%99%94\">스크립트 타이핑 최소화</a></li>\n<li><a href=\"#yarn-berry-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\"><code class=\"language-text\">Yarn Berry</code> 플러그인</a></li>\n</ul>\n</li>\n</ul>","timeToRead":9,"excerpt":"이번 포스트에서는 를 사용하여 모노레포를 구성해 보도록 하겠습니다. 이번에 구성할 모노레포는 Emotion와 React, TypeScript를 사용한 서비스 프로젝트와 디자인 시스템 프로젝트입니다. 이전 포스트 [ETC] Monorepo…","frontmatter":{"title":"[ETC] Monorepo - Yarn Berry","thumbnail":"etc/monorepo.png","summary":"이번 포스트에서는 Yarn Berry를 사용하여 모노레포를 구성해 보도록 하겠습니다. 이번에 구성할 모노레포는 Emotion와 React, TypeScript를 사용한 서비스 프로젝트와 디자인 시스템 프로젝트입니다."},"fields":{"createdDate":"2023-02-15"}}},"pageContext":{"slug":"/tech/etc/monorepo-yarn-berry/","image":"etc/monorepo.png","next":{"frontmatter":{"title":"[React] TanStack Query v4 (React Query)"},"fields":{"slug":"/tech/react/tanstack-query-v4/"}},"previous":{"frontmatter":{"title":"[ETC] Monorepo - 개념"},"fields":{"slug":"/tech/etc/monorepo-concept/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}