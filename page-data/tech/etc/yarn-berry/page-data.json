{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/etc/yarn-berry/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/0ece3df65186856cc539d9190ef2d96e/f635c/yarn_berry.png","srcSet":"/static/0ece3df65186856cc539d9190ef2d96e/a5da5/yarn_berry.png 300w,\n/static/0ece3df65186856cc539d9190ef2d96e/cadb4/yarn_berry.png 750w,\n/static/0ece3df65186856cc539d9190ef2d96e/feb73/yarn_berry.png 1080w,\n/static/0ece3df65186856cc539d9190ef2d96e/6032c/yarn_berry.png 1366w,\n/static/0ece3df65186856cc539d9190ef2d96e/3d4b2/yarn_berry.png 1920w,\n/static/0ece3df65186856cc539d9190ef2d96e/f635c/yarn_berry.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/0ece3df65186856cc539d9190ef2d96e/29f5b/yarn_berry.webp 300w,\n/static/0ece3df65186856cc539d9190ef2d96e/11ba1/yarn_berry.webp 750w,\n/static/0ece3df65186856cc539d9190ef2d96e/089e1/yarn_berry.webp 1080w,\n/static/0ece3df65186856cc539d9190ef2d96e/ad4fd/yarn_berry.webp 1366w,\n/static/0ece3df65186856cc539d9190ef2d96e/d8a73/yarn_berry.webp 1920w,\n/static/0ece3df65186856cc539d9190ef2d96e/a28c0/yarn_berry.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p><code class=\"language-text\">Yarn</code>은 <code class=\"language-text\">NPM</code>과 같은 Node Package Manager입니다. <code class=\"language-text\">Yarn</code>의 1 버전을 <code class=\"language-text\">Yarn Classic</code>이라고 하고 <code class=\"language-text\">Yarn</code>의 2 버전 이상을 <code class=\"language-text\">Yarn Berry</code>라고 합니다.</p>\n<h2 id=\"yarn-classic\" style=\"position:relative;\"><code class=\"language-text\">Yarn Classic</code><a href=\"#yarn-classic\" aria-label=\"yarn classic permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">Yarn</code>의 1 버전을 <code class=\"language-text\">Yarn Classic</code> 이라고 합니다. <a href=\"https://github.com/yarnpkg/yarn\">Yarn Classic 저장소</a>에 프로젝트 설명을 보면, 1.x 버전의 유지보수를 중단하고 새로운 기능이나 버그 픽스는 <code class=\"language-text\">Yarn Berry</code>에서 이루어 진다고 명시되어 있습니다.</p>\n<p><img src=\"/assets/img/posts/etc/yarn_classic_frozen.png\" alt=\"동결된 Yarn Classic\"></p>\n<h3 id=\"yarn-classic의-문제점\" style=\"position:relative;\"><code class=\"language-text\">Yarn Classic</code>의 문제점<a href=\"#yarn-classic%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"yarn classic의 문제점 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Yarn Classic</code>은 <code class=\"language-text\">NPM</code>과 동일하게 <code class=\"language-text\">node_modules</code> 디렉토리를 이용하여 의존성을 관리합니다. <code class=\"language-text\">node_modules</code>를 이용한 의존성 관리는 아래와 같은 3가지 문제점이 있습니다.</p>\n<h4 id=\"의존성-탐색-알고리즘의-비효율\" style=\"position:relative;\">의존성 탐색 알고리즘의 비효율<a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%83%90%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%B9%84%ED%9A%A8%EC%9C%A8\" aria-label=\"의존성 탐색 알고리즘의 비효율 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>패키지를 찾기 위해서 아래 그림과 같이 <code class=\"language-text\">node_modules</code> 디렉토리를 탐색합니다. 이 때 <code class=\"language-text\">node_modules</code> 디렉토리를 읽기 위해 메모리 I/O를 반복하게 됩니다.</p>\n<p><img src=\"/assets/img/posts/etc/node_modules_search.png\" alt=\"node_modules 검색 과정\"></p>\n<h4 id=\"큰-저장-공간과-설치-시간\" style=\"position:relative;\">큰 저장 공간과 설치 시간<a href=\"#%ED%81%B0-%EC%A0%80%EC%9E%A5-%EA%B3%B5%EA%B0%84%EA%B3%BC-%EC%84%A4%EC%B9%98-%EC%8B%9C%EA%B0%84\" aria-label=\"큰 저장 공간과 설치 시간 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">node_modules</code> 디렉토리에는 사용되는 모든 의존성 패키지들이 설치되어 매우 큰 공간을 차지하게 됩니다. 또한 <code class=\"language-text\">node_modules</code> 디렉토리 구조를 만들기 위해 많은 메모리 I/O가 필요합니다.</p>\n<h4 id=\"유령-의존성phantom-dependency\" style=\"position:relative;\">유령 의존성(phantom dependency)<a href=\"#%EC%9C%A0%EB%A0%B9-%EC%9D%98%EC%A1%B4%EC%84%B1phantom-dependency\" aria-label=\"유령 의존성phantom dependency permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">Yarn Classic</code>은 <code class=\"language-text\">node_modules</code>의 의존성 탐색, 저장 공간과 설치 시간의 비효율을 줄이기 위해 호이스팅(Hoisting)을 사용합니다. 호이스팅은 아래 그림과 같이 의존성 트리를 만듭니다.</p>\n<p><img src=\"/assets/img/posts/etc/monorepo_yarn_hoist.png\" alt=\"yarn 호이스팅\"></p>\n<p>호이스팅이 되면서 <code class=\"language-text\">Package-1</code>에서는 설치하지 않았던 <code class=\"language-text\">B (1.0)</code> 의존성이 설치되어 <code class=\"language-text\">B (1.0)</code>를 <code class=\"language-text\">import</code>하여 사용할 수 있는 유령 의존성이 생기게 됩니다. 이런 유령 의존성은 <code class=\"language-text\">A (1.0)</code>와 <code class=\"language-text\">C (1.0)</code> 의존성이 제거 되면 함께 제거되고, 또 <code class=\"language-text\">A (1.0)</code>이 업데이트 되어 <code class=\"language-text\">B (1.0)</code>를 사용하지 않게 된다면 자동으로 제거되어 어떤 사이드 이팩트가 발생 할 지 예상하기 어렵게 만듭니다.</p>\n<h2 id=\"yarn-berry\" style=\"position:relative;\"><code class=\"language-text\">Yarn Berry</code><a href=\"#yarn-berry\" aria-label=\"yarn berry permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">Yarn</code>의 2 버전 이상을 <code class=\"language-text\">Yarn Berry</code> 이라고 합니다. <code class=\"language-text\">Yarn Berry</code>에는 PnP와 Zero Install 두가지 중요한 개념이 있습니다.</p>\n<h3 id=\"pnpplugnplay\" style=\"position:relative;\">PnP(Plug'n'Play)<a href=\"#pnpplugnplay\" aria-label=\"pnpplugnplay permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>PnP는 Plug And Play의 줄임말로 해석하면 '꼽기만 하면 사용할 수 있다.'로 해석할 수 있습니다. <code class=\"language-text\">Yarn Berry</code>는 성능 개선을 위해 <code class=\"language-text\">node_modules</code>를 읽는 느린 메모리 I/O 대신 <code class=\"language-text\">.yarn/cache</code>에 종속 패키지들을 zip 형태로 저장하고, <code class=\"language-text\">.pnp.cjs</code> 파일에 의존성 패키지의 의존성 정보를 저장하여 의존성 정보를 알 수 있게 만들었습니다.</p>\n<blockquote>\n<h5 id=\"yarncache와-pnpcjs\" style=\"position:relative;\"><code class=\"language-text\">.yarn/cache</code>와 <code class=\"language-text\">.pnp.cjs</code><a href=\"#yarncache%EC%99%80-pnpcjs\" aria-label=\"yarncache와 pnpcjs permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">.yarn/cache</code>: 디렉토리 하위에 의존성 패키지들을 zip 형태로 저장하고 있습니다.</li>\n<li><code class=\"language-text\">.pnp.cjs</code>: 어떠한 패키지가 어떠한 패키지에 의존성이 있는지 저장하고 있는 파일입니다. 예를 들어 A 패키지를 실행해야 한다면, <code class=\"language-text\">.pnp.cjs</code> 파일에서 A 패키지의 의존성 정보를 읽어와서 A 패키지의 의존성 패키지를 <code class=\"language-text\">.yarn/cache</code>에서 찾아 A 패키지를 실행합니다.</li>\n</ul>\n</blockquote>\n<p><code class=\"language-text\">Yarn Berry</code>는 PnP 방식을 사용하여 아래의 3가지 개선점을 만들었습니다.</p>\n<h4 id=\"의존성-탐색-시간의-단축\" style=\"position:relative;\">의존성 탐색 시간의 단축<a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%83%90%EC%83%89-%EC%8B%9C%EA%B0%84%EC%9D%98-%EB%8B%A8%EC%B6%95\" aria-label=\"의존성 탐색 시간의 단축 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">Yarn Classic</code>은 패키지의 <code class=\"language-text\">node_modules</code>에 의존성을 저장하고, 또 그 의존성 패키지의 <code class=\"language-text\">node_modules</code> 밑에 의존성을 저장하는 방식으로 수직적으로 의존성을 관리하였다면, <code class=\"language-text\">Yarn Berry</code>는 <code class=\"language-text\">.yarn/cache</code>에 모든 의존성을 담아 수평적으로 의존성을 관리합니다. 수평적 의존성 관리는 모든 패키지의 접근 시간을 O(1)로 만들어 <code class=\"language-text\">require</code> 등으로 패키지를 가져오는데 사용되는 시간을 단축했습니다.</p>\n<h4 id=\"의존성-파일-크기-감소\" style=\"position:relative;\">의존성 파일 크기 감소<a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%8C%8C%EC%9D%BC-%ED%81%AC%EA%B8%B0-%EA%B0%90%EC%86%8C\" aria-label=\"의존성 파일 크기 감소 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">Yarn Berry</code>는 <code class=\"language-text\">.yarn/cache</code>에 압축 파일 단위로 의존성을 관리하여 파일의 수와 크기를 감소시켰습니다.</p>\n<h4 id=\"유령-의존성-해결\" style=\"position:relative;\">유령 의존성 해결<a href=\"#%EC%9C%A0%EB%A0%B9-%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%95%B4%EA%B2%B0\" aria-label=\"유령 의존성 해결 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">Yarn Berry</code>는 호이스팅을 사용하지 않아 유령 의존성 사용으로 발생하는 사이드 이팩트를 막았습니다.</p>\n<h3 id=\"zero-install\" style=\"position:relative;\">Zero Install<a href=\"#zero-install\" aria-label=\"zero install permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Yarn Berry</code>를 좀 더 PnP스럽게 사용하려면 Zero Install을 사용하면 됩니다. Zero Install이란 단어 그대로 설치 없이(<code class=\"language-text\">yarn install</code> 명령어 없이) 바로 프로젝트를 실행할 수 있도록 하는 설정을 이야기합니다.</p>\n<p><code class=\"language-text\">.yarn/cache</code>에 저장되어 있는 의존성 패키지와 <code class=\"language-text\">.pnp.cjs</code>에 저장되어 있는 패키지 의존성 정보를 버전 관리 프로그램(Git 등..)이 관리할 수 있도록 해서 구현할 수 있습니다. 버전 관리 프로그램으로 Git을 사용한다면, Zero Install을 사용할 때와 사용하지 않을 때 <code class=\"language-text\">.gitignore</code> 파일을 아래 코드와 같이 설정하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Zero Install 사용할 경우\n.yarn/*\n!.yarn/cache\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/sdks\n!.yarn/versions</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Zero Install 사용하지 않을 경우\n.pnp.*\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/sdks\n!.yarn/versions</code></pre></div>\n<p>Zero Install을 사용하면 아래 2가지 장점이 있습니다.</p>\n<h4 id=\"ci-시간-감소\" style=\"position:relative;\">CI 시간 감소<a href=\"#ci-%EC%8B%9C%EA%B0%84-%EA%B0%90%EC%86%8C\" aria-label=\"ci 시간 감소 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>프로젝트마다 다르지만, 보통의 경우 아래와 같은 과정을 거쳐 서비스가 배포됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token operator\">&lt;</span>project repository<span class=\"token operator\">></span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">install</span>\n<span class=\"token function\">yarn</span> build</code></pre></div>\n<p>Zero Install을 사용할 경우 의존성을 설치할 필요가 없어서, <code class=\"language-text\">yarn install</code> 명령어 없이 <code class=\"language-text\">git clone</code> 만으로 프로젝트가 바로 빌드 가능한 상태가 되어 의존성을 설치하는 시간을 절약할 수 있습니다.</p>\n<h4 id=\"브랜치-변경시-바로-프로젝트-실행-가능\" style=\"position:relative;\">브랜치 변경시 바로 프로젝트 실행 가능<a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B3%80%EA%B2%BD%EC%8B%9C-%EB%B0%94%EB%A1%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%A4%ED%96%89-%EA%B0%80%EB%8A%A5\" aria-label=\"브랜치 변경시 바로 프로젝트 실행 가능 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>버전 관리 프로그램을 통해 의존성 패키지가 관리되면, 브랜치를 변경할 경우 해당 브랜치에 이미 필요한 의존성 패키지가 존재하여 추가로 <code class=\"language-text\">yarn install</code> 명령어 실행 없이 프로젝트를 실행할 수 있습니다.</p>\n<h3 id=\"yarn-berry-설정\" style=\"position:relative;\"><code class=\"language-text\">Yarn Berry</code> 설정<a href=\"#yarn-berry-%EC%84%A4%EC%A0%95\" aria-label=\"yarn berry 설정 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">.yarnrc.yml</code> 파일에서 <code class=\"language-text\">Yarn Berry</code> 설정을 할 수 있습니다. <code class=\"language-text\">.yarnrc.yml</code> 파일에 작성 할 수 있는 몇가지 <code class=\"language-text\">Yarn Berry</code> 설정을 살펴도록 하겠습니다. 자세한 <code class=\"language-text\">.yarnrc.yml</code> 설정 방법은 <a href=\"https://yarnpkg.com/configuration/yarnrc\">공식 문서</a>를 참고 부탁드립니다.</p>\n<h4 id=\"nodelinker\" style=\"position:relative;\"><code class=\"language-text\">nodeLinker</code><a href=\"#nodelinker\" aria-label=\"nodelinker permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nodeLinker: \"pnp\" | \"pnpm\" | \"node-modules\"</code></pre></div>\n<p>패키지를 설치하는데 사용하는 링커를 선택할 수 있는 옵션입니다. 기본 값은 <code class=\"language-text\">pnp</code>입니다. <code class=\"language-text\">node-modules</code>로 설정할 경우 <code class=\"language-text\">Yarn Classic</code>이나 <code class=\"language-text\">NPM</code>처럼 <code class=\"language-text\">node_modules</code> 디렉토리에서 의존성을 관리하게 됩니다.</p>\n<h4 id=\"pnpmode\" style=\"position:relative;\"><code class=\"language-text\">pnpMode</code><a href=\"#pnpmode\" aria-label=\"pnpmode permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pnpMode: \"strict\" | \"loose\"</code></pre></div>\n<p><code class=\"language-text\">strict</code>가 기본 값입니다. <code class=\"language-text\">Yarn Berry</code>의 PnP는 호이스팅을 사용하지 않아서 <code class=\"language-text\">package.json</code>의 <code class=\"language-text\">dependencies</code>에 나열 된 의존성만 설치됩니다. 이런 동작은 유령 의존성을 없앨 수 있지만, 사용중인 패키지가 유령 의존성을 사용하고 있다면 문제가 될 수 있습니다. 이런 경우 <code class=\"language-text\">loose</code>를 사용하여 문제를 해결 할 수 있습니다.</p>\n<p><code class=\"language-text\">pnpMode: \"loose\"</code>를 사용할 경우 <code class=\"language-text\">node-modules</code> 호이스터를 사용해서 호이스팅 되는 패키지 목록을 폴백 풀(fallback pool)로 만들어 <code class=\"language-text\">.pnp.cjs</code>에 저장합니다. 의존성 패키지를 찾지 못할 경우 폴백 풀에서 패키지를 찾아 실행하게 됩니다.</p>\n<h4 id=\"packageextensions\" style=\"position:relative;\"><code class=\"language-text\">packageExtensions</code><a href=\"#packageextensions\" aria-label=\"packageextensions permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">webpack@*:\n  dependencies:\n    lodash: \"^4.15.0\"\n  peerDependencies:\n    webpack-cli: \"*\"\n  peerDependenciesMeta:\n    webpack-cli:\n      optional: true</code></pre></div>\n<p>일부 패키지는 의존성 정보가 잘못되었거나 누락이 있을 수 있습니다. <code class=\"language-text\">Yarn Berry</code>의 PnP는 의존성 관리에 엄격한 편인데, 사용하는 패키지에 의존성 정보가 잘못되어 있다면 해당 패키지는 사용할 수 없습니다. 의존성 정보가 잘못 된 패키지를 사용하기 위해서 <code class=\"language-text\">packageExtensions</code>을 사용하여 의존성 정보를 확장할 수 있습니다.</p>\n<p>위의 코드는 모든 버전에 해당하는 <code class=\"language-text\">webpack</code>의 <code class=\"language-text\">dependencies</code>에 <code class=\"language-text\">loash@^4.15.0</code>, <code class=\"language-text\">peerDependencies</code>에 <code class=\"language-text\">webpack-cli@*</code>, <code class=\"language-text\">peerDependenciesMeta</code>에 <code class=\"language-text\">webpack-cli</code>의 <code class=\"language-text\">optional</code>을 확장한 코드입니다.</p>\n<h4 id=\"enablescripts\" style=\"position:relative;\"><code class=\"language-text\">enableScripts</code><a href=\"#enablescripts\" aria-label=\"enablescripts permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">enableScripts: true | false</code></pre></div>\n<p><code class=\"language-text\">enableScripts</code>의 기본 값은 <code class=\"language-text\">true</code>입니다.</p>\n<p><code class=\"language-text\">clone</code> 된 프로젝트에 <code class=\"language-text\">.yarn/cache</code>와 <code class=\"language-text\">.pnp.cjs</code> 파일이 모두 존재하지만 <code class=\"language-text\">yarn install</code> 후에야 프로젝트를 실행할 수 있는 반쪽 자리 Zero Install이라면, <code class=\"language-text\">.yarn/unplugged</code> 디렉토리를 의심해 봐야 합니다.</p>\n<p><code class=\"language-text\">Yarn Berry</code>는 의존성 패키지를 모두 zip으로 관리하기 때문에 의존성 패키지는 모두 읽기 전용으로 동작할 수 밖에 없습니다. 하지만 의존성 패키지가 쓰여지거나(파일 쓰기) 실행(쉘 스크립트 실행 등..) 되어야 한다면, zip 파일은 압축 해제되어 <code class=\"language-text\">.yarn/unplugged</code> 디렉토리에 저장됩니다.</p>\n<p><code class=\"language-text\">yarn install</code> 과정 중에 의존성 패키지에 사후 설치(postinstall) 스크립트가 있다면 해당 패키지는 압축 해제 되어 <code class=\"language-text\">.yarn/unplugged</code> 디렉토리에 저장됩니다. 이런 이유로 Zero Install 설정을 했지만 <code class=\"language-text\">yarn install</code>을 해야 프로젝트가 실행되는 경우가 발생하게 됩니다.</p>\n<p><code class=\"language-text\">yarn install</code> 없이 바로 프로젝트를 실행하기 위해서는 <code class=\"language-text\">enableScripts: false</code>로 설정해야 합니다. <code class=\"language-text\">enableScripts: false</code>는 사후 설치 스크립트를 막아 <code class=\"language-text\">.yarn/unplugged</code> 디렉토리를 생성하지 않도록 만듭니다.</p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://d2.naver.com/helloworld/7553804\">https://d2.naver.com/helloworld/7553804</a></li>\n<li><a href=\"https://toss.tech/article/node-modules-and-yarn-berry\">https://toss.tech/article/node-modules-and-yarn-berry</a></li>\n<li><a href=\"https://velog.io/@oimne/yarn-berry\">https://velog.io/@oimne/yarn-berry</a></li>\n<li><a href=\"https://yarnpkg.com/features/pnp\">https://yarnpkg.com/features/pnp</a></li>\n<li><a href=\"https://yarnpkg.com/getting-started/qa\">https://yarnpkg.com/getting-started/qa</a></li>\n<li><a href=\"https://yarnpkg.com/configuration/yarnrc#enableScripts\">https://yarnpkg.com/configuration/yarnrc#enableScripts</a></li>\n<li><a href=\"https://yarnpkg.com/advanced/lexicon#unplugged-package\">https://yarnpkg.com/advanced/lexicon#unplugged-package</a></li>\n<li><a href=\"https://yarnpkg.com/features/offline-cache\">https://yarnpkg.com/features/offline-cache</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#yarn-classic\"><code class=\"language-text\">Yarn Classic</code></a></p>\n<ul>\n<li><a href=\"#yarn-classic%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\"><code class=\"language-text\">Yarn Classic</code>의 문제점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#yarn-berry\"><code class=\"language-text\">Yarn Berry</code></a></p>\n<ul>\n<li><a href=\"#pnpplugnplay\">PnP(Plug'n'Play)</a></li>\n<li><a href=\"#zero-install\">Zero Install</a></li>\n<li><a href=\"#yarn-berry-%EC%84%A4%EC%A0%95\"><code class=\"language-text\">Yarn Berry</code> 설정</a></li>\n</ul>\n</li>\n</ul>","timeToRead":8,"excerpt":"은 과 같은 Node Package Manager입니다. 의 1 버전을 이라고 하고 의 2 버전 이상을 라고 합니다.  의 1 버전을  이라고 합니다. Yarn Classic 저장소에 프로젝트 설명을 보면, 1.x…","frontmatter":{"title":"[ETC] Yarn Berry","thumbnail":"etc/yarn_berry.png","summary":"Yarn은 NPM과 동일한 Node Package Manager입니다. Yarn의 1 버전을 Yarn Classic이라고 하고 Yarn의 2 버전 이상을 Yarn Berry라고 합니다."},"fields":{"createdDate":"2023-02-08"}}},"pageContext":{"slug":"/tech/etc/yarn-berry/","image":"etc/yarn_berry.png","next":{"frontmatter":{"title":"[ETC] Monorepo - 개념"},"fields":{"slug":"/tech/etc/monorepo-concept/"}},"previous":{"frontmatter":{"title":"[ETC] package.json의 scripts"},"fields":{"slug":"/tech/etc/package-json-scripts/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}