{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/javascript/es2020/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8d848","images":{"fallback":{"src":"/static/a20b53f5eae2c06908534a3e28220312/f635c/js.png","srcSet":"/static/a20b53f5eae2c06908534a3e28220312/a5da5/js.png 300w,\n/static/a20b53f5eae2c06908534a3e28220312/cadb4/js.png 750w,\n/static/a20b53f5eae2c06908534a3e28220312/feb73/js.png 1080w,\n/static/a20b53f5eae2c06908534a3e28220312/6032c/js.png 1366w,\n/static/a20b53f5eae2c06908534a3e28220312/3d4b2/js.png 1920w,\n/static/a20b53f5eae2c06908534a3e28220312/f635c/js.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/a20b53f5eae2c06908534a3e28220312/29f5b/js.webp 300w,\n/static/a20b53f5eae2c06908534a3e28220312/11ba1/js.webp 750w,\n/static/a20b53f5eae2c06908534a3e28220312/089e1/js.webp 1080w,\n/static/a20b53f5eae2c06908534a3e28220312/ad4fd/js.webp 1366w,\n/static/a20b53f5eae2c06908534a3e28220312/d8a73/js.webp 1920w,\n/static/a20b53f5eae2c06908534a3e28220312/a28c0/js.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p>ES2020(ES11)에 추가된 기능들을 살펴보도록 하겠습니다.</p>\n<h2 id=\"stringprototypematchall\" style=\"position:relative;\">String.prototype.matchAll<a href=\"#stringprototypematchall\" aria-label=\"stringprototypematchall permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>문자열에서 일치하는 정규식을 iterator 형태로 반환하는 함수입니다. 사용방법은 <code class=\"language-text\">match</code>와 동일합니다.</p>\n<h3 id=\"for-of-사용\" style=\"position:relative;\"><code class=\"language-text\">for of</code> 사용<a href=\"#for-of-%EC%82%AC%EC%9A%A9\" aria-label=\"for of 사용 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>iterator을 반환하기 때문에 <code class=\"language-text\">for of</code> 문을 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'11a22ba'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n['a', index: 2, input: '11a22ba', groups: undefined]\n['a', index: 6, input: '11a22ba', groups: undefined]\n*/</span></code></pre></div>\n<h3 id=\"문자열-사용\" style=\"position:relative;\">문자열 사용<a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%82%AC%EC%9A%A9\" aria-label=\"문자열 사용 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">matchAll</code> 함수의 파라미터로 문자열을 전달할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'11a22ba'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: ['a', index: 2, input: '11a22ba', groups: undefinded], done: false }</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: ['a', index: 6, input: '11a22ba', groups: undefinded], done: false }</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: undefined, done: true }</span></code></pre></div>\n<h3 id=\"주의사항\" style=\"position:relative;\">주의사항<a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"주의사항 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">matchAll</code> 함수의 파라미터로 정규식을 전달할 경우 글로벌 옵션(<code class=\"language-text\">g</code>)을 줘야 합니다. 글로벌 옵션이 없는 경우 non-global RegExp 에러가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'11a22ba'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: String.prototype.matchAll called with a non-global RegExp argument</span></code></pre></div>\n<h2 id=\"import\" style=\"position:relative;\">import()<a href=\"#import\" aria-label=\"import permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>동적으로 파일을 가져올 수 있게 하는 함수입니다. <code class=\"language-text\">Promise</code>를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// say.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">안녕하세요.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">안녕히 가세요.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>hi<span class=\"token punctuation\">,</span> bye<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./say.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"bigint\" style=\"position:relative;\">BigInt<a href=\"#bigint\" aria-label=\"bigint permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>자바스크립트는 2^53 보다 큰 수를 표현할 수 없습니다. 2^53 보다 큰 수를 표현할 수 있도록 <code class=\"language-text\">BigInt</code>가 추가되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740991</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740992</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740992</span>\n\n<span class=\"token keyword\">const</span> bigInt <span class=\"token operator\">=</span> <span class=\"token number\">9007199254740991n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 또는 BigInt(9007199254740991)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740991</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigInt <span class=\"token operator\">+</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740992</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigInt <span class=\"token operator\">+</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740993</span></code></pre></div>\n<p><code class=\"language-text\">typeof 1n</code>은 <code class=\"language-text\">bigint</code>이기 때문에 때문에 새로운 타입이 생겼다고 볼 수 있습니다. 타입에 차이가 있기 때문에 <code class=\"language-text\">1n</code>과 <code class=\"language-text\">1</code>은 아래와 같이 차이가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bigint</span>\n<span class=\"token number\">1n</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">1n</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"number와-유사점\" style=\"position:relative;\"><code class=\"language-text\">Number</code>와 유사점<a href=\"#number%EC%99%80-%EC%9C%A0%EC%82%AC%EC%A0%90\" aria-label=\"number와 유사점 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">BigInt</code> 타입을 사용할 때, <code class=\"language-text\">Number</code> 타입과 유사한 방법으로 사용할 수 있는 연산들을 살펴보겠습니다.</p>\n<h4 id=\"크기-비교\" style=\"position:relative;\">크기 비교<a href=\"#%ED%81%AC%EA%B8%B0-%EB%B9%84%EA%B5%90\" aria-label=\"크기 비교 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">1n !== 1</code>이지만 <code class=\"language-text\">Number</code>와 <code class=\"language-text\">BigInt</code> 사이의 크기 비교가 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">1n</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">2n</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">2n</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">2n</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h4 id=\"정렬\" style=\"position:relative;\">정렬<a href=\"#%EC%A0%95%EB%A0%AC\" aria-label=\"정렬 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>정렬도 <code class=\"language-text\">Number</code>와 유사합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [-12n, 0, 0n, 10, 4n, 4, 6]</span></code></pre></div>\n<h4 id=\"조건-판단\" style=\"position:relative;\">조건 판단<a href=\"#%EC%A1%B0%EA%B1%B4-%ED%8C%90%EB%8B%A8\" aria-label=\"조건 판단 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>조건 판단 기준 역시 <code class=\"language-text\">Number</code>와 비슷합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from the if!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from the else!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// \"Hello from the else!\"</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">||</span> <span class=\"token number\">12n</span> <span class=\"token comment\">// 12n</span>\n<span class=\"token number\">0n</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">12n</span> <span class=\"token comment\">// 0n</span>\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">12n</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">!</span><span class=\"token number\">12n</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">!</span><span class=\"token number\">0n</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"주의사항-1\" style=\"position:relative;\">주의사항<a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-1\" aria-label=\"주의사항 1 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Number</code> 타입과 동일하게 <code class=\"language-text\">BigInt</code> 타입을 사용할 때 주의해야 할 사항을 살펴보겠습니다.</p>\n<h4 id=\"bigint와-number-간의-계산\" style=\"position:relative;\"><code class=\"language-text\">BigInt</code>와 <code class=\"language-text\">Number</code> 간의 계산<a href=\"#bigint%EC%99%80-number-%EA%B0%84%EC%9D%98-%EA%B3%84%EC%82%B0\" aria-label=\"bigint와 number 간의 계산 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">BigInt</code>와 <code class=\"language-text\">Number</code>간의 계산은 <code class=\"language-text\">TypeError</code>가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">1n</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token comment\">// TypeError: Cannot mix BigInt and other types, use explicit conversions</span>\n<span class=\"token number\">1n</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token comment\">// TypeError: Cannot mix BigInt and other types, use explicit conversions</span></code></pre></div>\n<h4 id=\"bigint에서-number로-형-변환\" style=\"position:relative;\"><code class=\"language-text\">BigInt</code>에서 <code class=\"language-text\">Number</code>로 형 변환<a href=\"#bigint%EC%97%90%EC%84%9C-number%EB%A1%9C-%ED%98%95-%EB%B3%80%ED%99%98\" aria-label=\"bigint에서 number로 형 변환 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">+</code> 연산을 사용해서 <code class=\"language-text\">BigInt</code>를 <code class=\"language-text\">Number</code>로 형 변환도 불가능합니다. <code class=\"language-text\">BigInt</code>를 <code class=\"language-text\">Number</code>로 형 변환을 하기 위해서는 <code class=\"language-text\">Number</code> 함수를 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">+</span><span class=\"token number\">1n</span> <span class=\"token comment\">// TypeError: Cannot convert a BigInt value to a number</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<h4 id=\"math-함수와--연산\" style=\"position:relative;\"><code class=\"language-text\">Math</code> 함수와 <code class=\"language-text\">|</code> 연산<a href=\"#math-%ED%95%A8%EC%88%98%EC%99%80--%EC%97%B0%EC%82%B0\" aria-label=\"math 함수와  연산 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">Math</code> 함수, <code class=\"language-text\">Number</code>와 <code class=\"language-text\">|</code> 연산을 사용할 때 <code class=\"language-text\">TypeError</code>가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: Cannot convert a BigInt value to a number</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: Cannot convert a BigInt value to a number</span>\n<span class=\"token number\">1n</span><span class=\"token operator\">|</span><span class=\"token number\">0</span> <span class=\"token comment\">// TypeError: Cannot mix BigInt and other types, use explicit conversions</span></code></pre></div>\n<h2 id=\"promiseallsettled\" style=\"position:relative;\">Promise.allSettled<a href=\"#promiseallsettled\" aria-label=\"promiseallsettled permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>아래 표와 같이 <code class=\"language-text\">Promise.allSettled</code>는 Promise 작업이 모두 종료되었을 때에 마치는 함수입니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">name</th>\n<th align=\"center\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">Promise.allSettled</code></td>\n<td align=\"center\">모든 작업이 종료되면 종료됨</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">Promise.all</code></td>\n<td align=\"center\">모든 작업이 <code class=\"language-text\">resolve</code>되거나, <code class=\"language-text\">reject</code> 된 작업이 발생되면 종료됨</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">Promise.race</code></td>\n<td align=\"center\"><code class=\"language-text\">reject</code> 혹은 <code class=\"language-text\">resolve</code> 된 작업이 발생되면 종료됨</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">Promise.any</code></td>\n<td align=\"center\"><code class=\"language-text\">resolve</code> 된 작업이 발생되면 종료됨</td>\n</tr>\n</tbody>\n</table>\n<p>사용 방법과 응답 결과는 아래 코드와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">promise1</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">rej</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Reject'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">promise2</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">promise1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">promise2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{status: 'rejected', reason: 'Reject'}, {status: 'fulfilled', value: 'Resolve'}]</span></code></pre></div>\n<h2 id=\"globalthis\" style=\"position:relative;\">globalThis<a href=\"#globalthis\" aria-label=\"globalthis permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>브라우저에서 전역 객체는 <code class=\"language-text\">window</code>이고, Node.js의 전역 객체는 <code class=\"language-text\">global</code>입니다. 런타임마다 전역 객체가 달라서, 아래와 같이 전역 객체를 가져오는 공통 코드를 만들어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getGlobal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// the only reliable means to get the global object is</span>\n\t<span class=\"token comment\">// `Function('return this')()`</span>\n\t<span class=\"token comment\">// However, this causes CSP violations in Chrome apps.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> self <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> global <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> global<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unable to locate global object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES2020에서 <code class=\"language-text\">globalThis</code>가 등장해서 아래 코드와 같이 어떤 런타임이든 <code class=\"language-text\">globalThis</code>로 전역 객체를 가져올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// browser</span>\nglobalThis <span class=\"token operator\">===</span> window<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Node.js</span>\nglobalThis <span class=\"token operator\">===</span> global<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"for-in-순서\" style=\"position:relative;\">for-in 순서<a href=\"#for-in-%EC%88%9C%EC%84%9C\" aria-label=\"for in 순서 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>기존에는 브라우저마다 <code class=\"language-text\">for-in</code> 문의 반복 순서를 보장하지 못했습니다(브라우저마다 반복 순서가 다를 수 있었습니다). ES2020에서 <code class=\"language-text\">for-in</code> 순서를 보장되도록 스펙이 수정되었습니다.</p>\n<h2 id=\"optional-chaining\" style=\"position:relative;\">Optional Chaining<a href=\"#optional-chaining\" aria-label=\"optional chaining permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>ES2020에 추가된 사양 중에 개인적으로 가장 유용하게 사용하는 기능입니다. 객체의 값을 안전하게 가져오기 위해서는 아래와 같이 작성되어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> street <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>address <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">;</span></code></pre></div>\n<p>메서드를 호출 후 응답 결과가 <code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>일 경우 아래와 같은 예외 처리가 필요합니다,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fooInput <span class=\"token operator\">=</span> myForm<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[name=foo]'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> fooValue <span class=\"token operator\">=</span> fooInput <span class=\"token operator\">?</span> fooInput<span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span></code></pre></div>\n<p>Optional Chaining을 사용하면 위의 코드들이 아래와 같이 정리됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> street <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>address<span class=\"token operator\">?.</span>street\n<span class=\"token keyword\">var</span> fooValue <span class=\"token operator\">=</span> myForm<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[name=foo]'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>value</code></pre></div>\n<p>아래와 같이 함수도 Optional Chaining으로 호출할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">iterator<span class=\"token punctuation\">.</span>return<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"주의사항-2\" style=\"position:relative;\">주의사항<a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-2\" aria-label=\"주의사항 2 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Optional Chaining이 지원하지 않는 문법을 살펴보도록 하겠습니다.</p>\n<ul>\n<li>optional construction: <code class=\"language-text\">new a?.()</code></li>\n<li>optional template literal: <code>a?.<code class=\"language-text\">string</code></code></li>\n<li>Optional Chaining 후에 오는 constructor와 template literal: <code class=\"language-text\">new a?.b()</code>, <code>a?.b<code class=\"language-text\">string</code></code></li>\n<li>optional property assignment: <code class=\"language-text\">a?.b = c</code></li>\n<li>optional super: <code class=\"language-text\">super?.()</code>, <code class=\"language-text\">super?.foo</code></li>\n<li>그 외의 예약어: <code class=\"language-text\">new?.target</code>, <code class=\"language-text\">import?.('foo')</code></li>\n</ul>\n<h2 id=\"nullish-coalescing-operator\" style=\"position:relative;\">Nullish coalescing Operator<a href=\"#nullish-coalescing-operator\" aria-label=\"nullish coalescing operator permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>ES2020에 <code class=\"language-text\">??</code> 연산자가 추가되었습니다. <code class=\"language-text\">||</code>와 비교해서 살펴보도록 하겠습니다. <code class=\"language-text\">undefined</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">''</code>, <code class=\"language-text\">0</code>, <code class=\"language-text\">false</code> 모두 falsy 한 값이기 때문에 <code class=\"language-text\">||</code> 연산시 false로 뒤에 정의한 값이 할당됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">settings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">nullValue</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">animationDuration</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">headerText</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">showSplashScreen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> undefinedValue <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>undefinedValue <span class=\"token operator\">||</span> <span class=\"token string\">'some other default'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// some other default</span>\n<span class=\"token keyword\">const</span> nullValue <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>nullValue <span class=\"token operator\">||</span> <span class=\"token string\">'some other default'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// some other default</span>\n<span class=\"token keyword\">const</span> headerText <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>headerText <span class=\"token operator\">||</span> <span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, world!</span>\n<span class=\"token keyword\">const</span> animationDuration <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>animationDuration <span class=\"token operator\">||</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 300</span>\n<span class=\"token keyword\">const</span> showSplashScreen <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>showSplashScreen <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">??</code> 연산은 아래 코드와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">settings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">nullValue</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">animationDuration</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">headerText</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">showSplashScreen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> undefinedValue <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>undefinedValue <span class=\"token operator\">??</span> <span class=\"token string\">'some other default'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// some other default</span>\n<span class=\"token keyword\">const</span> nullValue <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>nullValue <span class=\"token operator\">??</span> <span class=\"token string\">'some other default'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// some other default</span>\n<span class=\"token keyword\">const</span> headerText <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>headerText <span class=\"token operator\">??</span> <span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span>\n<span class=\"token keyword\">const</span> animationDuration <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>animationDuration <span class=\"token operator\">??</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token keyword\">const</span> showSplashScreen <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>showSplashScreen <span class=\"token operator\">??</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">??</code> 연산의 경우 <code class=\"language-text\">undefinded</code>와 <code class=\"language-text\">null</code>인 경우에만 falsy로 처리됩니다.</p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://github.com/tc39/proposals/blob/master/finished-proposals.md\">https://github.com/tc39/proposals/blob/master/finished-proposals.md</a></li>\n<li><a href=\"https://www.zerocho.com/category/ECMAScript/post/5eae7480e70c21001f3e7956\">https://www.zerocho.com/category/ECMAScript/post/5eae7480e70c21001f3e7956</a></li>\n<li><a href=\"https://www.npmjs.com/package/string.prototype.matchall\">https://www.npmjs.com/package/string.prototype.matchall</a></li>\n<li><a href=\"https://ko.javascript.info/modules-dynamic-imports\">https://ko.javascript.info/modules-dynamic-imports</a></li>\n<li><a href=\"https://github.com/tc39/proposal-string-matchall\">https://github.com/tc39/proposal-string-matchall</a></li>\n<li><a href=\"https://github.com/tc39/proposal-dynamic-import\">https://github.com/tc39/proposal-dynamic-import</a></li>\n<li><a href=\"https://github.com/tc39/proposal-bigint\">https://github.com/tc39/proposal-bigint</a></li>\n<li><a href=\"https://github.com/tc39/proposal-promise-allSettled\">https://github.com/tc39/proposal-promise-allSettled</a></li>\n<li><a href=\"https://github.com/tc39/proposal-global\">https://github.com/tc39/proposal-global</a></li>\n<li><a href=\"https://github.com/tc39/proposal-for-in-order\">https://github.com/tc39/proposal-for-in-order</a></li>\n<li><a href=\"https://github.com/tc39/proposal-optional-chaining\">https://github.com/tc39/proposal-optional-chaining</a></li>\n<li><a href=\"https://github.com/tc39/proposal-nullish-coalescing\">https://github.com/tc39/proposal-nullish-coalescing</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#stringprototypematchall\">String.prototype.matchAll</a></p>\n<ul>\n<li><a href=\"#for-of-%EC%82%AC%EC%9A%A9\"><code class=\"language-text\">for of</code> 사용</a></li>\n<li><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%82%AC%EC%9A%A9\">문자열 사용</a></li>\n<li><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\">주의사항</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#import\">import()</a></p>\n</li>\n<li>\n<p><a href=\"#bigint\">BigInt</a></p>\n<ul>\n<li><a href=\"#number%EC%99%80-%EC%9C%A0%EC%82%AC%EC%A0%90\"><code class=\"language-text\">Number</code>와 유사점</a></li>\n<li><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-1\">주의사항</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#promiseallsettled\">Promise.allSettled</a></p>\n</li>\n<li>\n<p><a href=\"#globalthis\">globalThis</a></p>\n</li>\n<li>\n<p><a href=\"#for-in-%EC%88%9C%EC%84%9C\">for-in 순서</a></p>\n</li>\n<li>\n<p><a href=\"#optional-chaining\">Optional Chaining</a></p>\n<ul>\n<li><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-2\">주의사항</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#nullish-coalescing-operator\">Nullish coalescing Operator</a></p>\n</li>\n</ul>","timeToRead":8,"excerpt":"ES2020(ES11)에 추가된 기능들을 살펴보도록 하겠습니다. String.prototype.matchAll 문자열에서 일치하는 정규식을 iterator 형태로 반환하는 함수입니다. 사용방법은 와 동일합니다.  사용 iterator…","frontmatter":{"title":"[JavaScript] ECMAScript 2020","thumbnail":"javascript/js.png","summary":"ES2020에 추가된 기능을 살펴보도록 하겠습니다."},"fields":{"createdDate":"2020-09-01"}}},"pageContext":{"slug":"/tech/javascript/es2020/","image":"javascript/js.png","next":{"frontmatter":{"title":"[Browser] CORS란?"},"fields":{"slug":"/tech/browser/cors/"}},"previous":{"frontmatter":{"title":"[Svelte] Svelte + TS + SCSS + α"},"fields":{"slug":"/tech/svelte/svelte-ts-scss/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}