{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/react/concurrent-rendering/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282838","images":{"fallback":{"src":"/static/f96908f4901562b83e282ac4074045a9/f635c/react.png","srcSet":"/static/f96908f4901562b83e282ac4074045a9/a5da5/react.png 300w,\n/static/f96908f4901562b83e282ac4074045a9/cadb4/react.png 750w,\n/static/f96908f4901562b83e282ac4074045a9/feb73/react.png 1080w,\n/static/f96908f4901562b83e282ac4074045a9/6032c/react.png 1366w,\n/static/f96908f4901562b83e282ac4074045a9/3d4b2/react.png 1920w,\n/static/f96908f4901562b83e282ac4074045a9/f635c/react.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/f96908f4901562b83e282ac4074045a9/29f5b/react.webp 300w,\n/static/f96908f4901562b83e282ac4074045a9/11ba1/react.webp 750w,\n/static/f96908f4901562b83e282ac4074045a9/089e1/react.webp 1080w,\n/static/f96908f4901562b83e282ac4074045a9/ad4fd/react.webp 1366w,\n/static/f96908f4901562b83e282ac4074045a9/d8a73/react.webp 1920w,\n/static/f96908f4901562b83e282ac4074045a9/a28c0/react.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<blockquote>\n<h5 id=\"tldr\" style=\"position:relative;\">TL;DR<a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li>동시성 렌더링: 렌더링을 긴급한 업데이트, 전환 업데이트로 나눠 긴급한 업데이트부터 진행함\n<ul>\n<li>전환 업데이트 중 긴급한 업데이트가 들어오면 전환 업데이트를 중단하고 긴급한 업데이트 우선 진행함</li>\n<li>동시성 렌더링은 계산속도를 개선한 것이 아니라 우선순위를 지정하여 긴급한 업데이트를 우선 진행해 UI 차단을 최소화시킨 것</li>\n</ul>\n</li>\n<li><code class=\"language-text\">startTransition</code> 함수: <code class=\"language-text\">startTransition</code>로 감싸진 set 함수는 전환 업데이트로 처리됨</li>\n<li><code class=\"language-text\">useTransition</code> 훅: <code class=\"language-text\">startTransition</code> 함수와 <code class=\"language-text\">isPending</code>을 반환하는 훅으로, 지연 중일 경우 <code class=\"language-text\">isPending</code>는 <code class=\"language-text\">true</code>가 됨</li>\n<li><code class=\"language-text\">useDeferredValue</code> 훅: <code class=\"language-text\">startTransition</code> 함수를 사용하지 못하는 경우, 즉 set 함수에 접근할 수 없거나 props를 지연하고 싶을 경우 사용되는 훅으로, 반환 값으로 화면이 업데이트될 때 지연처리 됨</li>\n</ul>\n</blockquote>\n<p>React 18에서 추가된 기능 중 가장 중요한 것이 사용자 경험을 향상할 수 있는 동시성 렌더링입니다. 이번 포스트에서는 동시성이 무엇인지 그리고 동시성을 위해 추가된 <code class=\"language-text\">startTransition</code> 함수와 <code class=\"language-text\">useTransition</code>, <code class=\"language-text\">useDeferredValue</code> 훅을 살펴보도록 하겠습니다.</p>\n<h2 id=\"동시성concurrency과-병렬성parallelism\" style=\"position:relative;\">동시성(Concurrency)과 병렬성(Parallelism)<a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1concurrency%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1parallelism\" aria-label=\"동시성concurrency과 병렬성parallelism permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>동시성과 병렬성은 동시에 둘 이상의 작업을 처리하는 방법이라는 공통점이 있지만 동작하는 방식에 차이가 있습니다.</p>\n<ul>\n<li><strong>동시성</strong>: 하나의 코어에서 둘 이상의 작업을 여러 조각으로 나누어 Context Switch를 통해 번갈아가며 실행하여 여러 개의 작업이 동시에 처리되는 것처럼 보이게 하는 것을 말합니다.</li>\n<li><strong>병렬성</strong>: 여러 개의 코어에서 각각의 작업을 담당하여 처리하는 것을 말합니다.</li>\n</ul>\n<p><img src=\"/assets/img/posts/react/concurrent_parallelism.png\" alt=\"동시성과 병렬성\"></p>\n<h2 id=\"긴급한-업데이트urgent-updates와-전환-업데이트transition-updates\" style=\"position:relative;\">긴급한 업데이트(Urgent updates)와 전환 업데이트(Transition updates)<a href=\"#%EA%B8%B4%EA%B8%89%ED%95%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8urgent-updates%EC%99%80-%EC%A0%84%ED%99%98-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8transition-updates\" aria-label=\"긴급한 업데이트urgent updates와 전환 업데이트transition updates permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>React 18 이전에서는 렌더링을 쪼갤 수 없는 하나의 작업이었습니다. 그래서 렌더링이 시작되면 렌더링을 멈출 방법이 없었고 렌더링이 오래 걸린다면 다음에 수행해야 하는 작업들이 진행을 하지 못하면서 애플리케이션이 버벅거리는 현상이 발생했습니다. React 18에서는 동시성 렌더링을 사용하여 급한 작업과 덜 급한 작업으로 나눠, 급한 작업을 우선 화면에 렌더링 하는 방법으로 사용성 개선을 했습니다.</p>\n<p>아래 그림은 구글 메인 페이지에서 검색어를 입력할 경우 노출되는 화면입니다. 사용자의 입력을 받는 input 컴포넌트와 검색 결과를 나타내는 목록 컴포넌트로 나눌 수 있습니다.</p>\n<p><img src=\"/assets/img/posts/react/search_box.png\" alt=\"긴급한 업데이트와 전환 업데이트\"></p>\n<p>사용자의 입력을 받는 input 컴포넌트는 버벅거림 없이 즉시 사용자에게 노출되어야 하지만, 검색 결과를 나타내는 목록 컴포넌트는 즉시 검색 결과를 노출하지 않아도 됩니다. 따라서 input 컴포넌트의 업데이트는 급한 작업, 긴급한 업데이트(urgent updates)로 목록 컴포넌트의 업데이트는 덜 급한 작업, 전환 업데이트(transition updates)로 나눌 수 있습니다.</p>\n<h2 id=\"react-18에서-동시성-렌더링\" style=\"position:relative;\">React 18에서 동시성 렌더링<a href=\"#react-18%EC%97%90%EC%84%9C-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"react 18에서 동시성 렌더링 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>아래 코드는 동시성 렌더링을 사용하지 않은 코드입니다. 검색어를 입력하면 많은 검색 결과를 화면에 노출하기 때문에 화면이 버벅거리는 것을 확인할 수 있습니다.</p>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/no-concurrent-rendering-xzd8dj?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"no concurrent rendering\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<p>React 18에서 추가된 동시성 렌더링을 사용하면 위의 예제처럼 버벅거리는 증상을 개선할 수 있습니다. 동시성 렌더링을 위해 추가된 <code class=\"language-text\">startTransition</code> 함수와 <code class=\"language-text\">useTransition</code>, <code class=\"language-text\">useDeferredValue</code> 훅을 살펴보도록 하겠습니다.</p>\n<h3 id=\"starttransition-함수\" style=\"position:relative;\"><code class=\"language-text\">startTransition</code> 함수<a href=\"#starttransition-%ED%95%A8%EC%88%98\" aria-label=\"starttransition 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">scope: () => void</code>: <code class=\"language-text\">scope</code> 함수 내부에서는 1개 이상의 set 함수(<code class=\"language-text\">useState</code>의 반환 값 중 set 함수)가 호출되어야 합니다. <code class=\"language-text\">scope</code> 함수는 즉시 실행되며, 내부에서 호출한 상태 업데이트들은 모두 전환 업데이트로 처리됩니다.</li>\n</ul>\n<p>전환 업데이트 중에 긴급한 업데이트가 들어오면 전환 업데이트는 중단되고 긴급한 업데이트를 먼저 처리하여 UI를 차단하지 않습니다. 아래 코드와 같이 <code class=\"language-text\">startTransition</code> 함수를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> startTransition <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 긴급한 업데이트 : 입력하고 있는 값</span>\n<span class=\"token function\">setInputValue</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// startTransition으로 래핑된 업데이트는 긴급하지 않은 것으로 처리되고, 더 긴급한 업데이트가 들어오면 중단된다.</span>\n<span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 전환 업데이트: 입력값에 따른 쿼리값</span>\n  <span class=\"token function\">setSearchQuery</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">startTransition</code> 함수를 사용하면 위의 예제에서 버벅거리던 화면을 아래 예제와 같이 개선할 수 있습니다.</p>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/starttransition-wg55nq?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"startTransition\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"usetransition-훅\" style=\"position:relative;\"><code class=\"language-text\">useTransition</code> 훅<a href=\"#usetransition-%ED%9B%85\" aria-label=\"usetransition 훅 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPending<span class=\"token punctuation\">,</span> startTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">isPending: boolean</code>: 지연 중인 전환이 있는지 여부를 알려주는 플래그입니다.</li>\n<li><code class=\"language-text\">startTransition</code>: 상태 업데이트를 전환 업데이트로 처리하는 함수입니다. 위에서 살펴본 <code class=\"language-text\">startTransition</code> 함수와 동일합니다.</li>\n</ul>\n<p><code class=\"language-text\">useTransition</code> 훅은 지연 중인지 확인할 수 있는 <code class=\"language-text\">isPending</code> 플레그가 있다는 점을 제외하고 위에서 살펴본 <code class=\"language-text\">startTransition</code> 함수와 동일한 사용성을 가집니다. 아래 코드와 같이 <code class=\"language-text\">isPending</code>를 사용하여 지연 상태를 표시할 수 있습니다.</p>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/usetransition-nzngqk?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useTransition\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"usedeferredvalue-훅\" style=\"position:relative;\"><code class=\"language-text\">useDeferredValue</code> 훅<a href=\"#usedeferredvalue-%ED%9B%85\" aria-label=\"usedeferredvalue 훅 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useDeferredValue</code> 훅은 <code class=\"language-text\">startTransition</code> 함수와 동일하게 전환 업데이트 처리를 합니다. <code class=\"language-text\">useDeferredValue</code> 훅의 반환 값(<code class=\"language-text\">deferredValue</code>)으로 화면이 업데이트되는 경우에 지연처리 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> deferredValue <span class=\"token operator\">=</span> <span class=\"token function\">useDeferredValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">value: any</code>: 지연하려는 값입니다. 모든 타입이 올 수 있습니다.</li>\n<li><code class=\"language-text\">deferredValue: any</code>: 지연된 값입니다.</li>\n</ul>\n<p><code class=\"language-text\">startTransition</code> 함수를 사용하기 위해서는 set 함수를 사용해야 하는데, set 함수에 접근할 수 없거나 컴포넌트가 전달받은 props를 지연하고 싶을 경우 <code class=\"language-text\">useDeferredValue</code> 훅을 사용할 수 있습니다.</p>\n<p><code class=\"language-text\">Object.is</code> 비교를 통해 현재 화면에 그리고 있는 값과 다른 값을 전달받으면 백그라운드에서 리렌더링을 진행합니다. 백그라운드에서 리렌더링 중에 새로운 값을 전달받으면 진행 중이던 렌더링은 취소되고 처음부터 다시 렌더링 합니다.</p>\n<p><code class=\"language-text\">useTransition</code> 훅과 다르게 지연 중임을 나타내는 값을 반환하지 않는데, 아래 코드와 같은 방법을 사용하여 지연 중임을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> deferredQuery <span class=\"token operator\">=</span> <span class=\"token function\">useDeferredValue</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isStale <span class=\"token operator\">=</span> query <span class=\"token operator\">!==</span> deferredQuery<span class=\"token punctuation\">;</span> <span class=\"token comment\">// query와 deferredQuery 값이 다를 경우 지연중임</span></code></pre></div>\n<p><code class=\"language-text\">useDeferredValue</code> 훅의 사용 방법은 아래 코드와 같습니다.</p>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/usedeferredvalue-krfnwm?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useDeferredValue\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://yeonyeon.tistory.com/270\">https://yeonyeon.tistory.com/270</a></li>\n<li><a href=\"https://velog.io/@ktthee/React-18-%EC%97%90-%EC%B6%94%EA%B0%80%EB%90%9C-useDeferredValue-%EB%A5%BC-%EC%8D%A8-%EB%B3%B4%EC%9E%90\">https://velog.io/@ktthee/React-18-에-추가된-useDeferredValue-를-써-보자</a></li>\n<li><a href=\"https://doiler.tistory.com/83\">https://doiler.tistory.com/83</a></li>\n<li><a href=\"https://www.freecodecamp.org/korean/news/riaegteu-18yi-singineung-dongsiseong-rendeoring-concurrent-rendering-jadong-ilgwal-ceori-automatic-batching-deung/\">https://www.freecodecamp.org/korean/news/riaegteu-18yi-singineung-dongsiseong-rendeoring-concurrent-rendering-jadong-ilgwal-ceori-automatic-batching-deung/</a></li>\n<li><a href=\"https://velog.io/@heelieben/React-18-Concurrent-Rendering\">https://velog.io/@heelieben/React-18-Concurrent-Rendering</a></li>\n<li><a href=\"https://kyledev.tistory.com/161\">https://kyledev.tistory.com/161</a></li>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2023-07-09-concurrent_rendering/\">https://tecoble.techcourse.co.kr/post/2023-07-09-concurrent_rendering/</a></li>\n<li><a href=\"https://deview.kr/data/deview/session/attach/1_Inside%20React%20(%E1%84%83%E1%85%A9%E1%86%BC%E1%84%89%E1%85%B5%E1%84%89%E1%85%A5%E1%86%BC%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%80%E1%85%AE%E1%84%92%E1%85%A7%E1%86%AB%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB%20%E1%84%80%E1%85%B5%E1%84%89%E1%85%AE%E1%86%AF).pdf\">https://deview.kr/data/deview/session/attach/1_Inside%20React%20(동시성을%20구현하는%20기술).pdf</a></li>\n<li><a href=\"https://yrnana.dev/post/2022-04-12-react-18/\">https://yrnana.dev/post/2022-04-12-react-18/</a></li>\n<li><a href=\"https://react.dev/reference/react/startTransition\">https://react.dev/reference/react/startTransition</a></li>\n<li><a href=\"https://react.dev/reference/react/useTransition\">https://react.dev/reference/react/useTransition</a></li>\n<li><a href=\"https://react.dev/reference/react/useDeferredValue\">https://react.dev/reference/react/useDeferredValue</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1concurrency%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1parallelism\">동시성(Concurrency)과 병렬성(Parallelism)</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B4%EA%B8%89%ED%95%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8urgent-updates%EC%99%80-%EC%A0%84%ED%99%98-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8transition-updates\">긴급한 업데이트(Urgent updates)와 전환 업데이트(Transition updates)</a></p>\n</li>\n<li>\n<p><a href=\"#react-18%EC%97%90%EC%84%9C-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%A0%8C%EB%8D%94%EB%A7%81\">React 18에서 동시성 렌더링</a></p>\n<ul>\n<li><a href=\"#starttransition-%ED%95%A8%EC%88%98\"><code class=\"language-text\">startTransition</code> 함수</a></li>\n<li><a href=\"#usetransition-%ED%9B%85\"><code class=\"language-text\">useTransition</code> 훅</a></li>\n<li><a href=\"#usedeferredvalue-%ED%9B%85\"><code class=\"language-text\">useDeferredValue</code> 훅</a></li>\n</ul>\n</li>\n</ul>","timeToRead":6,"excerpt":"TL;DR…","frontmatter":{"title":"[React] Concurrent Rendering - 동시성 렌더링","thumbnail":"react/react.png","summary":"React 18에서 추가된 기능 중 가장 중요한 것이 사용자 경험을 향상할 수 있는 동시성 렌더링입니다. 이번 포스트에서는 동시성이 무엇인지 그리고 동시성을 위해 추가된 startTransition 함수와 useTransition, useDeferredValue 훅을 살펴보도록 하겠습니다."},"fields":{"createdDate":"2023-10-24"}}},"pageContext":{"slug":"/tech/react/concurrent-rendering/","image":"react/react.png","next":{"frontmatter":{"title":"[React] Suspense"},"fields":{"slug":"/tech/react/suspense/"}},"previous":{"frontmatter":{"title":"[React] react-hook-form API 레퍼런스"},"fields":{"slug":"/tech/react/react-hook-form-api-reference/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}