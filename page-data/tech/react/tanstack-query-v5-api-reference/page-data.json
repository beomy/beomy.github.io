{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/react/tanstack-query-v5-api-reference/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181828","images":{"fallback":{"src":"/static/4fda5f70bb7ed7df9c12d984bb68bb88/f635c/tanstack-query-v5.png","srcSet":"/static/4fda5f70bb7ed7df9c12d984bb68bb88/a5da5/tanstack-query-v5.png 300w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/cadb4/tanstack-query-v5.png 750w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/feb73/tanstack-query-v5.png 1080w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/6032c/tanstack-query-v5.png 1366w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/3d4b2/tanstack-query-v5.png 1920w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/f635c/tanstack-query-v5.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/4fda5f70bb7ed7df9c12d984bb68bb88/29f5b/tanstack-query-v5.webp 300w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/11ba1/tanstack-query-v5.webp 750w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/089e1/tanstack-query-v5.webp 1080w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/ad4fd/tanstack-query-v5.webp 1366w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/d8a73/tanstack-query-v5.webp 1920w,\n/static/4fda5f70bb7ed7df9c12d984bb68bb88/a28c0/tanstack-query-v5.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p>2023년 10월 TanStack Query v5가 정식 버전으로 릴리즈 되었습니다. 이번 포스터에서는 TanStack Query v5의 React Query를 멋있게 사용할 수 있도록 React Query의 API를 살펴보도록 하겠습니다.</p>\n<h2 id=\"react-query-구조\" style=\"position:relative;\">React Query 구조<a href=\"#react-query-%EA%B5%AC%EC%A1%B0\" aria-label=\"react query 구조 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>React Query의 API는 서로 연관이 있는 부분들이 많아, React Query의 구조를 이해하면 API의 역할을 이해하는데 많은 도움을 줄 수 있습니다. 아래 그림은 React Query의 구조를 간단하게 나타낸 그림입니다.</p>\n<p><img src=\"/assets/img/posts/react/react_query_structure.png\" alt=\"React Query 구조\"></p>\n<h2 id=\"react-query-api-레퍼런스\" style=\"position:relative;\">React Query API 레퍼런스<a href=\"#react-query-api-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-label=\"react query api 레퍼런스 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>React Query는 다양한 API를 제공해 줍니다. 그중 <code class=\"language-text\">useQuery</code>, <code class=\"language-text\">useMutation</code>, <code class=\"language-text\">useQueryClient</code> 이 3개 훅은 자주 사용되기 때문에, 이 3개의 API는 자세히 살펴보는 것이 좋습니다.</p>\n<h3 id=\"usequery\" style=\"position:relative;\"><code class=\"language-text\">useQuery</code><a href=\"#usequery\" aria-label=\"usequery permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useQuery</code>는 React Query에서 가장 많이 사용되는 훅 중 하나입니다. <code class=\"language-text\">useQuery</code>를 통해 가져온 데이터는 캐시 됩니다. 또한 동일한 <code class=\"language-text\">queryKey</code>를 사용하는 <code class=\"language-text\">useQuery</code>가 동시에 여러 번 마운트 되면 최적화되어 한 번만 데이터를 요청합니다. <code class=\"language-text\">useQuery</code>는 API 서버에서 HTTP의 GET 메서드로 데이터를 가져오는 작업을 할 때 주로 사용됩니다.</p>\n<h4 id=\"타입-정보\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4\" aria-label=\"타입 정보 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">,</span> dataUpdatedAt<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> errorUpdatedAt<span class=\"token punctuation\">,</span>\n  failureCount<span class=\"token punctuation\">,</span> failureReason<span class=\"token punctuation\">,</span> fetchStatus<span class=\"token punctuation\">,</span>\n  isError<span class=\"token punctuation\">,</span> isFetched<span class=\"token punctuation\">,</span> isFetchedAfterMount<span class=\"token punctuation\">,</span>\n  isFetching<span class=\"token punctuation\">,</span> isInitialLoading<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">,</span>\n  isLoadingError<span class=\"token punctuation\">,</span> isPaused<span class=\"token punctuation\">,</span> isPending<span class=\"token punctuation\">,</span>\n  isPlaceholderData<span class=\"token punctuation\">,</span> isRefetchError<span class=\"token punctuation\">,</span>\n  isRefetching<span class=\"token punctuation\">,</span> isStale<span class=\"token punctuation\">,</span> isSuccess<span class=\"token punctuation\">,</span> refetch<span class=\"token punctuation\">,</span>\n  status<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  queryKey<span class=\"token punctuation\">,</span> queryFn<span class=\"token punctuation\">,</span> gcTime<span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">,</span>\n  networkMode<span class=\"token punctuation\">,</span> initialData<span class=\"token punctuation\">,</span>\n  initialDataUpdatedAt<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">,</span>\n  notifyOnChangeProps<span class=\"token punctuation\">,</span> placeholderData<span class=\"token punctuation\">,</span>\n  queryKeyHashFn<span class=\"token punctuation\">,</span> refetchInterval<span class=\"token punctuation\">,</span>\n  refetchIntervalInBackground<span class=\"token punctuation\">,</span>\n  refetchOnMount<span class=\"token punctuation\">,</span> refetchOnReconnect<span class=\"token punctuation\">,</span>\n  refetchOnWindowFocus<span class=\"token punctuation\">,</span> retry<span class=\"token punctuation\">,</span> retryOnMount<span class=\"token punctuation\">,</span>\n  retryDelay<span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">,</span> staleTime<span class=\"token punctuation\">,</span>\n  structuralSharing<span class=\"token punctuation\">,</span> throwOnError<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options\" style=\"position:relative;\">Options<a href=\"#options\" aria-label=\"options permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">queryKey: unknown[]</code> (<strong>필수</strong>)\n<ul>\n<li>다른 쿼리와 구분될 수 있는 유니크한 키입니다. 이 값은 쿼리의 해시 키로 사용됩니다.</li>\n<li>이 값이 변경되면 자동으로 데이터를 가져옵니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">queryFn: (context: QueryFunctionContext) => Promise&lt;TData></code> (<strong>필수</strong>, 단 <code class=\"language-text\">defaultOptions</code>에서 정의된 경우 생략 가능)\n<ul>\n<li>데이터를 요청하는 데 사용되는 함수입니다.</li>\n<li>파라미터로 <code class=\"language-text\">context</code>를 받습니다.\n<ul>\n<li><code class=\"language-text\">context.queryKey: QueryKey</code>\n<ul>\n<li><code class=\"language-text\">queryKey</code>로 전달한 값과 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context.signal?: AbortSignal</code>\n<ul>\n<li>네트워크 요청을 취소하기 위해 사용되는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\">AbortSignal</a> 객체입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context.meta: Recode&lt;string, unknown> | undefined</code>\n<ul>\n<li>쿼리에 대한 추가 정보가 담긴 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Promise</code>를 반환해야 합니다. <code class=\"language-text\">undefined</code>를 반환해서는 안됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">enabled: boolean</code>\n<ul>\n<li><code class=\"language-text\">false</code>으로 설정할 경우 쿼리는 자동으로 데이터를 가져오지 않습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">networkMode: 'online' | 'always' | 'offlineFirst</code> (default: <code class=\"language-text\">online</code>)\n<ul>\n<li><code class=\"language-text\">online</code>으로 설정할 경우 네트워크에 연결되어 있을 경우에 데이터를 요청합니다.</li>\n<li><code class=\"language-text\">always</code>로 설정할 경우 네트워크 상태와 상관없이 항상 데이터를 요청합니다.</li>\n<li><code class=\"language-text\">offlineFirst</code>로 설정할 경우 데이터를 한번 요청하고 재시도하지 않습니다. <a href=\"https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Offline_Service_workers\">offline-first PWA</a>나 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#the_cache-control_header\">Cache-Control 헤더</a>로 요청을 캐싱하는 경우 유용한 옵션입니다. 요청을 캐싱하였기 때문에 오프라인에서도 요청은 성공할 수 있습니다. 만약 Cache Miss 되어 요청이 실패되면 <code class=\"language-text\">online</code> 옵션처럼 동작하여 네트워크가 연결될 때까지 요청을 하지 않습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">retry: boolean | number | (failureCount: number, error: TError) => boolean</code> (default: CSR은 <code class=\"language-text\">3</code>, SSR은 <code class=\"language-text\">0</code>)\n<ul>\n<li><code class=\"language-text\">false</code>로 설정할 경우 요청이 실패하면 재시도하지 않습니다.</li>\n<li><code class=\"language-text\">true</code>로 설정할 경우 요청이 실패하면 성공할 때까지 재시도합니다.</li>\n<li><code class=\"language-text\">number</code>형태로 설정할 경우 설정한 값만큼 요청이 실패하면 재시도합니다.</li>\n<li>함수 형태로 설정할 경우 함수가 <code class=\"language-text\">true</code>를 반환하면 재시도하고 <code class=\"language-text\">false</code>를 반환하면 재시도하지 않습니다.\n<ul>\n<li><code class=\"language-text\">failureCount: number</code>는 실패한 횟수를 나타냅니다.</li>\n<li><code class=\"language-text\">error: TError</code>는 에러 정보를 담고 있는 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">retryOnMount: boolean</code> (default: <code class=\"language-text\">true</code>)\n<ul>\n<li><code class=\"language-text\">false</code>로 설정할 경우 실패했던 쿼리가 다시 마운트 되면 데이터 요청을 재시도하지 않습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">retryDelay: number | (retryAttempt: number, error: TError) => number</code>\n<ul>\n<li><code class=\"language-text\">number</code> 형태로 설정할 경우 설정한 ms 초 이후에 재시도합니다.</li>\n<li>함수 형태로 설정할 경우 함수가 반환하는 ms 초 이후에 재시도합니다.\n<ul>\n<li><code class=\"language-text\">retryAttempt: number</code>는 정수 값으로 아래와 같이 재시도할 시간을 계산하는 데 사용됩니다.\n<ul>\n<li><code class=\"language-text\">attempt => Math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000)</code></li>\n<li><code class=\"language-text\">attempt => attempt * 1000</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">error: TError</code>는 에러 정보를 담고 있는 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">staleTime: number | Infinity</code> (default: <code class=\"language-text\">0</code>)\n<ul>\n<li>가져온 데이터가 오래된 것으로 판단하는 ms 초입니다. 오래된 데이터로 판단되면 쿼리는 새로운 값을 가져옵니다.</li>\n<li><code class=\"language-text\">Infinity</code>로 설정한 경우 오래된 데이터로 판단하지 않아 최초 1회만 데이터를 가져오게 됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">gcTime: number | Infinity</code> (default: CSR은 <code class=\"language-text\">5 * 60 * 1000</code>(5분), SSR은 <code class=\"language-text\">Infinity</code>)\n<ul>\n<li>사용하지 않거나 비활성화된 캐시 데이터가 메모리에 남아 있는 ms 초입니다. 쿼리의 캐시가 사용되지 않거나 비활성화되면 이 ms 초가 지난 후에 가비지 컬렉션(Garbage Cllection)됩니다.</li>\n<li><code class=\"language-text\">Infinity</code>로 설정할 경우 가비지 켈렉션 되지 않아 캐시 데이터가 메모리에서 삭제되지 않습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">queryKeyHashFn: (queryKey: QueryKey) => string</code>\n<ul>\n<li><code class=\"language-text\">queryKey</code>를 사용하여 해시 키를 만들어 반환하는 함수입니다. 반환된 값은 쿼리의 해시 키로 사용됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">refetchInterval: number | false | ((query: Query) => number | false | undefined)</code>\n<ul>\n<li><code class=\"language-text\">number</code> 형태로 설정할 경우 설정한 ms 초 이후에 데이터를 다시 가져옵니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 즉시 데이터를 다시 가져옵니다.</li>\n<li>함수 형태로 설정할 경우 함수의 반환 값에 따라 데이터를 다시 가져옵니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">refetchIntervalInBackground: boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 <code class=\"language-text\">refetchInterval</code>를 사용하여 계속 데이터를 다시 가져오게 설정된 쿼리라면 브라우저의 탭이나 창이 백그라운드에 있는 동안에도 계속 데이터를 다시 가져옵니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">refetchOnMount: boolean | \"always\" | ((query: Query) => boolean | \"always\")</code> (default: <code class=\"language-text\">true</code>)\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 데이터가 오래되었다면 쿼리가 마운트 되면 데이터를 다시 가져옵니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 쿼리가 마운트 될 때 데이터를 다시 가져오지 않습니다.</li>\n<li><code class=\"language-text\">always</code>로 설정할 경우 쿼리가 마운트 될 때 항상 데이터를 다시 가져옵니다.</li>\n<li>함수 형태로 설정할 경우 함수의 반환 값에 따라 데이터를 다시 가져옵니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">refetchOnReconnect: boolean | \"always\" | ((query: Query) => boolean | \"always\")</code> (default: <code class=\"language-text\">true</code>)\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 네트워크가 다시 연결되면 데이터가 오래되었을 경우 데이터를 다시 가져옵니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 네트워크가 다시 연결되어도 데이터를 다시 가져오지 않습니다.</li>\n<li><code class=\"language-text\">always</code>로 설정할 경우 네트워크가 디시 연결되면 항상 데이터를 다시 가져옵니다.</li>\n<li>함수 형태로 설정할 경우 함수의 반환 값에 따라 데이터를 다시 가져옵니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">notifyOnChangeProps: string[] | \"all\" | (() => string[] | \"all\")</code>\n<ul>\n<li>쿼리의 반환 키 값을 배열로 전달합니다. 배열로 전달 한 키의 반환 값이 변경될 경우 컴포넌트가 재렌더링됩니다. 예를 들어, <code class=\"language-text\">['data', 'error']</code>로 설정할 경우 <code class=\"language-text\">data</code> 나 <code class=\"language-text\">error</code>의 값이 변경되면 컴포넌트가 재랜더링됩니다.</li>\n<li><code class=\"language-text\">all</code>로 설정할 경우 쿼리의 반환 값 중 하나라도 값이 변경될 경우 컴포넌트가 재렌더링됩니다.</li>\n<li>함수 형태로 설정할 경우 함수의 반환 값에 따라 컴포넌트가 재렌더링됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">select: (data: TData) => unknown</code>\n<ul>\n<li><code class=\"language-text\">queryFn</code> 함수에서 반환한 값을 가공할 때 사용되는 옵션입니다. 반환된 값이 <code class=\"language-text\">data</code>에 담기지만 쿼리 캐시에는 영향을 주지 않습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">initialData: TData | () => TData</code>\n<ul>\n<li>쿼리가 생성되거나 캐시 되지 않은 경우 이 값은 캐시 되어, 쿼리의 초기 데이터로 사용됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">initialDataUpdatedAt: number | (() => number | undefined)</code>\n<ul>\n<li><code class=\"language-text\">initialData</code>가 마지막으로 업데이트된 시간(ms)으로 사용됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">placeholderData: TData | (previousValue: TData | undefined; previousQuery: Query | undefined,) => TData</code>\n<ul>\n<li>이 값은 쿼리가 <code class=\"language-text\">pending</code> 상태일 때 placeholder로 사용할 수 있는 데이터로 사용됩니다. 이 값은 쿼리 캐시에 영향을 주지 않습니다.</li>\n<li>함수로 설정할 경우 함수의 첫 번째 파라미터는 이전에 가져온 쿼리 데이터이고 두 번째 파라미터는 이전에 완료된 쿼리 인스턴스입니다. 함수의 반환 값이 placeholder 데이터로 사용됩니다.</li>\n<li><code class=\"language-text\">initialData</code>와 함께 설정되어 있다면, <code class=\"language-text\">initialData</code>가 더 높은 우선순위를 가집니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">structuralSharing: boolean | (&lt;T>(oldData: T | undefined, newData: T) => T)</code> (default: <code class=\"language-text\">true</code>)\n<ul>\n<li><code class=\"language-text\">false</code>로 설정할 경우 쿼리가 가져온 데이터를 공유하지 않습니다.</li>\n<li>함수로 설정할 경우 함수의 첫 번째 파라미터는 이전에 가져온 쿼리 데이터이고 두 번째 파라미터는 새 쿼리 데이터입니다. 이 함수는 이전 데이터의 참조를 최대한 유지하면서 새로운 데이터를 반환하는 것이 좋습니다. 함수에서 반환한 데이터가 <code class=\"language-text\">data</code>로 사용됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">throwOnError: undefined | boolean | (error: TError, query: Query) => boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 쿼리에서 에러가 발생할 경우 가장 가까운 에러 바운더리(Error Boundary)로 에러를 전파합니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 쿼리에서 에러가 발생해도 에러 바운더리로 에러를 전파하지 않습니다.</li>\n<li>함수로 설정할 경우 첫 번째 파라미터로 에러 정보 두 번째 파라미터로 쿼리 정보가 담기고 이 값들로 에러 바운더리로 보낼지(<code class=\"language-text\">true</code>) 말지(<code class=\"language-text\">false</code>)를 결정하여 반환해야 합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">meta: Record&lt;string, unknown></code>\n<ul>\n<li>필요에 따라 쿼리 캐시에 저장할 수 있는 추가정보입니다. 이 값이 <code class=\"language-text\">queryFn</code>의 <code class=\"language-text\">context</code>의 <code class=\"language-text\">meta</code>에 전달됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">queryClient?: QueryClient</code>\n<ul>\n<li>커스텀한 쿼리 클라이언트를 지정할 수 있습니다. 이 값을 설정하지 않는다면 가장 가까운 콘텍스트의 쿼리 클라이언트가 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h5 id=\"placeholderdata-활용\" style=\"position:relative;\"><code class=\"language-text\">placeholderData</code> 활용<a href=\"#placeholderdata-%ED%99%9C%EC%9A%A9\" aria-label=\"placeholderdata 활용 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>React Query V4에서는 <code class=\"language-text\">keepPreviousData</code> 옵션으로 쿼리 키가 변경되어 새로운 데이터를 가져오는 동안에 이전 데이터를 유지하여 화면에 노출시킬 수 있었습니다. V5부터는 <code class=\"language-text\">keepPreviousData</code> 옵션이 없어지고 아래 코드와 같이 <code class=\"language-text\">placeholderData</code> 옵션이 그 기능을 대체합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> keepPreviousData<span class=\"token punctuation\">,</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">,</span> setPage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchProjects</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/projects?page='</span> <span class=\"token operator\">+</span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    isPending<span class=\"token punctuation\">,</span>\n    isError<span class=\"token punctuation\">,</span>\n    error<span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n    isFetching<span class=\"token punctuation\">,</span>\n    isPlaceholderData<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchProjects</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    placeholderData<span class=\"token operator\">:</span> keepPreviousData<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<blockquote>\n<h5 id=\"structural-sharing를-통한-최적화\" style=\"position:relative;\">Structural Sharing를 통한 최적화<a href=\"#structural-sharing%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"structural sharing를 통한 최적화 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>React Query는 새로운 데이터를 만들 때 가능한 한 기존의 데이터를 유지하려고 합니다. 아래 코드와 같이 응답받은 데이터가 있을 때,</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Learn React\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"active\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Learn React Query\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"todo\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>서버에서 <code class=\"language-text\">id</code> 1에 대한 값이 업데이트되었다면, React Query는 아래 코드와 같이 모든 데이터를 교체하지 않고 변경된 값만 교체하여 기존의 데이터는 유지합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  - <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Learn React\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"active\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  + <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Learn React\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"done\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Learn React Query\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"todo\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>React Query는 이전 데이터를 유지함으로 변경되지 않은 데이터를 사용하는 컴포넌트에서는 리렌더링이 발생하지 않도록 최적화합니다. 기존의 데이터를 유지하지 않고 항상 새로운 데이터로 사용하기 위해서는 <code class=\"language-text\">structuralSharing</code> 옵션을 <code class=\"language-text\">false</code>로 설정하면 됩니다.</p>\n</blockquote>\n<h5 id=\"returns\" style=\"position:relative;\">Returns<a href=\"#returns\" aria-label=\"returns permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">status: 'pending' | 'error' | 'success'</code>\n<ul>\n<li><code class=\"language-text\">pending</code>일 경우, 캐시 된 데이터가 없고 쿼리 시도가 아직 완료되지 않은 상태입니다.</li>\n<li><code class=\"language-text\">error</code>일 경우, 데이터를 가져올 때 에러가 발생한 상태입니다.</li>\n<li><code class=\"language-text\">success</code>일 경우, 데이터를 성공적으로 가져오거나, <code class=\"language-text\">enabled</code>가 <code class=\"language-text\">false</code>이면서 <code class=\"language-text\">initialData</code>가 설정된 상태입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isPending: boolean</code>\n<ul>\n<li><code class=\"language-text\">status</code>가 <code class=\"language-text\">pending</code>일 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isSuccess: boolean</code>\n<ul>\n<li><code class=\"language-text\">status</code>가 <code class=\"language-text\">success</code>일 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isError: boolean</code>\n<ul>\n<li><code class=\"language-text\">status</code>가 <code class=\"language-text\">error</code>일 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isLoadingError: boolean</code>\n<ul>\n<li>처음 데이터를 가져올 때 에러가 발생한 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isRefetchError: boolean</code>\n<ul>\n<li>데이터 다시 가져오기가 실패한 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">data: TData | undefined</code> (default: <code class=\"language-text\">undefined</code>)\n<ul>\n<li>쿼리가 마지막으로 성공적으로 가져온 데이터입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">dataUpdatedAt: number</code>\n<ul>\n<li>데이터를 성공적으로 가져온 경우(<code class=\"language-text\">status</code>가 <code class=\"language-text\">success</code>일 때) 타임스탬프입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">error: null | TError</code> (default: <code class=\"language-text\">null</code>)\n<ul>\n<li>쿼리에 에러가 발생한 경우 에러 정보를 담는 객체입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">errorUpdatedAt: number</code>\n<ul>\n<li>가장 최근에 에러가 발생했을 경우(<code class=\"language-text\">status</code>가 <code class=\"language-text\">error</code>일 때) 타임스탬프입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isStale: boolean</code>\n<ul>\n<li>캐시가 무효화 됐거나 <code class=\"language-text\">staleTime</code>이 지나 데이터가 오래된 것으로 판단될 때 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isPlaceholderData: boolean</code>\n<ul>\n<li><code class=\"language-text\">data</code> 값이 <code class=\"language-text\">placeholderData</code>일 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isFetched: boolean</code>\n<ul>\n<li>쿼리가 데이터를 가져온 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isFetchedAfterMount: boolean</code>\n<ul>\n<li>컴포넌트가 마운트 된 후 쿼리가 데이터를 가져온 경우 <code class=\"language-text\">true</code>입니다.</li>\n<li>이전에 캐시 된 데이터를 사용하고 싶지 않을 때 사용될 수 있습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">fetchStatus: 'fetching' | 'paused' | 'idle'</code>\n<ul>\n<li><code class=\"language-text\">fetching</code>일 경우, <code class=\"language-text\">queryFn</code>이 실행 중이거나, 초기 <code class=\"language-text\">status</code>가 <code class=\"language-text\">pending</code> 상태이거나, 백그라운드에서 데이터를 가져오는 상태입니다.</li>\n<li><code class=\"language-text\">paused</code>일 경우, 쿼리가 데이터를 가져오려고 했지만 중지된 상태입니다. 대표적으로 네트워크가 끊겨 쿼리가 중지됐을 때 <code class=\"language-text\">paused</code> 상태입니다.</li>\n<li><code class=\"language-text\">idle</code>일 경우, <code class=\"language-text\">fetching</code> 상태도 <code class=\"language-text\">paused</code> 상태도 아닌 상태입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isFetching: boolean</code>\n<ul>\n<li><code class=\"language-text\">fetchStatus</code>가 <code class=\"language-text\">fetching</code>일 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isPaused: boolean</code>\n<ul>\n<li><code class=\"language-text\">fetchStatus</code>가 <code class=\"language-text\">paused</code>일 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isRefetching: boolean</code>\n<ul>\n<li>초기 <code class=\"language-text\">pending</code> 상태가 아니며 백그라운드에서 데이터를 가져오는 중일 때 <code class=\"language-text\">true</code>입니다.</li>\n<li><code class=\"language-text\">isFetching &amp;&amp; !isPending</code>와 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isLoading: boolean</code>\n<ul>\n<li>쿼리가 처음으로 데이터를 가져오는 중일 때 <code class=\"language-text\">true</code>입니다.</li>\n<li><code class=\"language-text\">isFetching &amp;&amp; isPending</code>와 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">failureCount: number</code>\n<ul>\n<li>쿼리가 데이터 가져오기를 실패한 횟수입니다. 쿼리가 성공적으로 데이터를 가져온 경우 <code class=\"language-text\">0</code>으로 초기화됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">failureReason: null | TError</code>\n<ul>\n<li>쿼리가 데이터를 가져오기 재시도를 실패했을 경우 에러 정보가 담깁니다. 쿼리가 성공적으로 데이터를 가져온 경우 <code class=\"language-text\">null</code>로 초기화 됩니다.</li>\n<li>예를 들어 <code class=\"language-text\">retry</code>가 <code class=\"language-text\">5</code>로 설정되어 있을 경우 쿼리가 데이터 가져오기 재시도를 실패하면 <code class=\"language-text\">failureReason</code>에 에러 정보가 담깁니다. 5번의 재시도가 모두 실패할 경우 <code class=\"language-text\">error</code> 객체에 에러 정보가 담기게 됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">errorUpdateCount: number</code>\n<ul>\n<li>쿼리가 데이터 가져오기를 실패한 총횟수입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">refetch: (options: { throwOnError: boolean, cancelRefetch: boolean }) => Promise&lt;UseQueryResult></code>\n<ul>\n<li>수동으로 쿼리가 데이터를 다시 가져올 수 있게 하는 함수입니다.</li>\n<li><code class=\"language-text\">options.throwOnError: boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 다시 가져오기가 실패하면 가장 가까운 에러 바운더리로 에러를 전파합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">options.cancelRefetch: boolean</code> (default: <code class=\"language-text\">true</code>)\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 쿼리가 데이터를 가져오는 중일 경우 진행 중이던 요청을 취소하고 재요청합니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 쿼리가 데이터를 가져오는 중일 경우 데이터를 재요청하지 않습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/zjfrnf?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useQuery\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"usequeries\" style=\"position:relative;\"><code class=\"language-text\">useQueries</code><a href=\"#usequeries\" aria-label=\"usequeries permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useQuery</code>와 동일하게 데이터를 가져오기 위해 사용되는 쿼리입니다. 여러 개의 <code class=\"language-text\">useQuery</code>를 사용하고 싶을 경우 <code class=\"language-text\">useQuery</code>를 여러 번 선언할 필요 없이 <code class=\"language-text\">useQueries</code>로 대신할 수 있습니다.</p>\n<h4 id=\"타입-정보-1\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-1\" aria-label=\"타입 정보 1 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">useQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  queries<span class=\"token operator\">:</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchPost</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> staleTime<span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-1\" style=\"position:relative;\">Options<a href=\"#options-1\" aria-label=\"options 1 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">queries</code>\n<ul>\n<li><a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a> 중 <code class=\"language-text\">queryClient</code>를 제외한 옵션을 사용할 쿼리 수만큼 배열에 담아 전달하면 됩니다. 또한 렌더링 할 때마다 호출해야 하는 쿼리의 수가 달라질 수 있기 때문에 <code class=\"language-text\">placeholderData</code> 함수는 이전 데이터를 파라미터로 전달하지 않습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">queryClient?: QueryClient</code>\n<ul>\n<li>커스텀한 쿼리 클라이언트를 지정할 수 있습니다. 이 값을 설정하지 않는다면 가장 가까운 콘텍스트의 쿼리 클라이언트가 사용됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">combine?: (result: UseQueriesResults) => TCombinedResult</code>\n<ul>\n<li>이 옵션을 사용하면 여러 쿼리의 결과 값을 단일 값으로 합칠 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns-1\" style=\"position:relative;\">Returns<a href=\"#returns-1\" aria-label=\"returns 1 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><code class=\"language-text\">useQueries</code> 훅의 반환 값은 <a href=\"/tech/react/tanstack-query-v5-api-reference/#returns\"><code class=\"language-text\">useQuery</code> 훅의 반환 값</a>과 동일한 값을 <code class=\"language-text\">queries</code>에 선언한 쿼리 순서대로 배열 형태로 반환합니다.</p>\n<h4 id=\"예제-1\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-1\" aria-label=\"예제 1 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/gmvk2m?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useQueries\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"useinfinitequery\" style=\"position:relative;\"><code class=\"language-text\">useInfiniteQuery</code><a href=\"#useinfinitequery\" aria-label=\"useinfinitequery permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useInfiniteQuery</code> 훅 역시 <code class=\"language-text\">useQuery</code>나 <code class=\"language-text\">useQueries</code> 훅과 같이 데이터를 가져오기 위해 사용되는 쿼리입니다. 무한 스크롤을 통한 데이터 무한 로딩 등을 구현할 때 종종 사용되는 훅입니다.</p>\n<h4 id=\"타입-정보-2\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-2\" aria-label=\"타입 정보 2 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  fetchNextPage<span class=\"token punctuation\">,</span>\n  fetchPreviousPage<span class=\"token punctuation\">,</span>\n  hasNextPage<span class=\"token punctuation\">,</span>\n  hasPreviousPage<span class=\"token punctuation\">,</span>\n  isFetchingNextPage<span class=\"token punctuation\">,</span>\n  isFetchingPreviousPage<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>result\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInfiniteQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  queryKey<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pageParam <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchPage</span><span class=\"token punctuation\">(</span>pageParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  initialPageParam<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>options<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getNextPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>lastPage<span class=\"token punctuation\">,</span> allPages<span class=\"token punctuation\">,</span> lastPageParam<span class=\"token punctuation\">,</span> allPageParams<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    lastPage<span class=\"token punctuation\">.</span>nextCursor<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getPreviousPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>firstPage<span class=\"token punctuation\">,</span> allPages<span class=\"token punctuation\">,</span> firstPageParam<span class=\"token punctuation\">,</span> allPageParams<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    firstPage<span class=\"token punctuation\">.</span>prevCursor<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-2\" style=\"position:relative;\">Options<a href=\"#options-2\" aria-label=\"options 2 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><code class=\"language-text\">useInfiniteQuery</code> 훅의 옵션은 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a>에 아래 목록의 옵션이 추가됩니다.</p>\n<ul>\n<li><code class=\"language-text\">queryFn: (context: QueryFunctionContext) => Promise&lt;TData></code> (<strong>필수</strong>, 단 <code class=\"language-text\">defaultOptions</code>에서 정의된 경우 생략 가능)\n<ul>\n<li><code class=\"language-text\">useQuery</code>에서 사용하는 <code class=\"language-text\">queryFn</code>와 동일하지만 <code class=\"language-text\">context.pageParam: TPageParam</code>와 <code class=\"language-text\">context.direction: 'forward' | 'backward'</code>를 추가로 사용할 수 있습니다.\n<ul>\n<li><code class=\"language-text\">context.pageParam: TPageParam</code>\n<ul>\n<li>현재 페이지(현재 <code class=\"language-text\">data</code>)를 가져오기 위해 사용된 파라미터입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context.direction: 'forward' | 'backward'</code>\n<ul>\n<li>현재 페이지를 가져올 방향입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">initialPageParam: TPageParam</code> (<strong>필수</strong>)\n<ul>\n<li>첫 페이지를 가져올 때 사용할 파라미터입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => TPageParam | undefined | null</code> (<strong>필수</strong>)\n<ul>\n<li>최근 페이지(<code class=\"language-text\">lastPage</code>), 모든 페이지(<code class=\"language-text\">allPages</code>), 최근 파마리터(<code class=\"language-text\">lastPageParam</code>), 모든 파라미터(<code class=\"language-text\">allPageParams</code>) 이 데이터를 사용하여 다음 페이지를 가져오는 데 사용되는 파라미터를 반환해야 하는 함수입니다.</li>\n<li><code class=\"language-text\">undefined</code>나 <code class=\"language-text\">null</code>을 반환할 경우 다음 페이지가 없는 것으로 판단합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getPreviousPageParam: (firstPage, allPages, firstPageParam, allPageParams) => TPageParam | undefined | null</code>\n<ul>\n<li>최근 페이지(<code class=\"language-text\">firstPage</code>), 모든 페이지(<code class=\"language-text\">allPages</code>), 첫 파마리터(<code class=\"language-text\">firstPageParam</code>), 모든 파라미터(<code class=\"language-text\">allPageParams</code>) 이 데이터를 사용하여 이전 페이지를 가져오는 데 사용되는 파라미터를 반환해야 하는 함수입니다.</li>\n<li><code class=\"language-text\">undefined</code>나 <code class=\"language-text\">null</code>을 반환할 경우 이전 페이지가 없는 것으로 판단합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">maxPages: number | undefined</code> (default: <code class=\"language-text\">undefined</code>)\n<ul>\n<li><code class=\"language-text\">data</code> 반환 값에 저장할 최대 페이지 수입니다.</li>\n<li>최대 페이지 수에 도달하면 방향에 따라 첫 번째 또는 마지막 페이지가 제거됩니다.</li>\n<li><code class=\"language-text\">undefined</code>나 <code class=\"language-text\">0</code>이 설정된 경우 저장할 수 있는 페이지 수의 제한이 없게 됩니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns-2\" style=\"position:relative;\">Returns<a href=\"#returns-2\" aria-label=\"returns 2 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><code class=\"language-text\">useInfiniteQuery</code> 훅의 반환 값은 아래 목록을 제외하고 <code class=\"language-text\">useQuery</code>의 반환 값과 동일합니다.</p>\n<ul>\n<li><code class=\"language-text\">data.pages: TData[]</code>\n<ul>\n<li>모든 페이지의 데이터가 배열 형태로 저장됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">data.pageParams: unknown[]</code>\n<ul>\n<li>페이지를 가져오기 위해 사용된 모든 파라미터 데이터가 배열 형태로 저장됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isFetchingNextPage: boolean</code>\n<ul>\n<li><code class=\"language-text\">fetchNextPage</code> 함수로 다음 페이지를 가져오는 동안 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isFetchingPreviousPage: boolean</code>\n<ul>\n<li><code class=\"language-text\">fetchPreviousPage</code> 함수로 이전 페이지를 가져오는 동안 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">fetchNextPage: (options?: FetchNextPageOptions) => Promise&lt;UseInfiniteQueryResult></code>\n<ul>\n<li>다음 페이지 데이터를 가져오는 함수입니다.</li>\n<li><code class=\"language-text\">options.cancelRefetch: boolean</code> (default: <code class=\"language-text\">true</code>)\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 쿼리가 데이터를 가져오는 중일 경우 진행 중이던 요청을 취소하고 재요청합니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 쿼리가 데이터를 가져오는 중일 경우 데이터를 재요청하지 않습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">fetchPreviousPage: (options?: FetchPreviousPageOptions) => Promise&lt;UseInfiniteQueryResult></code>\n<ul>\n<li>이전 페이지 데이터를 가져오는 함수입니다.</li>\n<li><code class=\"language-text\">options.cancelRefetch: boolean</code> (default: <code class=\"language-text\">true</code>)\n<ul>\n<li><code class=\"language-text\">fetchNextPage</code>의 <code class=\"language-text\">options.cancelRefetch: boolean</code>와 동일합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">hasNextPage: boolean</code>\n<ul>\n<li>다음 페이지가 있는 경우 <code class=\"language-text\">true</code>입니다.</li>\n<li>다음 페이지가 없는 경우, 즉 <code class=\"language-text\">getNextPageParam</code> 함수가 <code class=\"language-text\">undefined</code>나 <code class=\"language-text\">null</code>을 반환할 경우 <code class=\"language-text\">false</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">hasPreviousPage: boolean</code>\n<ul>\n<li>이전 페이지가 있는 경우 <code class=\"language-text\">true</code>입니다.</li>\n<li>이전 페이지가 없는 경우, 즉 <code class=\"language-text\">getPreviousPageParam</code> 함수가 <code class=\"language-text\">undefined</code>나 <code class=\"language-text\">null</code>을 반환할 경우 <code class=\"language-text\">false</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isRefetching: boolean</code>\n<ul>\n<li>초기 <code class=\"language-text\">pending</code>, 다음/이전 데이터를 가져오는 중을 제외하고 백그라운드에서 데이터를 가져오는 중일 경우 <code class=\"language-text\">true</code>입니다.</li>\n<li><code class=\"language-text\">isFetching &amp;&amp; !isPending &amp;&amp; !isFetchingNextPage &amp;&amp; !isFetchingPreviousPage</code>와 동일한 값입니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-2\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-2\" aria-label=\"예제 2 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/m9sfx3?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useInfiniteQuery\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"usemutation\" style=\"position:relative;\"><code class=\"language-text\">useMutation</code><a href=\"#usemutation\" aria-label=\"usemutation permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useMutation</code> 역시 React Query에서 가장 많이 사용되는 훅 중 하나입니다. <code class=\"language-text\">useMutation</code>은 API 서버에 데이터를 저장하거나 업데이트, 삭제 하는 등의 데이터에 영향을 주는 HTTP의 POST, PUT, DELETE 메서드에 주로 사용됩니다.</p>\n<h4 id=\"타입-정보-3\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-3\" aria-label=\"타입 정보 3 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> isError<span class=\"token punctuation\">,</span> isIdle<span class=\"token punctuation\">,</span>\n  isPending<span class=\"token punctuation\">,</span> isPaused<span class=\"token punctuation\">,</span> isSuccess<span class=\"token punctuation\">,</span>\n  failureCount<span class=\"token punctuation\">,</span> failureReason<span class=\"token punctuation\">,</span>\n  mutate<span class=\"token punctuation\">,</span> mutateAsync<span class=\"token punctuation\">,</span> reset<span class=\"token punctuation\">,</span>\n  status<span class=\"token punctuation\">,</span> submittedAt<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mutationFn<span class=\"token punctuation\">,</span> gcTime<span class=\"token punctuation\">,</span>\n  mutationKey<span class=\"token punctuation\">,</span> networkMode<span class=\"token punctuation\">,</span>\n  onError<span class=\"token punctuation\">,</span> onMutate<span class=\"token punctuation\">,</span> onSettled<span class=\"token punctuation\">,</span>\n  onSuccess<span class=\"token punctuation\">,</span> retry<span class=\"token punctuation\">,</span> retryDelay<span class=\"token punctuation\">,</span>\n  throwOnError<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span>variables<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  onError<span class=\"token punctuation\">,</span>\n  onSettled<span class=\"token punctuation\">,</span>\n  onSuccess<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-3\" style=\"position:relative;\">Options<a href=\"#options-3\" aria-label=\"options 3 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">mutationFn: (variables: TVariables) => Promise&lt;TData></code> (<strong>필수</strong>, 단 <code class=\"language-text\">defaultOptions</code>에서 정의된 경우 생략 가능)\n<ul>\n<li>비동기 작업을 수행하고 <code class=\"language-text\">Promise</code>를 반환하는 함수입니다.</li>\n<li><code class=\"language-text\">variables: TVariables</code>\n<ul>\n<li>반환 값인 <code class=\"language-text\">mutate</code> 함수를 호출할 때 전달되는 파라미터입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">gcTime: number | Infinity</code>\n<ul>\n<li><code class=\"language-text\">useQuery</code>의 <code class=\"language-text\">gcTime</code>과 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">mutationKey: unknown[]</code>\n<ul>\n<li>다른 Mutation과 구분될 수 있는 유니크한 키입니다. 쿼리의 <code class=\"language-text\">queryKey</code>와는 다르게 필수값이 아닙니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">networkMode: 'online' | 'always' | 'offlineFirst</code> (default: <code class=\"language-text\">online</code>)\n<ul>\n<li><code class=\"language-text\">useQuery</code>의 <code class=\"language-text\">networkMode</code>과 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onMutate: (variables: TVariables) => Promise&lt;TContext | void> | TContext | void</code>\n<ul>\n<li><code class=\"language-text\">mutationFn</code>이 실행되기 전에 실행됩니다.</li>\n<li><code class=\"language-text\">variables: TVariables</code>\n<ul>\n<li><code class=\"language-text\">mutationFn</code> 함수의 파라미터와 동일한 값을 파라미터로 전달받습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onMutate</code> 함수는 <a href=\"/tech/react/tanstack-query-v4/#%EC%BF%BC%EB%A6%AC-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">낙관적 업데이트(optimistic updates)</a>에 사용하기 유용합니다. 반환 값은 <code class=\"language-text\">onError</code>와 <code class=\"language-text\">onSettled</code> 함수에 전달되어 mutation 실패 시 낙관적 업데이트를 롤백할 때 사용할 수 있습니다.\n<ul>\n<li>낙관적 업데이트란 mutation이 성공할 것이라 판단하여 수정된 결과를 응답받기 전, 요청한 데이터를 사용하여 업데이트하는 것을 말합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onSuccess: (data: TData, variables: TVariables, context?: TContext) => Promise&lt;unknown> | unknown</code>\n<ul>\n<li><code class=\"language-text\">mutaionFn</code>이 성공할 경우 실행됩니다.</li>\n<li><code class=\"language-text\">Promise</code>를 반환한 경우 <code class=\"language-text\">resolved</code> 될 때까지 이후 작업(<code class=\"language-text\">onSettled</code>, <code class=\"language-text\">mutate</code> 함수의 <code class=\"language-text\">onSuccess</code>와 <code class=\"language-text\">onError</code>, <code class=\"language-text\">onSettled</code> 콜백 함수 등)들이 진행되지 않습니다.</li>\n<li><code class=\"language-text\">data: TData</code>\n<ul>\n<li><code class=\"language-text\">mutationFn</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: TVariables</code>\n<ul>\n<li><code class=\"language-text\">mutate</code> 함수에 전달한 <code class=\"language-text\">variables</code> 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context?: TContext</code>\n<ul>\n<li><code class=\"language-text\">onMutate</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onError: (err: TError, variables: TVariables, context?: TContext) => Promise&lt;unknown> | unknown</code>\n<ul>\n<li><code class=\"language-text\">mutationFn</code>에서 에러가 발생할 경우 실행됩니다.</li>\n<li><code class=\"language-text\">Promise</code>를 반환한 경우 <code class=\"language-text\">resolved</code> 될 때까지 이후 작업(<code class=\"language-text\">onSettled</code>, <code class=\"language-text\">mutate</code> 함수의 <code class=\"language-text\">onSuccess</code>와 <code class=\"language-text\">onError</code>, <code class=\"language-text\">onSettled</code> 콜백 함수 등)들이 진행되지 않습니다.</li>\n<li><code class=\"language-text\">err: TError</code>\n<ul>\n<li>발생한 에러 정보입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: TVariables</code>\n<ul>\n<li><code class=\"language-text\">mutate</code> 함수에 전달한 <code class=\"language-text\">variables</code> 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context?: TContext</code>\n<ul>\n<li><code class=\"language-text\">onMutate</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onSettled: (data: TData, error: TError, variables: TVariables, context?: TContext) => Promise&lt;unknown> | unknown</code>\n<ul>\n<li><code class=\"language-text\">mutationFn</code>이 성공하거나 실패할 경우 실행됩니다.</li>\n<li><code class=\"language-text\">Promise</code>를 반환한 경우 <code class=\"language-text\">resolved</code> 될 때까지 이후 작업(<code class=\"language-text\">mutate</code> 함수의 <code class=\"language-text\">onSuccess</code>와 <code class=\"language-text\">onError</code>, <code class=\"language-text\">onSettled</code> 콜백 함수 등)들이 진행되지 않습니다.</li>\n<li><code class=\"language-text\">data: TData</code>\n<ul>\n<li><code class=\"language-text\">mutaionFn</code>이 성공할 경우 <code class=\"language-text\">mutaionFn</code>의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">err: TError</code>\n<ul>\n<li><code class=\"language-text\">mutaionFn</code>이 실패할 경우 발생한 에러 정보입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: TVariables</code>\n<ul>\n<li><code class=\"language-text\">mutate</code> 함수에 전달한 <code class=\"language-text\">variables</code> 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context?: TContext</code>\n<ul>\n<li><code class=\"language-text\">onMutate</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">retry: boolean | number | (failureCount: number, error: TError) => boolean</code> (default: <code class=\"language-text\">0</code>)\n<ul>\n<li><code class=\"language-text\">useQuery</code>의 <code class=\"language-text\">retry</code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">retryDelay: number | (retryAttempt: number, error: TError) => number</code>\n<ul>\n<li><code class=\"language-text\">useQuery</code>의 <code class=\"language-text\">retryDelay</code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">throwOnError: undefined | boolean | (error: TError) => boolean</code>\n<ul>\n<li><code class=\"language-text\">useQuery</code>의 <code class=\"language-text\">throwOnError</code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">meta: Record&lt;string, unknown></code>\n<ul>\n<li>필요에 따라 Mutation 캐시에 저장할 수 있는 추가정보입니다. <code class=\"language-text\">MutationCache</code>의 <code class=\"language-text\">onError</code>, <code class=\"language-text\">onSuccess</code>와 같이 <code class=\"language-text\">mutation</code>을 사용할 수 있다면 <code class=\"language-text\">meta</code>를 사용할 수 있습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">queryClient?: QueryClient</code>\n<ul>\n<li><code class=\"language-text\">useQuery</code>의 <code class=\"language-text\">queryClient</code>와 동일합니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns-3\" style=\"position:relative;\">Returns<a href=\"#returns-3\" aria-label=\"returns 3 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">mutate: (variables: TVariables, { onSuccess, onSettled, onError }) => void</code>\n<ul>\n<li>변경할 데이터를 파라미터로 전달하여 데이터 변경을 수행하는 함수입니다. 두 번째 파라미터는 옵션 정보로, 콜백 함수를 정의할 수 있습니다.</li>\n<li><code class=\"language-text\">variables: TVariables</code>\n<ul>\n<li><code class=\"language-text\">mutationFn</code>의 <code class=\"language-text\">variables</code> 파라미터로 전달됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onSuccess: (data: TData, variables: TVariables, context: TContext) => void</code>\n<ul>\n<li>Mutation이 성공했을 때 호출되는 콜백함수입니다.</li>\n<li><code class=\"language-text\">data: TData</code>\n<ul>\n<li><code class=\"language-text\">mutationFn</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: TVariables</code>\n<ul>\n<li><code class=\"language-text\">mutate</code> 함수에 전달한 <code class=\"language-text\">variables</code> 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context: TContext</code>\n<ul>\n<li><code class=\"language-text\">onMutate</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onError: (err: TError, variables: TVariables, context: TContext | undefined) => void</code>\n<ul>\n<li>Mutation이 실패했을 때 호출되는 콜백함수입니다.</li>\n<li><code class=\"language-text\">err: TError</code>\n<ul>\n<li><code class=\"language-text\">mutaionFn</code>이 실패할 경우 발생한 에러 정보입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: TVariables</code>\n<ul>\n<li><code class=\"language-text\">mutate</code> 함수에 전달한 <code class=\"language-text\">variables</code> 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context: TContext | undefined</code>\n<ul>\n<li><code class=\"language-text\">onMutate</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onSettled: (data: TData | undefined, error: TError | null, variables: TVariables, context: TContext | undefined) => void</code>\n<ul>\n<li>Mutation이 성공하거나 실패할 경우 실행됩니다.</li>\n<li><code class=\"language-text\">data: TData | undefined</code>\n<ul>\n<li><code class=\"language-text\">mutaionFn</code>이 성공할 경우 <code class=\"language-text\">mutaionFn</code>의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">error: TError | null</code>\n<ul>\n<li><code class=\"language-text\">mutaionFn</code>이 실패할 경우 발생한 에러 정보입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: TVariables</code>\n<ul>\n<li><code class=\"language-text\">mutate</code> 함수에 전달한 <code class=\"language-text\">variables</code> 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context: TContext | undefined</code>\n<ul>\n<li><code class=\"language-text\">onMutate</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">mutateAsync: (variables: TVariables, { onSuccess, onSettled, onError }) => Promise&lt;TData></code>\n<ul>\n<li><code class=\"language-text\">mutate</code> 함수와 동일한 기능을 하는 async 함수입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">status: 'idle' | 'pending' | 'error' | 'success'</code>\n<ul>\n<li><code class=\"language-text\">idle</code>인 경우, Mutation 함수가 실행되기 전 상태입니다.</li>\n<li><code class=\"language-text\">pending</code>인 경우, Mutation 함수가 실행 중인 상태입니다.</li>\n<li><code class=\"language-text\">error</code> 인 경우, Mutation 함수에서 에러가 발생한 상태입니다.</li>\n<li><code class=\"language-text\">success</code>인 경우, Mutation 함수가 성공한 상태입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isIdle: boolean</code>\n<ul>\n<li><code class=\"language-text\">status</code>가 <code class=\"language-text\">idle</code>인 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isPending: boolean</code>\n<ul>\n<li><code class=\"language-text\">status</code>가 <code class=\"language-text\">pending</code>인 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isError: boolean</code>\n<ul>\n<li><code class=\"language-text\">status</code>가 <code class=\"language-text\">error</code>인 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isSuccess: boolean</code>\n<ul>\n<li><code class=\"language-text\">status</code>가 <code class=\"language-text\">success</code>인 경우 <code class=\"language-text\">true</code>입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isPaused: boolean</code>\n<ul>\n<li>Mutation이 중지된 상태입니다. 대표적으로 네트워크가 끊겨 Mutation이 중지됐을 때 <code class=\"language-text\">paused</code> 상태입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">data: undefined | unknown</code> (default: <code class=\"language-text\">undefined</code>)\n<ul>\n<li>가장 최근에 성공한 Mutation의 반환 값을 담습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">error: null | TError</code>\n<ul>\n<li>Mutation이 실패했을 경우 에러 정보가 담긴 객체입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">reset: () => void</code>\n<ul>\n<li>Mutation의 상태를 초기화하는 함수입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">failureReason: null | TError</code>\n<ul>\n<li>Mutation 재시도를 실패했을 경우 에러 정보가 담깁니다. Mutation이 성공한 경우 <code class=\"language-text\">null</code>로 초기화 됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">submittedAt: number</code> (default: <code class=\"language-text\">0</code>)\n<ul>\n<li>Mutation이 실행된 시점의 타입스탬프입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: undefined | TVariables</code> (default: <code class=\"language-text\">undefined</code>)\n<ul>\n<li><code class=\"language-text\">mutationFn</code> 함수의 파라미터로 전달된 <code class=\"language-text\">variables</code> 값입니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-3\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-3\" aria-label=\"예제 3 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/7cjzgh?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useMutation\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"useisfetching\" style=\"position:relative;\"><code class=\"language-text\">useIsFetching</code><a href=\"#useisfetching\" aria-label=\"useisfetching permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useIsFetching</code> 훅은 데이터를 가져오는 중인 쿼리의 수를 반환합니다.</p>\n<h4 id=\"타입-정보-4\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-4\" aria-label=\"타입 정보 4 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useIsFetching <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n<span class=\"token comment\">// How many queries are fetching?</span>\n<span class=\"token keyword\">const</span> isFetching <span class=\"token operator\">=</span> <span class=\"token function\">useIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// How many queries matching the posts prefix are fetching?</span>\n<span class=\"token keyword\">const</span> isFetchingPosts <span class=\"token operator\">=</span> <span class=\"token function\">useIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-4\" style=\"position:relative;\">Options<a href=\"#options-4\" aria-label=\"options 4 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">filters?: QueryFilters</code>\n<ul>\n<li><code class=\"language-text\">filters.queryKey?: QueryKey</code>\n<ul>\n<li>찾으려고 하는 쿼리의 쿼리 키입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.exact?: boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 정확히 일치하는 쿼리를 찾습니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 설정한 <code class=\"language-text\">filters.queryKey</code>가 포함되는 쿼리를 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.type?: 'active' | 'inactive' | 'all'</code> (default: <code class=\"language-text\">all</code>)\n<ul>\n<li><code class=\"language-text\">active</code>로 설정할 경우 활성화된 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">inactive</code>로 설정할 경우 비활성화된 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">all</code>로 설정할 경우 모든 쿼리 중에 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.stale?: boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 오래된(stale) 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 신선한(fresh) 쿼리 중에 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.fetchStatus?: 'fetching' | 'paused' | 'idle'</code>\n<ul>\n<li><code class=\"language-text\">fetching</code>으로 설정할 경우 가져오는 중인 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">paused</code>로 설정할 경우 데이터를 가져오려고 했지만 일시 중단된 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">idle</code>로 설정할 경우 데이터를 가져온 적이 없는 쿼리 중에 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.predicate?: (query: Query) => boolean</code>\n<ul>\n<li>최종 필터로 사용되는 함수입니다. 다른 필터를 정의하지 않으면 모든 쿼리 중에 찾습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">queryClient?: QueryClient</code>\n<ul>\n<li>커스텀한 쿼리 클라이언트를 지정할 수 있습니다. 이 값을 설정하지 않는다면 가장 가까운 콘텍스트의 쿼리 클라이언트가 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns-4\" style=\"position:relative;\">Returns<a href=\"#returns-4\" aria-label=\"returns 4 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">isFetching: number</code>\n<ul>\n<li>데이터를 가져오는 중인 쿼리의 수입니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-4\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-4\" aria-label=\"예제 4 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/cq2gkp?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useIsFetching\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"useismutating\" style=\"position:relative;\"><code class=\"language-text\">useIsMutating</code><a href=\"#useismutating\" aria-label=\"useismutating permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useIsMutating</code> 훅은 Mutation 중인 수를 반환합니다.</p>\n<h4 id=\"타입-정보-5\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-5\" aria-label=\"타입 정보 5 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useIsMutating <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n<span class=\"token comment\">// How many mutations are fetching?</span>\n<span class=\"token keyword\">const</span> isMutating <span class=\"token operator\">=</span> <span class=\"token function\">useIsMutating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// How many mutations matching the posts prefix are fetching?</span>\n<span class=\"token keyword\">const</span> isMutatingPosts <span class=\"token operator\">=</span> <span class=\"token function\">useIsMutating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mutationKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-5\" style=\"position:relative;\">Options<a href=\"#options-5\" aria-label=\"options 5 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">filters?: MutationFilters</code>\n<ul>\n<li><code class=\"language-text\">filters.mutationKey?: MutationKey</code>\n<ul>\n<li>찾으려고 하는 Mutation의 키입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.exact?: boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 정확히 일치하는 Mutation을 찾습니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 설정한 <code class=\"language-text\">filters.mutationKey</code>가 포함되는 Mutation을 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.status?: 'idle' | 'pending' | 'error' | 'success'</code>\n<ul>\n<li><code class=\"language-text\">idle</code>인 경우 실행되기 전인 Mutation 중에 찾습니다.</li>\n<li><code class=\"language-text\">pending</code>인 경우 실행 중인 Mutation 중에 찾습니다.</li>\n<li><code class=\"language-text\">error</code> 인 경우 에러가 발생한 Mutation 중에 찾습니다.</li>\n<li><code class=\"language-text\">success</code>인 경우 성공한 Mutation 중에 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.predicate?: (mutation: Mutation) => boolean</code>\n<ul>\n<li>최종 필터로 사용되는 함수입니다. 다른 필터를 정의하지 않으면 모든 Mutation 중에 찾습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">queryClient?: QueryClient</code>\n<ul>\n<li>커스텀한 쿼리 클라이언트를 지정할 수 있습니다. 이 값을 설정하지 않는다면 가장 가까운 콘텍스트의 쿼리 클라이언트가 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns-5\" style=\"position:relative;\">Returns<a href=\"#returns-5\" aria-label=\"returns 5 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">isMutating: number</code>\n<ul>\n<li>Mutation 중인 숫자입니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-5\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-5\" aria-label=\"예제 5 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/rzm4tc?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useIsMutating\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"querycache\" style=\"position:relative;\"><code class=\"language-text\">QueryCache</code><a href=\"#querycache\" aria-label=\"querycache permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">QueryCache</code>는 쿼리를 저장하는 저장소입니다. 쿼리에 포함된 데이터, 메타 정보, 쿼리의 상태가 저장됩니다. 보통 아래 코드와 같이 QueryClient에 정의하고, <code class=\"language-text\">useQueryClient</code>의 <code class=\"language-text\">getQueryCache</code>를 통해 가져와 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  queryCache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 옵션 설정</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> queryCache <span class=\"token operator\">=</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryClientProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">QueryClientProvider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"타입-정보-6\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-6\" aria-label=\"타입 정보 6 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QueryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> queryCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSettled</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-6\" style=\"position:relative;\">Options<a href=\"#options-6\" aria-label=\"options 6 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><code class=\"language-text\">QueryCache</code>의 옵션들은 모두 콜백함수입니다. 전역에서 처리해야 할 적업을 할 때 사용할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">onError?: (error: unknown, query: Query) => void</code>\n<ul>\n<li>실행한 쿼리에 에러가 발생할 경우 호출되는 콜백함수입니다.</li>\n<li><code class=\"language-text\">error: unknown</code>\n<ul>\n<li>발생한 에러 정보가 담긴 객체입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">query: Query</code>\n<ul>\n<li>실행한 쿼리 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onSuccess?: (data: unknown, query: Query) => void</code>\n<ul>\n<li>실행한 쿼리가 성공하면 호출되는 콜백함수입니다.</li>\n<li><code class=\"language-text\">data: unknown</code>\n<ul>\n<li><code class=\"language-text\">queryFn</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">query: Query</code>\n<ul>\n<li>실행한 쿼리 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onSettled?: (data: unknown | undefined, error: unknown | null, query: Query) => void</code>\n<ul>\n<li>실행한 쿼리가 성공 혹은 실패하여 종료되면 호출되는 콜백함수입니다.</li>\n<li><code class=\"language-text\">data: unknown | undefined</code>\n<ul>\n<li>쿼리가 성공한 경우 <code class=\"language-text\">queryFn</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">error: unknown | null</code>\n<ul>\n<li>쿼리가 실패한 경우 발생한 에러 정보가 담긴 객체입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">query: Query</code>\n<ul>\n<li>실행한 쿼리 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h5 id=\"queryclient의-defaultoptions와-querycache의-옵션의-차이\" style=\"position:relative;\"><code class=\"language-text\">QueryClient</code>의 <code class=\"language-text\">defaultOptions</code>와 <code class=\"language-text\">QueryCache</code>의 옵션의 차이<a href=\"#queryclient%EC%9D%98-defaultoptions%EC%99%80-querycache%EC%9D%98-%EC%98%B5%EC%85%98%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"queryclient의 defaultoptions와 querycache의 옵션의 차이 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">defaultOpions</code>의 콜백함수들은 각각의 쿼리를 호출할 때 오버라이드될 수 있습니다. <code class=\"language-text\">QueryCache</code>의 전역 콜백함수들은 항상 호출됩니다.</li>\n<li><code class=\"language-text\">defaultOpions</code>의 콜백함수들은 각각의 옵저버에서 한 번씩 호출되지만, <code class=\"language-text\">QueryCache</code>의 전역 콜백함수들은 한 번만 호출됩니다.\n<ul>\n<li>예를 들어 <code class=\"language-text\">useQuery({ queryKey: ['posts'] })</code>와 같이 동일한 쿼리가 부모, 자식 컴포넌트 각각에 2번 선언되었다면 <code class=\"language-text\">defaultOpions</code>의 콜백함수는 2번 호출되지만, <code class=\"language-text\">QueryCache</code>의 전역 콜백함수는 한 번만 호출됩니다.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"returns-6\" style=\"position:relative;\">Returns<a href=\"#returns-6\" aria-label=\"returns 6 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">find: (filters: QueryFilters) => Query | undefined</code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 쿼리를 반환하는 함수입니다. 해당하는 쿼리가 없을 경우 <code class=\"language-text\">undefined</code>를 반환합니다.</li>\n<li><code class=\"language-text\">filters?: QueryFilters</code>\n<ul>\n<li><code class=\"language-text\">filters.queryKey?: QueryKey</code>\n<ul>\n<li>찾으려고 하는 쿼리의 쿼리 키입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.exact?: boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 정확히 일치하는 쿼리를 찾습니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 설정한 <code class=\"language-text\">filters.queryKey</code>가 포함되는 쿼리를 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.type?: 'active' | 'inactive' | 'all'</code> (default: <code class=\"language-text\">all</code>)\n<ul>\n<li><code class=\"language-text\">active</code>로 설정할 경우 활성화된 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">inactive</code>로 설정할 경우 비활성화된 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">all</code>로 설정할 경우 모든 쿼리 중에 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.stale?: boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 오래된(stale) 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 신선한(fresh) 쿼리 중에 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.fetchStatus?: 'fetching | 'paused' | 'idle'</code>\n<ul>\n<li><code class=\"language-text\">fetching</code>으로 설정할 경우 가져오는 중인 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">paused</code>로 설정할 경우 데이터를 가져오려고 했지만 일시 중단된 쿼리 중에 찾습니다.</li>\n<li><code class=\"language-text\">idle</code>로 설정할 경우 데이터를 가져온 적이 없는 쿼리 중에 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.predicate?: (query: Query) => boolean</code>\n<ul>\n<li>최종 필터로 사용되는 함수입니다. 다른 필터를 정의하지 않으면 모든 쿼리 중에 찾습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">findAll: (filters: QueryFilters) => Query[]</code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 쿼리를 배열 형태로 반환하는 함수입니다. 해당하는 쿼리가 없을 경우 `빈 배열을 반환합니다.</li>\n<li><code class=\"language-text\">find</code> 함수의 <code class=\"language-text\">filters</code>와 동일한 값을 파라미터로 전달받습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">subscribe: (callback: (event: QueryCacheNotifyEvent) => void) => unsubscribe: Function => void</code>\n<ul>\n<li>쿼리 캐시를 구독합니다. <code class=\"language-text\">query.setState</code>나 <code class=\"language-text\">queryClient.removeQueries</code> 등 쿼리가 업데이트될 때마다 업데이트된 쿼리를 파라미터로 하여 <code class=\"language-text\">callback</code> 함수가 호출됩니다.</li>\n<li>구독을 취소하는 함수인 <code class=\"language-text\">unsubscribe</code>를 반환합니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> queryCache<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">clear: () => void</code>\n<ul>\n<li>쿼리 캐시를 모두 지우는 데 사용되는 함수입니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-6\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-6\" aria-label=\"예제 6 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/5vcsmr?view=Editor+%2B+Preview&module=%2Fsrc%2Findex.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"QueryCache\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"mutationcache\" style=\"position:relative;\"><code class=\"language-text\">MutationCache</code><a href=\"#mutationcache\" aria-label=\"mutationcache permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">MutationCache</code>는 Mutation을 저장하는 저장소입니다. 보통 아래 코드와 같이 <code class=\"language-text\">QueryClient</code>에 정의하고, <code class=\"language-text\">useQueryClient</code>의 <code class=\"language-text\">getMutationCache</code>를 통해 가져와 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mutationCache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 옵션 설정</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> mutationCache <span class=\"token operator\">=</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getMutationCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryClientProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">QueryClientProvider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"타입-정보-7\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-7\" aria-label=\"타입 정보 7 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MutationCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> mutationCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-7\" style=\"position:relative;\">Options<a href=\"#options-7\" aria-label=\"options 7 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><code class=\"language-text\">MutationCache</code>의 옵션들은 모두 콜백함수입니다. 전역에서 처리해야 할 적업을 할 때 사용할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">onError?: (error: unknown, variables: unknown, context: unknown, mutation: Mutation) => Promise&lt;unknown> | unknown</code>\n<ul>\n<li>실행한 Mutation에 에러가 발생할 경우 호출되는 콜백함수입니다. <code class=\"language-text\">Promise</code>를 반환할 경우 <code class=\"language-text\">resolved</code> 될 때까지 이후 작업들이 진행되지 않습니다.</li>\n<li><code class=\"language-text\">error: unknown</code>\n<ul>\n<li>발생한 에러 정보가 담긴 객체입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: unknown</code>\n<ul>\n<li><code class=\"language-text\">mutate</code>(또는 <code class=\"language-text\">mutateAsync</code>) 함수의 <code class=\"language-text\">variables</code> 파라미터로 전달한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context: unknown</code>\n<ul>\n<li><code class=\"language-text\">useMutation</code> 훅의 옵션 중 <code class=\"language-text\">onMutate</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">mutation: Mutation</code>\n<ul>\n<li>실행한 Mutation 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onSuccess?: (data: unknown, variables: unknown, context: unknown, mutation: Mutation) => Promise&lt;unknown> | unknown</code>\n<ul>\n<li>실행한 Mutation이 성공하면 호출되는 콜백함수입니다. <code class=\"language-text\">Promise</code>를 반환할 경우 <code class=\"language-text\">resolved</code> 될 때까지 이후 작업들이 진행되지 않습니다.</li>\n<li><code class=\"language-text\">data: unknown</code>\n<ul>\n<li><code class=\"language-text\">mutationFn</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: unknown</code>\n<ul>\n<li><code class=\"language-text\">mutate</code>(또는 <code class=\"language-text\">mutateAsync</code>) 함수의 <code class=\"language-text\">variables</code> 파라미터로 전달한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context: unknown</code>\n<ul>\n<li><code class=\"language-text\">useMutation</code> 훅의 옵션 중 <code class=\"language-text\">onMutate</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">mutation: Mutation</code>\n<ul>\n<li>실행한 Mutation 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onSettled?: (data: unknown | undefined, error: unknown | null, variables: unknown, context: unknown, mutation: Mutation) => Promise&lt;unknown> | unknown</code>\n<ul>\n<li>실행한 Mutation이 성공 혹은 실패하여 종료되면 호출되는 콜백함수입니다. <code class=\"language-text\">Promise</code>를 반환할 경우 <code class=\"language-text\">resolved</code> 될 때까지 이후 작업들이 진행되지 않습니다.</li>\n<li><code class=\"language-text\">data: unknown | undefined</code>\n<ul>\n<li>Mutation이 성공한 경우 <code class=\"language-text\">mutationFn</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">error: unknown | null</code>\n<ul>\n<li>Mutation이 실패한 경우 발생한 에러 정보가 담긴 객체입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">variables: unknown</code>\n<ul>\n<li><code class=\"language-text\">mutate</code>(또는 <code class=\"language-text\">mutateAsync</code>) 함수의 <code class=\"language-text\">variables</code> 파라미터로 전달한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">context: unknown</code>\n<ul>\n<li><code class=\"language-text\">useMutation</code> 훅의 옵션 중 <code class=\"language-text\">onMutate</code> 함수의 반환 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">mutation: Mutation</code>\n<ul>\n<li>실행한 Mutation 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onMutate?: (variables: unknown, mutation: Mutation) => Promise&lt;unknown> | unknown</code>\n<ul>\n<li>Mutation이 실행되기 전에 호출되는 콜백합수입니다.</li>\n<li><code class=\"language-text\">variables: unknown</code>\n<ul>\n<li><code class=\"language-text\">mutate</code>(또는 <code class=\"language-text\">mutateAsync</code>) 함수의 <code class=\"language-text\">variables</code> 파라미터로 전달한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">mutation: Mutation</code>\n<ul>\n<li>실행한 Mutation 객체입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h5 id=\"queryclient의-defaultoptions와-mutationcache의-옵션의-차이\" style=\"position:relative;\"><code class=\"language-text\">QueryClient</code>의 <code class=\"language-text\">defaultOptions</code>와 <code class=\"language-text\">MutationCache</code>의 옵션의 차이<a href=\"#queryclient%EC%9D%98-defaultoptions%EC%99%80-mutationcache%EC%9D%98-%EC%98%B5%EC%85%98%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"queryclient의 defaultoptions와 mutationcache의 옵션의 차이 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">defaultOpions</code>에 정의한 콜백함수들은 각각의 Mutation을 호출할 때 오버라이드될 수 있습니다. <code class=\"language-text\">MutationCache</code>에 정의한 전역 콜백함수들은 항상 호출됩니다.</li>\n<li><code class=\"language-text\">MutationCache</code>의 옵션 중 <code class=\"language-text\">onMutate</code> 함수의 반환 값은 <code class=\"language-text\">context</code>에 담기지 않습니다.</li>\n</ul>\n</blockquote>\n<h5 id=\"returns-7\" style=\"position:relative;\">Returns<a href=\"#returns-7\" aria-label=\"returns 7 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">getAll: () => Mutation[]</code>\n<ul>\n<li>캐시 된 모든 Mutation을 반환합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">subscribe: (callback: (mutation?: MutationCacheNotifyEvent) => void) => unsubscribe: Function => void</code>\n<ul>\n<li>Mutation 캐시를 구독합니다. Mutation 추가/삭제/수정되면 <code class=\"language-text\">callback</code> 함수가 실행됩니다.</li>\n<li>구독을 취소하는 함수인 <code class=\"language-text\">unsubscribe</code>를 반환합니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>mutation<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> mutationCache<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">clear: () => void</code>\n<ul>\n<li>Mutation 캐시를 모두 지우는 데 사용되는 함수입니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-7\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-7\" aria-label=\"예제 7 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/9m9p9l?view=Editor+%2B+Preview&module=%2Fsrc%2Findex.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"MutationCache\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"usemutationstate\" style=\"position:relative;\"><code class=\"language-text\">useMutationState</code><a href=\"#usemutationstate\" aria-label=\"usemutationstate permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useMutationState</code> 훅은 <code class=\"language-text\">MutationCache</code>에 있는 Mutation에 접근할 수 있는 훅입니다. <code class=\"language-text\">filter</code>을 사용하여 원하는 Mutation을 찾을 수 있고 <code class=\"language-text\">select</code>를 사용하여 필요한 Mutation의 값을 선택해 가져올 수 있습니다.</p>\n<h4 id=\"타입-정보-8\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-8\" aria-label=\"타입 정보 8 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMutation<span class=\"token punctuation\">,</span> useMutationState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> mutationKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// Some mutation that we want to get the state for</span>\n<span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mutationKey<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">mutationFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>newPost<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/posts'</span><span class=\"token punctuation\">,</span> newPost<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useMutationState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this mutation key needs to match the mutation key of the given mutation (see above)</span>\n  filters<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> mutationKey <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">select</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mutation<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-8\" style=\"position:relative;\">Options<a href=\"#options-8\" aria-label=\"options 8 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">options</code>\n<ul>\n<li><code class=\"language-text\">filters?: MutationFilters</code>\n<ul>\n<li><code class=\"language-text\">filters.mutationKey?: MutationKey</code>\n<ul>\n<li>찾으려고 하는 Mutation의 키입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.exact?: boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 정확히 일치하는 Mutation을 찾습니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 설정한 <code class=\"language-text\">filters.mutationKey</code>가 포함되는 Mutation을 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.status?: 'idle' | 'pending' | 'error' | 'success'</code>\n<ul>\n<li><code class=\"language-text\">idle</code>인 경우 실행되기 전인 Mutation 중에 찾습니다.</li>\n<li><code class=\"language-text\">pending</code>인 경우 실행 중인 Mutation 중에 찾습니다.</li>\n<li><code class=\"language-text\">error</code> 인 경우 에러가 발생한 Mutation 중에 찾습니다.</li>\n<li><code class=\"language-text\">success</code>인 경우 성공한 Mutation 중에 찾습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">filters.predicate?: (mutation: Mutation) => boolean</code>\n<ul>\n<li>최종 필터로 사용되는 함수입니다. 다른 필터를 정의하지 않으면 모든 Mutation 중에 찾습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">select?: (mutation: Mutation) => TResult</code>\n<ul>\n<li>이 옵션을 사용하여 Mutation의 정보를 선택해 가져올 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">queryClient?: QueryClient</code>\n<ul>\n<li>커스텀한 쿼리 클라이언트를 지정할 수 있습니다. 이 값을 설정하지 않는다면 가장 가까운 콘텍스트의 쿼리 클라이언트가 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns-8\" style=\"position:relative;\">Returns<a href=\"#returns-8\" aria-label=\"returns 8 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">Array&lt;TResult></code>\n<ul>\n<li><code class=\"language-text\">select</code> 옵션에서 반환한 Mutation 배열입니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-8\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-8\" aria-label=\"예제 8 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/wft346?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useMutationState\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"usesuspensequery\" style=\"position:relative;\"><code class=\"language-text\">useSuspenseQuery</code><a href=\"#usesuspensequery\" aria-label=\"usesuspensequery permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useSuspenseQuery</code> 훅은 <code class=\"language-text\">useQuery</code>와 동일한 동작을 하지만 데이터를 가져오는 동안에 React의 Suspense 동작을 실행시킵니다.</p>\n<h4 id=\"타입-정보-9\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-9\" aria-label=\"타입 정보 9 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useSuspenseQuery</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-9\" style=\"position:relative;\">Options<a href=\"#options-9\" aria-label=\"options 9 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a>에서 <code class=\"language-text\">throwOnError</code>, <code class=\"language-text\">enabled</code>, <code class=\"language-text\">placeholderData</code>가 빠진 형태입니다.</p>\n<h5 id=\"returns-9\" style=\"position:relative;\">Returns<a href=\"#returns-9\" aria-label=\"returns 9 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><a href=\"/tech/react/tanstack-query-v5-api-reference/#returns\"><code class=\"language-text\">useQuery</code> 훅의 반환 값</a>과 대부분 동일하지만, 아래 목록만 차이가 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">data</code>는 항상 <code class=\"language-text\">undefined</code>가 아닙니다.\n<ul>\n<li>데이터를 가져오는 동안에는 Suspense가 동작하기 때문에 <code class=\"language-text\">data</code>는 항상 <code class=\"language-text\">undefined</code>가 아니게 됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isPlaceholderData</code>이 제거되었습니다.\n<ul>\n<li><code class=\"language-text\">placeholderData</code>로 화면에 노출되는 것이 아니라 Suspense가 화면에 노출되기 때문에 <code class=\"language-text\">isPlaceholderData</code>가 제거되었습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">status</code>는 항상 <code class=\"language-text\">success</code>입니다.\n<ul>\n<li><code class=\"language-text\">useQuery</code> 훅의 <code class=\"language-text\">status</code> 반환 값 중 <code class=\"language-text\">pending</code>일 경우 Suspense가 동작하고, <code class=\"language-text\">error</code>일 경우 Error Boundary가 화면에 노출되기 때문에 항상 <code class=\"language-text\">success</code>가 됩니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-9\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-9\" aria-label=\"예제 9 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/ghm5tk?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useSuspenseQuery\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"usesuspenseinfinitequery\" style=\"position:relative;\"><code class=\"language-text\">useSuspenseInfiniteQuery</code><a href=\"#usesuspenseinfinitequery\" aria-label=\"usesuspenseinfinitequery permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useSuspenseInfiniteQuery</code> 훅은 <code class=\"language-text\">useInfiniteQuery</code> 와 동일한 동작을 하지만 데이터를 가져오는 동안에 React의 Suspense 동작을 실행 시킵니다.</p>\n<h4 id=\"타입-정보-10\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-10\" aria-label=\"타입 정보 10 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useSuspenseInfiniteQuery</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-10\" style=\"position:relative;\">Options<a href=\"#options-10\" aria-label=\"options 10 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><a href=\"/tech/react/tanstack-query-v5-api-reference/#options-2\"><code class=\"language-text\">useInfiniteQuery</code> 훅의 옵션</a>에서 <code class=\"language-text\">throwOnError</code>, <code class=\"language-text\">enabled</code>, <code class=\"language-text\">placeholderData</code>가 빠진 형태입니다.</p>\n<h5 id=\"returns-10\" style=\"position:relative;\">Returns<a href=\"#returns-10\" aria-label=\"returns 10 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><a href=\"/tech/react/tanstack-query-v5-api-reference/#returns-2\"><code class=\"language-text\">useInfiniteQuery</code> 훅의 반환 값</a>과 대부분 동일하지만, 아래 목록만 차이가 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">data</code>는 항상 <code class=\"language-text\">undefined</code>가 아닙니다.\n<ul>\n<li>데이터를 가져오는 동안에는 Suspense가 동작하기 때문에 <code class=\"language-text\">data</code>는 항상 <code class=\"language-text\">undefined</code>가 아니게 됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isPlaceholderData</code>이 제거되었습니다.\n<ul>\n<li><code class=\"language-text\">placeholderData</code>로 화면에 노출되는 것이 아니라 Suspense가 화면에 노출되기 때문에 <code class=\"language-text\">isPlaceholderData</code>가 제거되었습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">status</code>는 항상 <code class=\"language-text\">success</code>입니다.\n<ul>\n<li><code class=\"language-text\">useInfiniteQuery</code> 훅의 <code class=\"language-text\">status</code> 반환 값 중 <code class=\"language-text\">pending</code>일 경우 Suspense가 동작하고, <code class=\"language-text\">error</code>일 경우 Error Boundary가 화면에 노출되기 때문에 항상 <code class=\"language-text\">success</code>가 됩니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-10\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-10\" aria-label=\"예제 10 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/3z7s5v?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useSuspenseInfiniteQuery\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"usesuspensequeries\" style=\"position:relative;\"><code class=\"language-text\">useSuspenseQueries</code><a href=\"#usesuspensequeries\" aria-label=\"usesuspensequeries permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useSuspenseQueries</code> 훅은 <code class=\"language-text\">useQueries</code>와 동일한 동작을 하지만 데이터를 가져오는 동안에 React의 Suspense 동작을 실행시킵니다.</p>\n<h4 id=\"타입-정보-11\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-11\" aria-label=\"타입 정보 11 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useSuspenseQueries</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-11\" style=\"position:relative;\">Options<a href=\"#options-11\" aria-label=\"options 11 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><a href=\"/tech/react/tanstack-query-v5-api-reference/#options-1\"><code class=\"language-text\">useQueries</code> 훅의 옵션</a>에서 <code class=\"language-text\">throwOnError</code>, <code class=\"language-text\">enabled</code>, <code class=\"language-text\">placeholderData</code>가 빠진 형태입니다.</p>\n<h5 id=\"returns-11\" style=\"position:relative;\">Returns<a href=\"#returns-11\" aria-label=\"returns 11 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><a href=\"/tech/react/tanstack-query-v5-api-reference/#returns-1\"><code class=\"language-text\">useQueries</code> 훅의 반환 값</a>과 대부분 동일하지만, 아래 목록만 차이가 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">data</code>는 항상 <code class=\"language-text\">undefined</code>가 아닙니다.\n<ul>\n<li>데이터를 가져오는 동안에는 Suspense가 동작하기 때문에 <code class=\"language-text\">data</code>는 항상 <code class=\"language-text\">undefined</code>가 아니게 됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isPlaceholderData</code>이 제거되었습니다.\n<ul>\n<li><code class=\"language-text\">placeholderData</code>로 화면에 노출되는 것이 아니라 Suspense가 화면에 노출되기 때문에 <code class=\"language-text\">isPlaceholderData</code>가 제거되었습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">status</code>는 항상 <code class=\"language-text\">success</code>입니다.\n<ul>\n<li><code class=\"language-text\">useQuery</code> 훅의 <code class=\"language-text\">status</code> 반환 값 중 <code class=\"language-text\">pending</code>일 경우 Suspense가 동작하고, <code class=\"language-text\">error</code>일 경우 Error Boundary가 화면에 노출되기 때문에 항상 <code class=\"language-text\">success</code>가 됩니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예제-11\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C-11\" aria-label=\"예제 11 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div>\n  <iframe src=\"https://codesandbox.io/embed/4jzy9s?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.tsx\"\n  style=\"width:100%; height: 500px; border:0; border-radius: 10px; overflow:hidden;\"\n  title=\"useSuspenseQueries\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n<h3 id=\"queryclient\" style=\"position:relative;\"><code class=\"language-text\">QueryClient</code><a href=\"#queryclient\" aria-label=\"queryclient permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">QueryClient</code>는 캐시와 상호 작용할 수 있는 기능을 제공합니다. React Query를 사용하기 위해서 루트 위치에서 <code class=\"language-text\">QueryClient</code> 인스턴스를 생성하여 <code class=\"language-text\">QueryClientProvider</code> 컴포넌트의 prop으로 전달해야 합니다.</p>\n<p>하위 컴포넌트에서는 <code class=\"language-text\">useQueryClient</code> 훅을 사용하여 <code class=\"language-text\">QueryClient</code> 인스턴스를 접근할 수 있고 <code class=\"language-text\">QueryClient</code> 인스턴스를 통해 다양한 React Query 기능을 사용할 수 있습니다.</p>\n<h4 id=\"타입-정보-12\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-12\" aria-label=\"타입 정보 12 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QueryClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  defaultOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    queries<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      staleTime<span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">await</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">prefetchQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> queryFn<span class=\"token operator\">:</span> fetchPosts <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-12\" style=\"position:relative;\">Options<a href=\"#options-12\" aria-label=\"options 12 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">queryCache?: QueryCache</code>\n<ul>\n<li>쿼리 클라이언트에서 사용할 쿼리 캐시입니다.</li>\n<li><code class=\"language-text\">QueryCache</code>는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-6\"><code class=\"language-text\">QueryCache</code>의 옵션</a>와 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">mutationCache?: MutationCache</code>\n<ul>\n<li>쿼리 클라이언트에서 사용할 Mutation 캐시입니다.</li>\n<li><code class=\"language-text\">MutationCache</code>는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-7\"><code class=\"language-text\">MutationCache</code>의 옵션</a>와 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">defaultOptions?: DefaultOptions</code>\n<ul>\n<li>쿼리와 Mutation에서 사용할 기본 옵션입니다.</li>\n<li><code class=\"language-text\">defaultOptions.queries</code>\n<ul>\n<li><a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">defaultOptions.mutations</code>\n<ul>\n<li><a href=\"/tech/react/tanstack-query-v5-api-reference/#options-3\"><code class=\"language-text\">useMutation</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns-12\" style=\"position:relative;\">Returns<a href=\"#returns-12\" aria-label=\"returns 12 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">fetchQuery: (options) => Promise&lt;TData></code>\n<ul>\n<li>쿼리로 데이터를 가져와 캐시 하는 데 사용하는 비동기 메서드입니다. 가져온 데이터를 <code class=\"language-text\">Promise</code> 형태로 반환하거나 에러가 발생했을 경우 에러를 <code class=\"language-text\">throw</code> 합니다.</li>\n<li>캐시 된 데이터가 <code class=\"language-text\">staleTime</code>이 지나지 않았다면 캐시 된 데이터를 반환합니다. <code class=\"language-text\">staleTime</code>이 지났다면 데이터를 새로 가져옵니다.</li>\n<li><code class=\"language-text\">options</code>는 <code class=\"language-text\">enabled</code>, <code class=\"language-text\">refetchInterval</code>, <code class=\"language-text\">refetchIntervalInBackground</code>, <code class=\"language-text\">refetchOnWindowFocus</code>, <code class=\"language-text\">refetchOnReconnect</code>, <code class=\"language-text\">refetchOnMount</code>, <code class=\"language-text\">notifyOnChangeProps</code>, <code class=\"language-text\">throwOnError</code>, <code class=\"language-text\">select</code>, <code class=\"language-text\">suspense</code>, <code class=\"language-text\">placeholderData</code>를 제외한 <code class=\"language-text\">useQuery</code> 훅의 옵션과 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">fetchInfiniteQuery: (options) => Promise&lt;InfiniteData&lt;TData, TPageParam>></code>\n<ul>\n<li>무한 쿼리로 데이터를 가져와 캐시 하는 데 사용되는 비동기 메서드입니다.</li>\n<li><code class=\"language-text\">options</code>는 <code class=\"language-text\">fetchQuery</code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">prefetchQuery: (opitons) => Promise&lt;void></code>\n<ul>\n<li>쿼리 데이터를 사용하기 전에 데이터를 미리 가져와 캐시 하는 데 사용하는 비동기 메서드입니다. 가져온 데이터를 반환하지 않는다는 점을 제외하면 <code class=\"language-text\">fetchQuery</code>와 동일합니다.</li>\n<li><code class=\"language-text\">options</code>는 <code class=\"language-text\">fetchQuery</code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">prefetchInfiniteQuery: (options) => Promise&lt;void></code>\n<ul>\n<li>무한 쿼리 데이터를 사용하기 전에 데이터를 미리 가져와 캐시 하는 데 사용하는 비동기 메서드입니다.</li>\n<li><code class=\"language-text\">options</code>는 <code class=\"language-text\">fetchQuery</code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getQueryData: (queryKey: QueryKey) => TQueryFnData | undefined</code>\n<ul>\n<li>쿼리의 캐시 된 데이터를 가져오는 함수입니다. 쿼리의 캐시 된 데이터가 없다면 <code class=\"language-text\">undefined</code>를 반환합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">ensureQueryData: (options) => Promise&lt;TData></code>\n<ul>\n<li>쿼리의 캐시 된 데이터를 가져오는 비동기 함수입니다. 쿼리의 캐시 된 데이터가 없다면 <code class=\"language-text\">fetchQuery</code>가 호출되고 그 응답 값을 반환합니다.</li>\n<li><code class=\"language-text\">options</code>는 <code class=\"language-text\">fetchQuery</code>와 동일하지만, <code class=\"language-text\">queryKey</code>가 필수 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getQueriesData: (filters: QueryFilters) => [queryKey: QueryKey, data: TQueryFnData | undefined][]</code>\n<ul>\n<li>여러 쿼리의 캐시 된 데이터를 가져오는 함수입니다. 파라미터로 전달한 <code class=\"language-text\">filters</code>에 일치되는 쿼리의 데이터를 <code class=\"language-text\">[queryKey, data]</code> 튜플의 배열 형태로 반환합니다. 일치되는 쿼리가 없으면 빈 배열을 반환합니다.</li>\n<li><code class=\"language-text\">filters</code> 정보는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-4\"><code class=\"language-text\">useIsFetching</code> 훅의 옵션</a>을 참고 바랍니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">setQueryData: (queryKey: QueryKey, updater: TQueryFnData | undefined | ((oldData: TQueryFnData | undefined) => TQueryFnData | undefined)) => TInferredQueryFnData | undefined</code>\n<ul>\n<li>쿼리의 캐시 된 데이터를 업데이트하는 함수입니다. 쿼리가 존재하지 않으면 쿼리가 생성됩니다.</li>\n<li><code class=\"language-text\">queryKey: QueryKey</code>\n<ul>\n<li>데이터를 업데이트할 쿼리 키입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">updater: TQueryFnData | undefined | ((oldData: TQueryFnData | undefined) => TQueryFnData | undefined)</code>\n<ul>\n<li>함수가 아닌 값을 전달할 경우 전달된 값으로 쿼리의 데이터가 업데이트됩니다.</li>\n<li>함수를 전달할 경우 함수는 현재 데이터를 파라미터로 하여 업데이트할 값을 반환해야 합니다. 함수가 반환된 값으로 쿼리의 데이터가 업데이트됩니다.</li>\n<li><code class=\"language-text\">undefined</code>를 전달하거나 함수의 반환 값이 <code class=\"language-text\">undefined</code>일 경우 쿼리의 데이터는 업데이트되지 않습니다.</li>\n<li><code class=\"language-text\">oldData</code>나 <code class=\"language-text\">getQueryData</code> 통해 가져온 캐시 된 데이터를 직접 수정하면 안 됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getQueryState: (querykey: QueryKey) => QueryState</code>\n<ul>\n<li>쿼리의 상태를 가져오는 함수입니다. 쿼리가 존재하지 않으면 <code class=\"language-text\">undefined</code>를 반환합니다.</li>\n<li><code class=\"language-text\">queryKey: QueryKey</code>\n<ul>\n<li>쿼리 상태를 가져올 쿼리 키입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">QueryState</code>\n<ul>\n<li>쿼리 상태를 담고 있는 객체입니다.</li>\n<li><code class=\"language-text\">data: TData | undefined</code>\n<ul>\n<li>쿼리가 마지막으로 성공적으로 가져온 데이터입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">dataUpdateCount: number</code>\n<ul>\n<li>쿼리가 데이터를 업데이트 한 횟수입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">dataUpdatedAt: number</code>\n<ul>\n<li>데이터를 성공적으로 가져왔을 때(<code class=\"language-text\">status</code>가 <code class=\"language-text\">success</code>) 타임스탬프입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">error: TError | null</code>\n<ul>\n<li>쿼리에 에러가 발생한 경우 에러 정보를 담는 객체입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">errorUpdateCount: number</code>\n<ul>\n<li>쿼리가 데이터 가져오기를 실패한 총횟수입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">errorUpdatedAt: number</code>\n<ul>\n<li>가장 최근에 에러가 발생했을 때(<code class=\"language-text\">status</code>가 <code class=\"language-text\">error</code>) 타임스탬프입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">fetchFailureCount: number</code>\n<ul>\n<li>쿼리가 데이터 가져오기를 실패한 횟수입니다. 쿼리가 성공적으로 데이터를 가져온 경우 <code class=\"language-text\">0</code>으로 초기화됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">fetchFailureReason: TError | null</code>\n<ul>\n<li>쿼리가 데이터를 가져오기 재시도를 실패했을 경우 에러 정보가 담깁니다. 쿼리가 성공적으로 데이터를 가져온 경우 <code class=\"language-text\">null</code>로 초기화 됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">fetchMeta: FetchMeta | null</code>\n<ul>\n<li>쿼리에서 사용한 메타 정보입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isInvalidated: boolean</code>\n<ul>\n<li>유효한 쿼리인지 나타내는 플래그입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">status: 'pending' | 'error' | 'success'</code>\n<ul>\n<li><code class=\"language-text\">pending</code>일 경우, 캐시 된 데이터가 없고 쿼리 시도가 아직 완료되지 않은 상태입니다.</li>\n<li><code class=\"language-text\">error</code>일 경우, 데이터를 가져올 때 에러가 발생한 상태입니다.</li>\n<li><code class=\"language-text\">success</code>일 경우, 데이터를 성공적으로 가져오거나, <code class=\"language-text\">enabled</code>가 <code class=\"language-text\">false</code>이면서 <code class=\"language-text\">initialData</code>가 설정된 상태입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">fetchStatus: 'fetching' | 'paused' | 'idle'</code>\n<ul>\n<li><code class=\"language-text\">fetching</code>일 경우, <code class=\"language-text\">queryFn</code>이 실행 중이거나, 초기 <code class=\"language-text\">status</code>가 <code class=\"language-text\">pending</code> 상태이거나, 백그라운드에서 데이터를 가져오는 상태입니다.</li>\n<li><code class=\"language-text\">paused</code>일 경우, 쿼리가 데이터를 가져오려고 했지만 중지된 상태입니다. 대표적으로 네트워크가 끊겨 쿼리가 중지됐을 때 <code class=\"language-text\">paused</code> 상태입니다.</li>\n<li><code class=\"language-text\">idle</code>일 경우, <code class=\"language-text\">fetching</code> 상태도 <code class=\"language-text\">paused</code> 상태도 아닌 상태입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">setQueriesData: (filters: QueryFilters, updater: TQueryFnData | (oldData: TQueryFnData | undefined) => TQueryFnData) => [QueryKey, TQueryFnData | undefined][]</code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 여러 쿼리의 캐시 된 데이터를 업데이트하는 함수입니다. 내부적으로 각각의 쿼리는 <code class=\"language-text\">setQueryData</code> 함수가 호출됩니다.</li>\n<li><code class=\"language-text\">filters</code> 정보는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-4\"><code class=\"language-text\">useIsFetching</code> 훅의 옵션</a>을 참고 바랍니다.</li>\n<li><code class=\"language-text\">updater</code> 정보는 <code class=\"language-text\">setQueryData</code> 함수의 <code class=\"language-text\">updater</code> 파라미터와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">invalidateQueries: (filters?: InvalidateQueryFilters, options?: InvalidateOptions) => Promise&lt;void></code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 쿼리를 무효화하고 데이터를 다시 가져오는 비동기 함수입니다.</li>\n<li><code class=\"language-text\">filters?: InvalidateQueryFilters</code>\n<ul>\n<li><code class=\"language-text\">QueryFilter</code>에 <code class=\"language-text\">refetchType?: 'active' | 'inactive' | 'all' | 'none'</code>가 추가된 형태입니다.</li>\n<li><code class=\"language-text\">refetchType?: 'active' | 'inactive' | 'all' | 'none'</code> (default: <code class=\"language-text\">'active'</code>)\n<ul>\n<li><code class=\"language-text\">active</code>로 설정할 경우, 활성화된 쿼리의 데이터를 무효화 후 다시 가져옵니다.</li>\n<li><code class=\"language-text\">inactive</code>로 설정할 경우, 비활성화된 쿼리의 데이터를 무효화 후 다시 가져옵니다.</li>\n<li><code class=\"language-text\">all</code>로 설정할 경우, 활성화/비활성화된 쿼리의 데이터를 무효화 후 다시 가져옵니다.</li>\n<li><code class=\"language-text\">none</code>으로 설정할 경우, 쿼리의 데이터를 무효화하지만 다시 가져오지는 않습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">options?: InvalidateOptions</code>\n<ul>\n<li><code class=\"language-text\">throwOnError?: boolean</code>\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 쿼리에서 에러가 발생할 경우 가장 가까운 에러 바운더리(Error Boundary)로 에러를 전파합니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 쿼리에서 에러가 발생해도 에러 바운더리로 에러를 전파하지 않습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">cancelRefetch?: boolean</code> (default <code class=\"language-text\">true</code>)\n<ul>\n<li><code class=\"language-text\">true</code>로 설정할 경우 쿼리가 데이터를 가져오는 중일 경우 진행 중이던 요청을 취소하고 재요청합니다.</li>\n<li><code class=\"language-text\">false</code>로 설정할 경우 쿼리가 데이터를 가져오는 중일 경우 데이터를 재요청하지 않습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">refetchQueries: (filters?: QueryFilters, options?: RefetchOptions) => Promise&lt;void></code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 쿼리의 데이터를 다시 가져오는 비동기 함수입니다.</li>\n<li><code class=\"language-text\">filters</code> 정보는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-4\"><code class=\"language-text\">useIsFetching</code> 훅의 옵션</a>을 참고 바랍니다.</li>\n<li><code class=\"language-text\">options</code> 정보는 <code class=\"language-text\">invalidateQueries</code> 함수의 <code class=\"language-text\">options</code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">cancelQueries: (filters?: QueryFilters) => Promise&lt;void></code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 쿼리의 요청을 취소하는 비동기 함수입니다.</li>\n<li><code class=\"language-text\">filters</code> 정보는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-4\"><code class=\"language-text\">useIsFetching</code> 훅의 옵션</a>을 참고 바랍니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">removeQueries: (filters?: QueryFilters) => void</code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 쿼리의 캐시를 삭제하는 함수입니다.</li>\n<li><code class=\"language-text\">filters</code> 정보는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-4\"><code class=\"language-text\">useIsFetching</code> 훅의 옵션</a>을 참고 바랍니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">resetQueries: (filters?: QueryFilters, options?: ResetOptions) => Promise&lt;void></code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 쿼리를 초기 상태로 재설정하는 비동기 함수입니다.</li>\n<li><code class=\"language-text\">invalidateQueries</code> 함수와 달리 쿼리는 데이터를 미리 가져온 상태가 됩니다. <code class=\"language-text\">initialData</code>가 정의된 쿼리라면 해당 데이터로 초기화되고, 활성화된 쿼리는 데이터를 다시 가져옵니다.</li>\n<li><code class=\"language-text\">filters</code> 정보는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-4\"><code class=\"language-text\">useIsFetching</code> 훅의 옵션</a>을 참고 바랍니다.</li>\n<li><code class=\"language-text\">options</code> 정보는 <code class=\"language-text\">invalidateQueries</code> 함수의 <code class=\"language-text\">options</code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isFetching: (filters?: QueryFilters) => number</code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 쿼리 중 데이터를 가져오는 중인 쿼리의 수를 반환하는 함수입니다. <code class=\"language-text\">useIsFetching</code> 훅과 동일한 역할을 합니다.</li>\n<li><code class=\"language-text\">filters</code> 정보는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-4\"><code class=\"language-text\">useIsFetching</code> 훅의 옵션</a>을 참고 바랍니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">isMutating: (filters?: QueryFilters) => number</code>\n<ul>\n<li><code class=\"language-text\">filters</code>에 해당하는 Mutation 중인 수를 반환하는 함수입니다. <code class=\"language-text\">useIsMutating</code> 훅과 동일한 역할을 합니다.</li>\n<li><code class=\"language-text\">filters</code> 정보는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-4\"><code class=\"language-text\">useIsFetching</code> 훅의 옵션</a>을 참고 바랍니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getDefaultOptions: () => DefaultOptions</code>\n<ul>\n<li><code class=\"language-text\">QueryClient</code> 인스턴스를 생성할 때 전달할 <code class=\"language-text\">defaultOptions</code> 혹은 <code class=\"language-text\">setDefaultOptions</code> 함수에 전달한 파라미터를 반환합니다.</li>\n<li><code class=\"language-text\">DefaultOptions</code>\n<ul>\n<li>쿼리와 Mutation에서 사용할 기본 옵션입니다.</li>\n<li><code class=\"language-text\">queries?: QueryObserverOptions</code>\n<ul>\n<li><a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">mutations?: MutationObserverOptions</code>\n<ul>\n<li><a href=\"/tech/react/tanstack-query-v5-api-reference/#options-3\"><code class=\"language-text\">useMutation</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">setDefaultOptions: (options: DefaultOptions) => void</code>\n<ul>\n<li><code class=\"language-text\">QueryClient</code>의 기본 옵션을 동적으로 변경하기 위해 사용되는 함수입니다.</li>\n<li><code class=\"language-text\">DefaultOptions</code>\n<ul>\n<li>쿼리와 Mutation에서 사용할 기본 옵션입니다.</li>\n<li><code class=\"language-text\">queries?: QueryObserverOptions</code>\n<ul>\n<li><a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">mutations?: MutationObserverOptions</code>\n<ul>\n<li><a href=\"/tech/react/tanstack-query-v5-api-reference/#options-3\"><code class=\"language-text\">useMutation</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getQueryDefaults: (queryKey: QueryKey) => QueryObserverOptions</code>\n<ul>\n<li><code class=\"language-text\">queryKey</code>에 해당되는 쿼리의 기본 옵션을 반환합니다. <code class=\"language-text\">queryKey</code>에 일치하는 쿼리가 여러 개일 경우 가장 먼저 매칭되는 쿼리의 기본 옵션을 반환합니다.</li>\n<li><code class=\"language-text\">QueryObserverOptions</code>는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">setQueryDefaults: (queryKey: QueryKey, options: QueryOptions) => void</code>\n<ul>\n<li><code class=\"language-text\">queryKey</code>에 해당되는 쿼리의 기본 옵션을 <code class=\"language-text\">options</code>로 변경합니다. <code class=\"language-text\">queryKey</code>에 일치하는 쿼리가 여러 개일 경우 가장 먼저 매칭되는 쿼리의 기본 옵션을 변경합니다.</li>\n<li><code class=\"language-text\">QueryOptions</code>은 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a>에서 <code class=\"language-text\">queryKey</code>를 제외한 값의 옵셔널 한 형태입니다. 즉 <code class=\"language-text\">Partial&lt;Omit&lt;QueryObserverOptions, 'queryKey''>></code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getMutationDefaults: (mutationKey: MutationKey) => MutationObserverOptions</code>\n<ul>\n<li><code class=\"language-text\">mutationKey</code>에 해당되는 Mutation의 기본 옵션을 반환합니다.</li>\n<li><code class=\"language-text\">MutationObserverOptions</code>은 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-3\"><code class=\"language-text\">useMutation</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">setMutationDefaults: (mutationKey: MutationKey, options: MutationOptions) => void</code>\n<ul>\n<li><code class=\"language-text\">mutationKey</code>에 해당되는 Mutation의 기본 옵션을 <code class=\"language-text\">options</code>로 변경합니다.</li>\n<li><code class=\"language-text\">MutationOptions</code>은 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-3\"><code class=\"language-text\">useMutation</code> 훅의 옵션</a>에서 <code class=\"language-text\">mutationKey</code>를 제외한 값의 옵셔널 한 형태입니다. 즉 <code class=\"language-text\">Partial&lt;Omit&lt;MutationObserverOptions, 'mutationKey''>></code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getQueryCache: () => QueryCache</code>\n<ul>\n<li><code class=\"language-text\">QueryClient</code>에 연결된 <code class=\"language-text\">QueryCache</code>를 반환합니다.</li>\n<li><code class=\"language-text\">QueryCache</code>는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-6\"><code class=\"language-text\">QueryCache</code>의 옵션</a>와 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getMutationCache: () => MutationCache</code>\n<ul>\n<li><code class=\"language-text\">QueryClient</code>에 연결된 <code class=\"language-text\">MutationCache</code>를 반환합니다.</li>\n<li><code class=\"language-text\">MutationCache</code>는 <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-7\"><code class=\"language-text\">MutationCache</code>의 옵션</a>와 동일한 값입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">clear: () => void</code>\n<ul>\n<li>모든 캐시를 삭제하는 함수입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">resumePausedMutations: () => Promise&lt;unknown></code>\n<ul>\n<li>네트워크 연결이 되지 않아 일시 중지된 Mutation을 다시 시작하는 데 사용하는 함수입니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"usequeryclient\" style=\"position:relative;\"><code class=\"language-text\">useQueryClient</code><a href=\"#usequeryclient\" aria-label=\"usequeryclient permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>현재 사용하는 <code class=\"language-text\">QueryClient</code>의 인스턴스를 반환하는 훅입니다.</p>\n<h4 id=\"타입-정보-13\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-13\" aria-label=\"타입 정보 13 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQueryClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token operator\">?</span><span class=\"token operator\">:</span> QueryClient<span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-13\" style=\"position:relative;\">Options<a href=\"#options-13\" aria-label=\"options 13 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">queryClient?: QueryClient</code>\n<ul>\n<li>커스텀한 <code class=\"language-text\">QueryClient</code>를 사용하려면 이 파라미터를 전달해야 합니다. 전달하지 않을 경우 가장 가까운 콘텍스트의 <code class=\"language-text\">QueryClient</code>를 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns-13\" style=\"position:relative;\">Returns<a href=\"#returns-13\" aria-label=\"returns 13 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><code class=\"language-text\">useQueryClient</code> 훅의 반환 값은 <a href=\"/tech/react/tanstack-query-v5-api-reference/#returns-12\"><code class=\"language-text\">QueryClient</code>의 반환 값</a>과 동일합니다.</p>\n<h3 id=\"queryclientprovider\" style=\"position:relative;\"><code class=\"language-text\">QueryClientProvider</code><a href=\"#queryclientprovider\" aria-label=\"queryclientprovider permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">QueryClientProvider</code> 컴포넌트는 React Query를 사용하기 위해서 루트 위치에서 선언되어야 합니다. <code class=\"language-text\">QueryClientProvider</code>의 <code class=\"language-text\">client</code> 속성으로 <code class=\"language-text\">QueryClient</code>를 전달해야 하며, 전달된 <code class=\"language-text\">QueryClient</code>는 하위 컴포넌트에서 <code class=\"language-text\">useQuery</code> 등, React Query를 사용할 때 사용됩니다.</p>\n<h4 id=\"타입-정보-14\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-14\" aria-label=\"타입 정보 14 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QueryClient<span class=\"token punctuation\">,</span> QueryClientProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryClientProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">QueryClientProvider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"props\" style=\"position:relative;\">Props<a href=\"#props\" aria-label=\"props permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">client: QueryClient</code>\n<ul>\n<li>하위 컴포넌트에서 React Query를 사용할 때 사용되는 <code class=\"language-text\">QueryClient</code>입니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"queryobserver\" style=\"position:relative;\"><code class=\"language-text\">QueryObserver</code><a href=\"#queryobserver\" aria-label=\"queryobserver permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">QueryObserver</code>는 쿼리를 관찰할 때 사용됩니다. <code class=\"language-text\">useQuery</code>는 내부적으로 <code class=\"language-text\">QueryObserver</code> 인스턴스를 만들어 사용하는데, <code class=\"language-text\">useQuery</code> 훅을 사용하면 되기 때문에 직접 <code class=\"language-text\">QueryObserver</code> 인스턴스를 생성하는 경우는 많지 않습니다.</p>\n<h4 id=\"타입-정보-15\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-15\" aria-label=\"타입 정보 15 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryObserver</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> observer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-14\" style=\"position:relative;\">Options<a href=\"#options-14\" aria-label=\"options 14 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">queryClient: QueryClient</code>\n<ul>\n<li>관찰할 쿼리가 있는 <code class=\"language-text\">QueryClient</code> 인스턴스입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">options: QueryObserverOptions</code>\n<ul>\n<li>쿼리 데이터를 가져오기 위해 사용되는 옵션입니다. <a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"infinitequeryobserver\" style=\"position:relative;\"><code class=\"language-text\">InfiniteQueryObserver</code><a href=\"#infinitequeryobserver\" aria-label=\"infinitequeryobserver permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">InfiniteQueryObserver</code>는 무한 쿼리를 관찰합니다. <code class=\"language-text\">useInfiniteQuery</code>는 내부적으로 <code class=\"language-text\">InfiniteQueryObserver</code> 인스턴스를 만들어 사용하는데, <code class=\"language-text\">useInfiniteQuery</code> 혹을 사용하면 되기 때문에 직접 <code class=\"language-text\">InfiniteQueryObserver</code> 인스턴스를 생성하는 경우는 많지 않습니다.</p>\n<h4 id=\"타입-정보-16\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-16\" aria-label=\"타입 정보 16 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InfiniteQueryObserver</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  queryFn<span class=\"token operator\">:</span> fetchPosts<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getNextPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>lastPage<span class=\"token punctuation\">,</span> allPages<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> lastPage<span class=\"token punctuation\">.</span>nextCursor<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getPreviousPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>firstPage<span class=\"token punctuation\">,</span> allPages<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> firstPage<span class=\"token punctuation\">.</span>prevCursor<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> observer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-15\" style=\"position:relative;\">Options<a href=\"#options-15\" aria-label=\"options 15 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">queryClient: QueryClient</code>\n<ul>\n<li>관찰할 무한 쿼리가 있는 <code class=\"language-text\">QueryClient</code> 인스턴스입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">options: InfiniteQueryObserverOptions</code>\n<ul>\n<li>무한 쿼리 데이터를 가져오기 위해 사용되는 옵션입니다. <a href=\"/tech/react/tanstack-query-v5-api-reference/#options-2\"><code class=\"language-text\">useInfiniteQuery</code> 훅의 옵션</a>과 동일한 값입니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"queriesobserver\" style=\"position:relative;\"><code class=\"language-text\">QueriesObserver</code><a href=\"#queriesobserver\" aria-label=\"queriesobserver permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">QueriesObserver</code>는 쿼리들(queries)을 관찰합니다. <code class=\"language-text\">useQueries</code>의 내부적으로 <code class=\"language-text\">QueriesObserver</code> 인스턴스를 만들어 사용하는데, <code class=\"language-text\">useQueries</code> 훅을 사용하면 되기 때문에 직접 <code class=\"language-text\">QueriesObserver</code> 인스턴스를 생성하는 경우는 많지 않습니다.</p>\n<h4 id=\"타입-정보-17\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-17\" aria-label=\"타입 정보 17 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueriesObserver</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> queryFn<span class=\"token operator\">:</span> fetchPost <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> queryFn<span class=\"token operator\">:</span> fetchPost <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> observer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"options-16\" style=\"position:relative;\">Options<a href=\"#options-16\" aria-label=\"options 16 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><code class=\"language-text\">queryClient: QueryClient</code>\n<ul>\n<li>관찰할 무한 쿼리가 있는 <code class=\"language-text\">QueryClient</code> 인스턴스입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">options: QueryObserverOptions[]</code>\n<ul>\n<li>queries의 데이터를 가져오기 위해 사용되는 옵션입니다. <a href=\"/tech/react/tanstack-query-v5-api-reference/#options\"><code class=\"language-text\">useQuery</code> 훅의 옵션</a>과 동일한 값의 배열입니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"queryerrorresetboundary\" style=\"position:relative;\"><code class=\"language-text\">QueryErrorResetBoundary</code><a href=\"#queryerrorresetboundary\" aria-label=\"queryerrorresetboundary permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">suspense</code>나 <code class=\"language-text\">throwOnError</code>를 사용하면 컴포넌트에서 에러가 발생할 때 에러 화면으로 전환할 수 있습니다. 전환된 에러 화면에서 쿼리의 에러를 초기화하고 데이터를 다시 요청해야 할 때 사용하는 것이 <code class=\"language-text\">QueryErrorResetBoundary</code> 컴포넌트입니다. 아래 코드와 같이 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QueryErrorResetBoundary <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ErrorBoundary <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-error-boundary'</span>\n\n<span class=\"token keyword\">const</span> App<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryErrorResetBoundary</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> reset <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span>\n        <span class=\"token attr-name\">onReset</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>reset<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">fallbackRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> resetErrorBoundary <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            There was an error!\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resetErrorBoundary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Try again</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">QueryErrorResetBoundary</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"usequeryerrorresetboundary\" style=\"position:relative;\"><code class=\"language-text\">useQueryErrorResetBoundary</code><a href=\"#usequeryerrorresetboundary\" aria-label=\"usequeryerrorresetboundary permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useQueryErrorResetBoundary</code> 훅은 <code class=\"language-text\">QueryErrorResetBoundary</code> 컴포넌트를 훅 형태로 사용할 수 있게 합니다. 아래 코드와 같이 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQueryErrorResetBoundary <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ErrorBoundary <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-error-boundary'</span>\n\n<span class=\"token keyword\">const</span> App<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> reset <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQueryErrorResetBoundary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span>\n      <span class=\"token attr-name\">onReset</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>reset<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">fallbackRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> resetErrorBoundary <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          There was an error!\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resetErrorBoundary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Try again</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"focusmanager\" style=\"position:relative;\"><code class=\"language-text\">focusManager</code><a href=\"#focusmanager\" aria-label=\"focusmanager permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">focusManager</code>은 React Query가 포커스 될 때 발생하는 이벤트 리스너를 변경하거나, 수동으로 포커스 할 때 사용됩니다.</p>\n<h4 id=\"타입-정보-18\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-18\" aria-label=\"타입 정보 18 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li><code class=\"language-text\">focusManager.setEventListener</code>\n<ul>\n<li>이벤트 리스너를 변경할 때 사용되는 함수입니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> focusManager <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\nfocusManager<span class=\"token punctuation\">.</span><span class=\"token function\">setEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>handleFocus<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Listen to visibilitychange</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span>addEventListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'visibilitychange'</span><span class=\"token punctuation\">,</span> handleFocus<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Be sure to unsubscribe if a new handler is set</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'visibilitychange'</span><span class=\"token punctuation\">,</span> handleFocus<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">focusManager.subscribe</code>\n<ul>\n<li>포커스 상태가 변경되는 것을 구독하는 함수입니다. 구독을 취소하는 함수를 반환합니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> focusManager <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> focusManager<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>isVisible<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isVisible'</span><span class=\"token punctuation\">,</span> isVisible<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">focusManager.setFocused</code>\n<ul>\n<li>포커스 상태를 수동으로 설정할 수 있는 함수입니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> focusManager <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token comment\">// Set focused</span>\nfocusManager<span class=\"token punctuation\">.</span><span class=\"token function\">setFocused</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Set unfocused</span>\nfocusManager<span class=\"token punctuation\">.</span><span class=\"token function\">setFocused</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Fallback to the default focus check</span>\nfocusManager<span class=\"token punctuation\">.</span><span class=\"token function\">setFocused</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">focusManager.isFocused</code>\n<ul>\n<li>현재 포커스 상태를 가져오는 함수입니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> isFocused <span class=\"token operator\">=</span> focusManager<span class=\"token punctuation\">.</span><span class=\"token function\">isFocused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"onlinemanager\" style=\"position:relative;\"><code class=\"language-text\">onlineManager</code><a href=\"#onlinemanager\" aria-label=\"onlinemanager permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">onlineManager</code>은 온라인 상태를 감지하는 이벤트 리스터를 변경하거나, 수동으로 온라인 상태로 변경할 때 사용됩니다.</p>\n<h4 id=\"타입-정보-19\" style=\"position:relative;\">타입 정보<a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4-19\" aria-label=\"타입 정보 19 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li><code class=\"language-text\">onlineManager.setEventListener</code>\n<ul>\n<li>이벤트 리스너를 변경할 때 사용되는 함수입니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> NetInfo <span class=\"token keyword\">from</span> <span class=\"token string\">'@react-native-community/netinfo'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> onlineManager <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\nonlineManager<span class=\"token punctuation\">.</span><span class=\"token function\">setEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>setOnline<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> NetInfo<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setOnline</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>isConnected<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onlineManager.subscribe</code>\n<ul>\n<li>온라인 상태가 변경되는 것을 구독하는 함수입니다. 구독을 취소하는 함수를 반환합니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> onlineManager <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> onlineManager<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>isOnline<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isOnline'</span><span class=\"token punctuation\">,</span> isOnline<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onlineManager.setOnline</code>\n<ul>\n<li>온라인 상태를 수동으로 설정할 수 있는 함수입니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> onlineManager <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token comment\">// Set to online</span>\nonlineManager<span class=\"token punctuation\">.</span><span class=\"token function\">setOnline</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Set to offline</span>\nonlineManager<span class=\"token punctuation\">.</span><span class=\"token function\">setOnline</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">onlineManager.isOnline</code>\n<ul>\n<li>현재 온라인 상태를 가져오는 함수입니다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> onlineManager<span class=\"token punctuation\">.</span><span class=\"token function\">isOnline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://tanstack.com/query/v5/docs/framework/react/overview\">https://tanstack.com/query/v5/docs/framework/react/overview</a></li>\n<li><a href=\"https://tanstack.com/blog/announcing-tanstack-query-v5\">https://tanstack.com/blog/announcing-tanstack-query-v5</a></li>\n<li><a href=\"https://velog.io/@hyunjine/Inside-React-Query\">https://velog.io/@hyunjine/Inside-React-Query</a></li>\n<li><a href=\"https://leego.tistory.com/entry/react-query%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%A0%EA%B9%8C\">https://leego.tistory.com/entry/react-query는-어떻게-작동할까</a></li>\n<li><a href=\"https://fe-developers.kakaoent.com/2023/230720-react-query/\">https://fe-developers.kakaoent.com/2023/230720-react-query/</a></li>\n<li><a href=\"https://velog.io/@hyunjine/Inside-React-Query\">https://velog.io/@hyunjine/Inside-React-Query</a></li>\n<li><a href=\"https://velog.io/@dev_jazziron/React-Query-Render-Optimizations\">https://velog.io/@dev_jazziron/React-Query-Render-Optimizations</a></li>\n<li><a href=\"https://yiyb-blog.vercel.app/posts/error-boundary-with-react-query\">https://yiyb-blog.vercel.app/posts/error-boundary-with-react-query</a></li>\n<li><a href=\"https://velog.io/@suyeon9456/React-Query-Error-Boundary-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">https://velog.io/@suyeon9456/React-Query-Error-Boundary-적용하기</a></li>\n<li><a href=\"https://www.timegambit.com/blog/digging/react-query/01\">https://www.timegambit.com/blog/digging/react-query/01</a></li>\n<li><a href=\"https://www.timegambit.com/blog/digging/react-query/02\">https://www.timegambit.com/blog/digging/react-query/02</a></li>\n<li><a href=\"https://www.timegambit.com/blog/digging/react-query/03\">https://www.timegambit.com/blog/digging/react-query/03</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#react-query-%EA%B5%AC%EC%A1%B0\">React Query 구조</a></p>\n</li>\n<li>\n<p><a href=\"#react-query-api-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\">React Query API 레퍼런스</a></p>\n<ul>\n<li><a href=\"#usequery\"><code class=\"language-text\">useQuery</code></a></li>\n<li><a href=\"#usequeries\"><code class=\"language-text\">useQueries</code></a></li>\n<li><a href=\"#useinfinitequery\"><code class=\"language-text\">useInfiniteQuery</code></a></li>\n<li><a href=\"#usemutation\"><code class=\"language-text\">useMutation</code></a></li>\n<li><a href=\"#useisfetching\"><code class=\"language-text\">useIsFetching</code></a></li>\n<li><a href=\"#useismutating\"><code class=\"language-text\">useIsMutating</code></a></li>\n<li><a href=\"#querycache\"><code class=\"language-text\">QueryCache</code></a></li>\n<li><a href=\"#mutationcache\"><code class=\"language-text\">MutationCache</code></a></li>\n<li><a href=\"#usemutationstate\"><code class=\"language-text\">useMutationState</code></a></li>\n<li><a href=\"#usesuspensequery\"><code class=\"language-text\">useSuspenseQuery</code></a></li>\n<li><a href=\"#usesuspenseinfinitequery\"><code class=\"language-text\">useSuspenseInfiniteQuery</code></a></li>\n<li><a href=\"#usesuspensequeries\"><code class=\"language-text\">useSuspenseQueries</code></a></li>\n<li><a href=\"#queryclient\"><code class=\"language-text\">QueryClient</code></a></li>\n<li><a href=\"#usequeryclient\"><code class=\"language-text\">useQueryClient</code></a></li>\n<li><a href=\"#queryclientprovider\"><code class=\"language-text\">QueryClientProvider</code></a></li>\n<li><a href=\"#queryobserver\"><code class=\"language-text\">QueryObserver</code></a></li>\n<li><a href=\"#infinitequeryobserver\"><code class=\"language-text\">InfiniteQueryObserver</code></a></li>\n<li><a href=\"#queriesobserver\"><code class=\"language-text\">QueriesObserver</code></a></li>\n<li><a href=\"#queryerrorresetboundary\"><code class=\"language-text\">QueryErrorResetBoundary</code></a></li>\n<li><a href=\"#usequeryerrorresetboundary\"><code class=\"language-text\">useQueryErrorResetBoundary</code></a></li>\n<li><a href=\"#focusmanager\"><code class=\"language-text\">focusManager</code></a></li>\n<li><a href=\"#onlinemanager\"><code class=\"language-text\">onlineManager</code></a></li>\n</ul>\n</li>\n</ul>","timeToRead":56,"excerpt":"2023년 10월 TanStack Query v5가 정식 버전으로 릴리즈 되었습니다. 이번 포스터에서는 TanStack Query v5의 React Query를 멋있게 사용할 수 있도록 React Query의 API를 살펴보도록 하겠습니다. React…","frontmatter":{"title":"[React] TanStack Query v5 (React Query) API 레퍼런스","thumbnail":"react/tanstack-query-v5.png","summary":"2023년 10월 TanStack Query v5가 정식 버전으로 릴리즈 되었습니다. 이번 포스터에서는 TanStack Query v5의 React Query를 멋있게 사용할 수 있도록 React Query의 API를 살펴보도록 하겠습니다."},"fields":{"createdDate":"2024-01-28"}}},"pageContext":{"slug":"/tech/react/tanstack-query-v5-api-reference/","image":"react/tanstack-query-v5.png","next":{"frontmatter":{"title":"[ETC] Forward Proxy와 Reverse Proxy"},"fields":{"slug":"/tech/etc/forward-proxy-reverse-proxy/"}},"previous":{"frontmatter":{"title":"[React] Suspense"},"fields":{"slug":"/tech/react/suspense/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}