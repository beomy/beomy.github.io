{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/svelte/reactivity-syntax/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/6cba2a6d2bc09914271f2ea7b868a8c9/f635c/svelte.png","srcSet":"/static/6cba2a6d2bc09914271f2ea7b868a8c9/a5da5/svelte.png 300w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/cadb4/svelte.png 750w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/feb73/svelte.png 1080w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/6032c/svelte.png 1366w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/3d4b2/svelte.png 1920w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/f635c/svelte.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/6cba2a6d2bc09914271f2ea7b868a8c9/29f5b/svelte.webp 300w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/11ba1/svelte.webp 750w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/089e1/svelte.webp 1080w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/ad4fd/svelte.webp 1366w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/d8a73/svelte.webp 1920w,\n/static/6cba2a6d2bc09914271f2ea7b868a8c9/a28c0/svelte.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p>이번 포스트에서는 사용자 행동에 따라 반응형으로 동작하는 웹을 만들기 위한 Svelte 문법을 이야기합니다. Vue.js에 이벤트 리스너(Event Listener)를 등록하듯 Svelte에서 이벤트 리스너를 등록하는 방법과 Vue.js의 <code class=\"language-text\">computed</code> 속성, <code class=\"language-text\">watch</code> 속성과 유사한 동작을 하는 Svelte의 <code class=\"language-text\">$</code> 문법을 이야기합니다.</p>\n<h2 id=\"이벤트-리스너\" style=\"position:relative;\">이벤트 리스너<a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A6%AC%EC%8A%A4%EB%84%88\" aria-label=\"이벤트 리스너 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Svelte에서 이벤트 리스너를 등록하는 방법을 살펴보도록 하겠습니다. Vue.js에서 클릭 이벤트를 등록하는 방법은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Clicked {{count}} {{count === 1 ? 'time' : 'times'}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위의 코드를 Svelte에서는 아래와 같이 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{handleClick}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  Clicked {count} {count === 1 ? 'time' : 'times'}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위의 코드와 같이 <code class=\"language-text\">on:이벤트 이름=\"{핸들러 함수}\"</code>로 이벤트 리스너를 등록할 수 있습니다. <code class=\"language-text\">이벤트 이름</code>에는 <code class=\"language-text\">click</code>, <code class=\"language-text\">change</code>와 같이 DOM 이벤트 이름을 선언해 주면 됩니다. 실행되는 <code class=\"language-text\">핸들러 함수</code>는 단순 함수로 정의하면 됩니다.</p>\n<h2 id=\"-문법\" style=\"position:relative;\">$ 문법<a href=\"#-%EB%AC%B8%EB%B2%95\" aria-label=\" 문법 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Svelte의 <code class=\"language-text\">$</code> 문법은 Vue.js의 <code class=\"language-text\">computed</code>와 <code class=\"language-text\">watch</code>를 합쳐 놓은 문법으로 볼 수 있습니다. <code class=\"language-text\">$</code> 문법을 Vue.js의 <code class=\"language-text\">computed</code>와 유사하게 사용하는 방법, <code class=\"language-text\">watch</code>와 유사하게 사용하는 방법 2가지를 이야기하겠습니다.</p>\n<h3 id=\"선언형-문법\" style=\"position:relative;\">선언형 문법<a href=\"#%EC%84%A0%EC%96%B8%ED%98%95-%EB%AC%B8%EB%B2%95\" aria-label=\"선언형 문법 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">$</code>의 선언형 문법은 Vue.js의 <code class=\"language-text\">computed</code>와 유사합니다. Vue.js에서 <code class=\"language-text\">computed</code>는 아래와 같이 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      Clicked {{count}} {{count === 1 ? 'time' : 'times'}}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{{count}} doubled is {{doubled}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">double</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Svelte에서는 <code class=\"language-text\">$</code> 문법을 사용해서 아래와 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">$</span><span class=\"token operator\">:</span> doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{handleClick}</span><span class=\"token punctuation\">></span></span>\n  Clicked {count} {count === 1 ? 'time' : 'times'}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{count} doubled is {doubled}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">$</code> 문법은 잘 사용하지는 않지만, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\">Label</a>이라는 자바스크립트 문법입니다. Svelte에서는 참조 된 값이 변경될 때마다 이 코드가 다시 실행한다는 의미의 라벨 이름으로 <code class=\"language-text\">$</code>를 사용하는 것입니다. 위의 코드의 경우 <code class=\"language-text\">count</code>가 변경되면 <code class=\"language-text\">$:</code> 이하의 자바스크립트가 다시 실행됩니다.</p>\n<h3 id=\"실행형-문법\" style=\"position:relative;\">실행형 문법<a href=\"#%EC%8B%A4%ED%96%89%ED%98%95-%EB%AC%B8%EB%B2%95\" aria-label=\"실행형 문법 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">$</code>의 실행형 문법은 Vue.js의 <code class=\"language-text\">watch</code>와 유사합니다. Vue.js에서 <code class=\"language-text\">watch</code>는 아래와 같이 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Clicked {{count}} {{count === 1 ? 'time' : 'times'}}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">count</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">count is dangerously high!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Svelte에서는 <code class=\"language-text\">$</code> 문법을 사용해서 아래와 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token literal-property property\">$</span><span class=\"token operator\">:</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">count is dangerously high!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{handleClick}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  Clicked {count} {count === 1 ? 'time' : 'times'}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">$</code>의 선언형 문법을 사용했을 때와 동일하게 참조 된 값이 변경될 때마다 <code class=\"language-text\">$:</code> 이하의 자바스크립트가 다시 실행됩니다. 위의 코드의 경우 <code class=\"language-text\">count</code>가 변경될 때 <code class=\"language-text\">if</code> 문이 실행됩니다.</p>\n<h2 id=\"주의사항\" style=\"position:relative;\">주의사항<a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"주의사항 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Vue.js와 Svelte는 반응형 동작 방식이 다릅니다. Vue.js에서는 <code class=\"language-text\">push</code>, <code class=\"language-text\">splice</code>, <code class=\"language-text\">sort</code>, <code class=\"language-text\">pop</code> 등의 Array 메서드를 사용하면 반응형이 동작하지만 Svelte에서는 변수의 재할당이 되어야 반응형이 동작합니다.</p>\n<p>Vue.js와 Svelte 코드 두 개를 비교해 보도록 하겠습니다. 먼저 Vue.js 코드를 살펴보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{{numbers.join(' + ')}} = {{sum}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addNumber<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      Add a number\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> t <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">addNumber</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위의 코드와 같이 Vue.js는 Array 메서드인 <code class=\"language-text\">push</code>를 사용하여 값을 변경되면 반응형이 동작합니다. 동일한 동작을 하는 Svelte 코드는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">addNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n    또는,\n    numbers.push(numbers.length + 1);\n    numbers = numbers;\n    또는,\n    numbers[numbers.length] = numbers.length + 1;\n    */</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token literal-property property\">$</span><span class=\"token operator\">:</span> sum <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> t <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{numbers.join(' + ')} = {sum}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{addNumber}</span><span class=\"token punctuation\">></span></span>\n  Add a number\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위의 코드와 같이 Svelte는 변수에 재할당이 되어야 반응형이 동작합니다.</p>\n<p>재할당 할 때 한 가지 규칙이 있습니다. 반응형으로 업데이트되어야 하는 변수가 재할당식에 왼쪽에 와야 합니다. 예를 들어 아래 코드는 반응형 동작을 하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>반응형으로 업데이트되어야 하는 변수, <code class=\"language-text\">obj</code>가 재할당식에 왼쪽에 와야 반응형으로 동작을 할 수 있는데, 위의 코드의 경우 <code class=\"language-text\">foo</code>가 왼쪽에 있기 때문에 반응형 동작을 하지 않습니다. 위의 코드가 반응형으로 동작하기 위해서는,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span>\nobj <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드와 같이 재할당식에 왼쪽에 <code class=\"language-text\">obj</code>가 오도록 수정해야 합니다.</p>\n<h2 id=\"고찰\" style=\"position:relative;\">고찰<a href=\"#%EA%B3%A0%EC%B0%B0\" aria-label=\"고찰 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Vue.js를 사용하는 입장에서 Svelte를 사용하면서 느꼈던 단점들을 정리해보았습니다. 장점들도 많지만 단점들만 작성해 보았어요.</p>\n<h3 id=\"코드-관리\" style=\"position:relative;\">코드 관리<a href=\"#%EC%BD%94%EB%93%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"코드 관리 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Vue.js의 경우, 데이터는 <code class=\"language-text\">data</code> 속성에, 사용되는 함수들은 <code class=\"language-text\">methods</code> 속성에 그 밖에 <code class=\"language-text\">computed</code> 속성과 <code class=\"language-text\">watch</code> 속성이 있어 의도에 따라 코드를 분리할 수 있습니다. 반면에, Svelte는 <code class=\"language-text\">&lt;script></code> 태그 안에 이벤트 핸들러 함수와, 화면에 나타나는 데이터들, 혹은 화면에는 나타나지는 않지만 필요한 변수들 모두 정의됩니다. 프로젝트 규모가 커지고, 코드 양이 많아지면 Svelte의 경우 코드가 여기저기 나눠질 가능성이 있어 보였습니다.</p>\n<h3 id=\"반응형-동작\" style=\"position:relative;\">반응형 동작<a href=\"#%EB%B0%98%EC%9D%91%ED%98%95-%EB%8F%99%EC%9E%91\" aria-label=\"반응형 동작 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>반응형 동작의 경우에는 Vue.js는 <code class=\"language-text\">splice</code>, <code class=\"language-text\">sort</code>, <code class=\"language-text\">push</code>, <code class=\"language-text\">pop</code> 등의 Array 메서드를 사용하면 반응형이 동작하지만 Svelte의 경우에는 재할당이 일어나야만 반응형이 동작하기 때문에 익숙하지 않아 불편했습니다. 또한 Array 메서드를 사용하고도 재할당 코드를 작성해야 하는 불필요한 코드가 추가되는 단점이 있었습니다.</p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://svelte.dev/tutorial/reactive-assignments\">https://svelte.dev/tutorial/reactive-assignments</a></li>\n<li><a href=\"https://svelte.dev/tutorial/reactive-declarations\">https://svelte.dev/tutorial/reactive-declarations</a></li>\n<li><a href=\"https://svelte.dev/tutorial/reactive-statements\">https://svelte.dev/tutorial/reactive-statements</a></li>\n<li><a href=\"https://svelte.dev/tutorial/updating-arrays-and-objects\">https://svelte.dev/tutorial/updating-arrays-and-objects</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A6%AC%EC%8A%A4%EB%84%88\">이벤트 리스너</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%AC%B8%EB%B2%95\">$ 문법</a></p>\n<ul>\n<li><a href=\"#%EC%84%A0%EC%96%B8%ED%98%95-%EB%AC%B8%EB%B2%95\">선언형 문법</a></li>\n<li><a href=\"#%EC%8B%A4%ED%96%89%ED%98%95-%EB%AC%B8%EB%B2%95\">실행형 문법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\">주의사항</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B3%A0%EC%B0%B0\">고찰</a></p>\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EA%B4%80%EB%A6%AC\">코드 관리</a></li>\n<li><a href=\"#%EB%B0%98%EC%9D%91%ED%98%95-%EB%8F%99%EC%9E%91\">반응형 동작</a></li>\n</ul>\n</li>\n</ul>","timeToRead":5,"excerpt":"이번 포스트에서는 사용자 행동에 따라 반응형으로 동작하는 웹을 만들기 위한 Svelte 문법을 이야기합니다. Vue.js에 이벤트 리스너(Event Listener)를 등록하듯 Svelte에서 이벤트 리스너를 등록하는 방법과 Vue.js…","frontmatter":{"title":"[Svelte] 반응형을 위한 문법","thumbnail":"svelte/svelte.png","summary":"사용자 행동에 따라 반응형으로 동작하는 웹을 만들기 위한 Svelte 문법을 이야기합니다."},"fields":{"createdDate":"2020-02-07"}}},"pageContext":{"slug":"/tech/svelte/reactivity-syntax/","image":"svelte/svelte.png","next":{"frontmatter":{"title":"[Svelte] Props"},"fields":{"slug":"/tech/svelte/props/"}},"previous":{"frontmatter":{"title":"[Svelte] Svelte 기초 문법"},"fields":{"slug":"/tech/svelte/basic-svelte/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}