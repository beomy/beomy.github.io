{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/vuejs/reactive-lazy-sync-queue/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png","srcSet":"/static/3667f690df14d116a821ba4acb8686fb/a5da5/vuejs.png 300w,\n/static/3667f690df14d116a821ba4acb8686fb/cadb4/vuejs.png 750w,\n/static/3667f690df14d116a821ba4acb8686fb/feb73/vuejs.png 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/6032c/vuejs.png 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/3d4b2/vuejs.png 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/3667f690df14d116a821ba4acb8686fb/29f5b/vuejs.webp 300w,\n/static/3667f690df14d116a821ba4acb8686fb/11ba1/vuejs.webp 750w,\n/static/3667f690df14d116a821ba4acb8686fb/089e1/vuejs.webp 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/ad4fd/vuejs.webp 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/d8a73/vuejs.webp 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/a28c0/vuejs.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p>이전 포스트(<a href=\"/tech/vuejs/reactive-observer-dep-watcher/\">5. Reactive - Observer, Dep and Watcher</a>)에서는 <code class=\"language-text\">Observer</code>와 <code class=\"language-text\">Dep</code>, <code class=\"language-text\">Watcher</code>의 관계에 대해 이야기하였습니다. 이번 포스트에서는 <code class=\"language-text\">Watcher</code>가 어떻게 값을 업데이트 하는지, View와 data의 업데이트 순서가 어떻게 결정되는지에 대해 야야기 하도록 하겠습니다.</p>\n<h2 id=\"watcher가-업데이트-하는-3가지-방법\" style=\"position:relative;\">Watcher가 업데이트 하는 3가지 방법<a href=\"#watcher%EA%B0%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%98%EB%8A%94-3%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95\" aria-label=\"watcher가 업데이트 하는 3가지 방법 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">defineReactive</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span>\n  customSetter<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Function<span class=\"token punctuation\">,</span>\n  shallow<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">let</span> childOb <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>shallow <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveGetter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveSetter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드를 보면, 반응형 프로퍼티가 업데이트 되면 setter 함수에서 <code class=\"language-text\">dep.notify()</code>를 호출합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dep</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> subs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      subs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Dep</code> 클래스의 <code class=\"language-text\">notify</code> 함수는 <code class=\"language-text\">subs[i].update()</code>(<code class=\"language-text\">Watcher</code> 클래스에 <code class=\"language-text\">update</code> 함수가 정의되어 있습니다)를 호출합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */</span>\n<span class=\"token function\">update</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* istanbul ignore else */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lazy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">queueWatcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">update</code> 함수를 살펴보면, lazy, sync, queue, 3가지 방식으로 업데이트하는 것을 볼 수 있습니다.</p>\n<h3 id=\"lazy\" style=\"position:relative;\">Lazy<a href=\"#lazy\" aria-label=\"lazy permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>lazy 옵션은 Watcher 인스턴스를 생성할 때 파라미터로 전달됩니다. <code class=\"language-text\">this.lazy</code>가 <code class=\"language-text\">true</code>일 경우, <code class=\"language-text\">this.dirty</code>가 <code class=\"language-text\">true</code>가 됩니다.(변수명을 해석하면.. 게으르면 더럽습니다. 가 되네요) <code class=\"language-text\">dirty</code>가 사용되는 코드를 보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */</span>\n<span class=\"token function\">evaluate</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Watcher</code> 클래스의 <code class=\"language-text\">evaluate</code> 함수에서 사용됩니다. <code class=\"language-text\">evaluate</code> 함수는 <code class=\"language-text\">this.get()</code>를 호출하고 리턴 값을 <code class=\"language-text\">this.value</code>에 저장한 후 <code class=\"language-text\">this.dirty</code>를 <code class=\"language-text\">false</code>로 만들어 줍니다.</p>\n<p>이제 <code class=\"language-text\">evaluate</code> 함수를 사용하는 곳을 전체 프로젝트에서 찾아 봅시다.</p>\n<p><img src=\"/assets/img/posts/vuejs/used_evaluate_function.png\" alt=\"evaluate 함수 사용\"></p>\n<p>core 디렉토리 밑에서 <code class=\"language-text\">src/core/instance/state.js</code> 파일에서 <code class=\"language-text\">evaluate</code> 함수를 사용하는 것을 볼 수 있습니다.\n<code class=\"language-text\">src/core/instance/state.js</code> 파일은 <a href=\"/tech/vuejs/initialize-mixin-layer/\">3. Initialize - Mixin Layer</a>와 <a href=\"/tech/vuejs/initialize-_init-function/\">4. Initialize - _init 함수</a>에서 살펴보았던 파일입니다.</p>\n<p><code class=\"language-text\">evaluate</code> 함수는 <code class=\"language-text\">src/core/instance/state.js</code> 파일의 <code class=\"language-text\">createComputedGetter</code> 함수에서 사용 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createComputedGetter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">computedGetter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_computedWatchers <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_computedWatchers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        watcher<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        watcher<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> watcher<span class=\"token punctuation\">.</span>value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 이름에서 알 수 있듯이 <code class=\"language-text\">computed</code> 프로퍼티의 getter 함수를 생성하는 함수입니다. <code class=\"language-text\">computedGetter</code> 함수가 호출되면, <code class=\"language-text\">watcher.dirty</code>가 <code class=\"language-text\">true</code> 일 경우 <code class=\"language-text\">watcher.evaluate()</code>를 호출합니다. lazy 모드일 경우 실제로 값이 필요할 때까지 평가(evaluate)를 미룰 수 있습니다.</p>\n<h3 id=\"sync\" style=\"position:relative;\">Sync<a href=\"#sync\" aria-label=\"sync permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">update</code> 함수를 보면, <code class=\"language-text\">this.sync</code>가 <code class=\"language-text\">true</code>일 경우(기본값은 <code class=\"language-text\">false</code>입니다), <code class=\"language-text\">this.run()</code>을 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */</span>\n<span class=\"token function\">run</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      value <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span>\n      <span class=\"token comment\">// Deep watchers and watchers on Object/Arrays should fire even</span>\n      <span class=\"token comment\">// when the value is the same, because the value may</span>\n      <span class=\"token comment\">// have mutated.</span>\n      <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deep\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// set new value</span>\n      <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">callback for watcher \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">run</code> 함수는 <code class=\"language-text\">this.get()</code>(<code class=\"language-text\">get</code> 함수는 <a href=\"/tech/vuejs/reactive-observer-dep-watcher/\">5. Reactive - Observer, Dep and Watcher</a>에서 살펴보았습니다.)을 호출합니다. <code class=\"language-text\">value</code>의 값이 변경 되었거나, <code class=\"language-text\">value</code>가 object이거나, <code class=\"language-text\">this.deep</code>이 <code class=\"language-text\">true</code>일 경우 <code class=\"language-text\">value</code>와 <code class=\"language-text\">oldValue</code>를 세팅한 후 콜백함수(<code class=\"language-text\">this.cb.call(this.vm, value, oldValue)</code>)를 실행합니다.</p>\n<h3 id=\"queue\" style=\"position:relative;\">Queue<a href=\"#queue\" aria-label=\"queue permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>lazy, sync 모드가 아닐 경우, queue 모드로 동작합니다. queue 모드에서 <code class=\"language-text\">update</code> 함수에서 <code class=\"language-text\">queueWatcher(this)</code>를 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">queueWatcher</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">watcher</span><span class=\"token operator\">:</span> Watcher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> watcher<span class=\"token punctuation\">.</span>id\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>has<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    has<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flushing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// if already flushing, splice the watcher based on its id</span>\n      <span class=\"token comment\">// if already past its id, it will be run next immediately.</span>\n      <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> index <span class=\"token operator\">&amp;&amp;</span> queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">></span> watcher<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        i<span class=\"token operator\">--</span>\n      <span class=\"token punctuation\">}</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> watcher<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// queue the flush</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>waiting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      waiting <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>async<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">flushSchedulerQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span>flushSchedulerQueue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">flushing</code>이 <code class=\"language-text\">false</code>일 경우, 간단한 <code class=\"language-text\">push</code> 메소드를 호출합니다. <code class=\"language-text\">flushing</code>이 <code class=\"language-text\">true</code>일 경우 <code class=\"language-text\">watcher.id</code>의 바로 오른쪽에 <code class=\"language-text\">splice</code>를 이용하여 삽입 됩니다. 이렇게 하여, 바로 다음에 호출되도록 합니다. (queue가 flush 되고 있다는 것은 queue안에 있는 watcher들이 동작하고 있는 상태라고 이해 할 수 있을 것 같습니다.)</p>\n<p>마지막으로 <code class=\"language-text\">waiting</code>이 <code class=\"language-text\">false</code>일 때, <code class=\"language-text\">nextTick</code>에 <code class=\"language-text\">flushSchedulerQueue</code>를 호출합니다.</p>\n<p>Vue를 사용하면서 <code class=\"language-text\">nextTick</code>이라는 함수를 보셨을 것입니다. Vue는 매 Tick 마다 view의 변경 사항을 DOM에 그립니다. <code class=\"language-text\">nextTick</code> 함수는 다음 tick에 파라미터로 넘겨준 콜백함수를 호출됩니다.</p>\n<p><code class=\"language-text\">queueWatcher</code> 함수를 보면 2개의 flag(<code class=\"language-text\">flushing</code>, <code class=\"language-text\">waiting</code>)를 사용하는 것을 볼 수 있습니다. 2개의 flag를 사용하는 이유는, <code class=\"language-text\">nextTick</code> 함수로 인해 <code class=\"language-text\">flushSchedulerQueue</code> 함수가 즉시 실행 되지 않고 다음 tick에 실행되게 됩니다. 한 tick에 <code class=\"language-text\">queueWatcher</code> 함수가 여러번 호출되면, 다음 tick에 동시에 <code class=\"language-text\">flushSchedulerQueue</code>가 여러번 호출됩니다. 한번의 tick에 한번의 <code class=\"language-text\">flushSchedulerQueue</code>를 호출하기 위해 <code class=\"language-text\">waiting</code> flag를 사용합니다.</p>\n<p>즉, <code class=\"language-text\">flushing</code> flag는 queue에 있는 watcher가 동작하고 있는 것을 나타내는 flag이고, <code class=\"language-text\">waiting</code> flag를 한번의 tick에 한번의 <code class=\"language-text\">flushSchedulerQueue</code>를 호출하기 위해 사용됩니다.</p>\n<h2 id=\"view-업데이트를-트리거하는-방법\" style=\"position:relative;\">View 업데이트를 트리거하는 방법<a href=\"#view-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EB%A5%BC-%ED%8A%B8%EB%A6%AC%EA%B1%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"view 업데이트를 트리거하는 방법 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>watcher가 value를 업데이트 하는 것을 살펴 보았습니다. 이제까지 살펴본 watcher는 <code class=\"language-text\">computed</code> 프로퍼티와 <code class=\"language-text\">watch</code>의 콜백함수를 호출하는데 사용되었습니다.</p>\n<p>view를 업데이트 하는데 watcher가 사용될 것 같은데, 지금까지 살펴본 코드 어디에서도 view를 업데이트 하는 부분이 등장하지 않았습니다. view를 업데이트 하는 코드를 찾을 수 있는 단서는 <a href=\"/tech/vuejs/initialize-mixin-layer/#lifecyclemixin-%ED%95%A8%EC%88%98\">3. Initialize - Mixin Layer</a>에서 살펴본 <code class=\"language-text\">_update</code> 함수입니다. <code class=\"language-text\">_update</code> 함수는 DOM을 업데이트하는 역할을 합니다. <code class=\"language-text\">_update</code>를 프로젝트 전체 검색으로 어디서 사용되는지 찾아보도록 하겠습니다.</p>\n<p><img src=\"/assets/img/posts/vuejs/used_update_function.png\" alt=\"_update 함수 사용\"></p>\n<p><code class=\"language-text\">src/core/instance/lifecycle.js</code> 파일에서 <code class=\"language-text\">vm._update</code>으로 <code class=\"language-text\">_update</code> 함수를 호출하는 것을 볼 수 있습니다. <code class=\"language-text\">mountComponent</code> 함수에서 <code class=\"language-text\">vm._update(vnode, hydrating)</code>와 <code class=\"language-text\">vm._update(vm._render(), hydrating)</code>를 호출합니다. <code class=\"language-text\">mountComponent</code> 함수(<code class=\"language-text\">mountComponent</code> 함수는 <code class=\"language-text\">$mount</code>의 코어 함수 입니다)는 <a href=\"/tech/vuejs/view-render-patch/\">9. View Render - Patch</a>에서 자세히 살펴 볼 것이기 때문에 지금은 간단히 살펴보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mountComponent</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Element<span class=\"token punctuation\">,</span>\n  hydrating<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">let</span> updateComponent\n  <span class=\"token comment\">/* istanbul ignore if */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>performance <span class=\"token operator\">&amp;&amp;</span> mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">updateComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n      vm<span class=\"token punctuation\">.</span><span class=\"token function\">_update</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">updateComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span><span class=\"token function\">_update</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// we set this to vm._watcher inside the watcher's constructor</span>\n  <span class=\"token comment\">// since the watcher's initial patch may call $forceUpdate (e.g. inside child</span>\n  <span class=\"token comment\">// component's mounted hook), which relies on vm._watcher being already defined</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> updateComponent<span class=\"token punctuation\">,</span> noop<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">before</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_isMounted <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>vm<span class=\"token punctuation\">.</span>_isDestroyed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeUpdate'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* isRenderWatcher */</span><span class=\"token punctuation\">)</span>\n  hydrating <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">new Watcher(...)</code>를 찾아냈습니다. <code class=\"language-text\">lazy</code>의 기본 값은 <code class=\"language-text\">false</code>이기 때문에 생성자 함수에서 <code class=\"language-text\">get</code> 함수가 호출되고, <code class=\"language-text\">Dep</code>와 <code class=\"language-text\">Watcher</code>, <code class=\"language-text\">Observer</code> 간의 관계가 만들어 집니다. (<a href=\"/tech/vuejs/reactive-observer-dep-watcher/\">5. Reactive - Observer, Dep and Watcher</a> 참고)</p>\n<p><code class=\"language-text\">updateComponent</code> 함수가 watcher의 getter 함수로 전달됩니다. watcher는 getter 함수로 전달된 <code class=\"language-text\">updateComponent</code> 함수를 실행하여 view가 업데이트됩니다.</p>\n<p>반응형으로 view를 업데이트 하는 방법은 <code class=\"language-text\">initRender</code> 함수에서 호출하는 <code class=\"language-text\">defineReactive</code>가 핵심입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initRender</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">/* istanbul ignore else */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'$attrs'</span><span class=\"token punctuation\">,</span> parentData <span class=\"token operator\">&amp;&amp;</span> parentData<span class=\"token punctuation\">.</span>attrs <span class=\"token operator\">||</span> emptyObject<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">!</span>isUpdatingChildComponent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">$attrs is readonly.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'$listeners'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>_parentListeners <span class=\"token operator\">||</span> emptyObject<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">!</span>isUpdatingChildComponent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">$listeners is readonly.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'$attrs'</span><span class=\"token punctuation\">,</span> parentData <span class=\"token operator\">&amp;&amp;</span> parentData<span class=\"token punctuation\">.</span>attrs <span class=\"token operator\">||</span> emptyObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'$listeners'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>_parentListeners <span class=\"token operator\">||</span> emptyObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드를 보면 <code class=\"language-text\">$attrs</code>와 <code class=\"language-text\">$listeners</code>이 변경 되었을 때 view가 업데이트 됩니다.</p>\n<h2 id=\"업데이트-순서를-정하는-방법\" style=\"position:relative;\">업데이트 순서를 정하는 방법<a href=\"#%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EC%88%9C%EC%84%9C%EB%A5%BC-%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"업데이트 순서를 정하는 방법 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ newName }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">newName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'new!'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위의 코드를 살펴보면, 하나의 <code class=\"language-text\">data</code> 프로퍼티(<code class=\"language-text\">name</code>), 하나의 <code class=\"language-text\">computed</code> 프로퍼티(<code class=\"language-text\">newName</code>)이 있고, <code class=\"language-text\">computed</code> 프로퍼티를 view에 나타내는 예제입니다.</p>\n<p>위의 코드가 초기화 되면, 하나의 반응형 프로퍼티(<code class=\"language-text\">data</code>)와 그것을 구독(subscribe)하는 2개의 watcher(<code class=\"language-text\">computed</code>, view)가 생성됩니다. (<code class=\"language-text\">computed</code> 프로퍼티는 반응형 프로퍼티가 아닌 watcher이기 때문에 view는 <code class=\"language-text\">data</code> 프로퍼티를 구독합니다.)</p>\n<p><code class=\"language-text\">name</code>이 변경되면, <code class=\"language-text\">computed</code> 프로퍼티와 view가 모두 업데이트 되어야 합니다. 여기서 업데이트 순서가 중요한데, view를 업데이트 하고 <code class=\"language-text\">computed</code> 프로퍼티를 업데이트 하는 순서라면 view는 이전의 <code class=\"language-text\">computed</code> 프로퍼티의 값을 그리게 됩니다.</p>\n<p><code class=\"language-text\">name</code>이 변경되면, <code class=\"language-text\">dep.notify()</code>가 호출되고, <code class=\"language-text\">notify</code> 함수는 watcher의 <code class=\"language-text\">update()</code>를 호출하여 값을 업데이트 합니다. <code class=\"language-text\">lazy</code>와 <code class=\"language-text\">sync</code>의 기본 값은 모두 <code class=\"language-text\">false</code>이기 때문에 <code class=\"language-text\">queueWatcher(this)</code>가 호출 되고, 마지막으로 <code class=\"language-text\">nextTick(flushSchedulerQueue)</code>가 호출됩니다. 업데이트 순서를 살펴보기 위해 <code class=\"language-text\">flushSchedulerQueue</code>를 살펴보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Flush both queues and run the watchers.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">flushSchedulerQueue</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">// Sort queue before flush.</span>\n  <span class=\"token comment\">// This ensures that:</span>\n  <span class=\"token comment\">// 1. Components are updated from parent to child. (because parent is always</span>\n  <span class=\"token comment\">//    created before the child)</span>\n  <span class=\"token comment\">// 2. A component's user watchers are run before its render watcher (because</span>\n  <span class=\"token comment\">//    user watchers are created before the render watcher)</span>\n  <span class=\"token comment\">// 3. If a component is destroyed during a parent component's watcher run,</span>\n  <span class=\"token comment\">//    its watchers can be skipped.</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>queue를 id 순서로 정렬됩니다. 즉, id 값이 작을 수록 먼저 업데이트 됩니다. <a href=\"/tech/vuejs/initialize-_init-function/#_init-%ED%95%A8%EC%88%98-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">4. Initialize - _init 함수</a>에서 살펴보았던 <code class=\"language-text\">_init</code> 함수를 다시 살펴보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// expose real self</span>\n  vm<span class=\"token punctuation\">.</span>_self <span class=\"token operator\">=</span> vm\n  <span class=\"token function\">initLifecycle</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">initEvents</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">initRender</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeCreate'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">initInjections</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span> <span class=\"token comment\">// resolve injections before data/props</span>\n  <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">initProvide</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span> <span class=\"token comment\">// resolve provide after data/props</span>\n  <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'created'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">vm.$mount(vm.$options.el)</code>가 가장 마지막에 호출되는 것을 볼 수 있습니다. <code class=\"language-text\">$mount</code> 함수는 <code class=\"language-text\">mountComponent</code>(<a href=\"/tech/vuejs/initialize-mixin-layer/#lifecyclemixin-%ED%95%A8%EC%88%98\">3. Initialize - Mixin Layer</a>에서 이야기 했습니다.)를 호출하는데 <code class=\"language-text\">mountComponent</code> 함수는 <code class=\"language-text\">Watcher</code> 인스턴스를 생성합니다. 가장 마지막에 호출되기 때문에 가장 큰 id를 할당 받아 가장 마지막에 view가 업데이트 되게 됩니다.</p>\n<h2 id=\"요약\" style=\"position:relative;\">요약<a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>이번 포스트에서는 Watcher가 업데이트하는 lazy, sync, queue 3가지 방법에 대해 이야기 했습니다. 기본값은 queue 모드입니다.</p>\n<ul>\n<li>lazy 모드는 값이 실제로 필요할 때까지 Watcher의 평가를 미루는 모드입니다.</li>\n<li>sync 모드는 바로 Watcher가 평가하게 되는 모드입니다.</li>\n<li>queue 모드는 한 tick 동안 Watcher가 평가해야 하는 목록을 queue에 저장하였다가 다음 tick에서 평가를 하는 모드입니다.</li>\n</ul>\n<p>view를 업데이트 할 때도, watcher를 재사용합니다. 모든 값이 업데이트 되고 가장 마지막에 view가 업데이트 되는데 그 이유는 <code class=\"language-text\">_init</code> 함수에서 <code class=\"language-text\">$mount</code> 함수가 가장 마지막에 호출되었기 때문입니다.</p>\n<h2 id=\"다음으로-볼-것\" style=\"position:relative;\">다음으로 볼 것<a href=\"#%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C-%EB%B3%BC-%EA%B2%83\" aria-label=\"다음으로 볼 것 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>다음 포스트에서는 브라우저에서 실행 되는 코드로 변환해 주는 컴파일러 함수를 찾아 보고(<a href=\"/tech/vuejs/view-render-compiler/\">7. View Render - 컴파일러</a>) 어떤 과정으로 만들어지는지 살펴 보도록 하겠습니다.</p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://github.com/numbbbbb/read-vue-source-code/blob/master/05-dynamic-data-lazy-sync-and-queue.md\">https://github.com/numbbbbb/read-vue-source-code/blob/master/05-dynamic-data-lazy-sync-and-queue.md</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#watcher%EA%B0%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%98%EB%8A%94-3%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95\">Watcher가 업데이트 하는 3가지 방법</a></p>\n<ul>\n<li><a href=\"#lazy\">Lazy</a></li>\n<li><a href=\"#sync\">Sync</a></li>\n<li><a href=\"#queue\">Queue</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#view-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EB%A5%BC-%ED%8A%B8%EB%A6%AC%EA%B1%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">View 업데이트를 트리거하는 방법</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EC%88%9C%EC%84%9C%EB%A5%BC-%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">업데이트 순서를 정하는 방법</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C-%EB%B3%BC-%EA%B2%83\">다음으로 볼 것</a></p>\n</li>\n</ul>","timeToRead":10,"excerpt":"이전 포스트(5. Reactive - Observer, Dep and Watcher)에서는 와 , 의 관계에 대해 이야기하였습니다. 이번 포스트에서는 가 어떻게 값을 업데이트 하는지, View와 data…","frontmatter":{"title":"[Inside Vue] 6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy, Sync, Queue)","thumbnail":"vuejs/vuejs.png","summary":"Vue에서 데이터를 업데이트 하는 3가지 방법을 이야기할 것입니다."},"fields":{"createdDate":"2019-09-09"}}},"pageContext":{"slug":"/tech/vuejs/reactive-lazy-sync-queue/","image":"vuejs/vuejs.png","next":{"frontmatter":{"title":"[Inside Vue] 7. View Render - 컴파일러"},"fields":{"slug":"/tech/vuejs/view-render-compiler/"}},"previous":{"frontmatter":{"title":"[Inside Vue] 5. Reactive - Observer, Dep and Watcher"},"fields":{"slug":"/tech/vuejs/reactive-observer-dep-watcher/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}