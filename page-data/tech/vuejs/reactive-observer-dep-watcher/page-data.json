{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/vuejs/reactive-observer-dep-watcher/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png","srcSet":"/static/3667f690df14d116a821ba4acb8686fb/a5da5/vuejs.png 300w,\n/static/3667f690df14d116a821ba4acb8686fb/cadb4/vuejs.png 750w,\n/static/3667f690df14d116a821ba4acb8686fb/feb73/vuejs.png 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/6032c/vuejs.png 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/3d4b2/vuejs.png 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/3667f690df14d116a821ba4acb8686fb/29f5b/vuejs.webp 300w,\n/static/3667f690df14d116a821ba4acb8686fb/11ba1/vuejs.webp 750w,\n/static/3667f690df14d116a821ba4acb8686fb/089e1/vuejs.webp 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/ad4fd/vuejs.webp 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/d8a73/vuejs.webp 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/a28c0/vuejs.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p>이번 포스트에서는 Observer와 Dep, Watcher에 대해 이야기 하도록 하겠습니다. Vue는 data가 변경되면, 자동으로 웹페이지를 업데이트 합니다. 이 때 <a href=\"https://ko.wikipedia.org/wiki/%EC%98%B5%EC%84%9C%EB%B2%84_%ED%8C%A8%ED%84%B4\">감시자(옵저버) 패턴</a>을 사용하는데, 옵저버 패턴에 관한 사전 지식이 있다면, 이해 하는데 도움이 될 것 같습니다.</p>\n<p>이전 포스트(<a href=\"/tech/vuejs/initialize-_init-function/\">4. Initialize - _init 함수</a>)에서는 Vue 인스턴스 생성시 초기화 하는 것에 대해 이야기 했습니다. 이번 포스트에서 이전 포스트에 관련된 이야기가 많이 등장하기 때문에, Vue 초기화 포스팅을 본 후 이번 포스팅을 보시는 것을 추천합니다.</p>\n<h2 id=\"observer\" style=\"position:relative;\">Observer<a href=\"#observer\" aria-label=\"observer permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">src/core/observer/index.js</code> 파일을 살펴보도록 하겠습니다. 이 파일에서 하는 주된 역할은 프로퍼티를 반응형 프로퍼티로 만드는 역할을 합니다.</p>\n<h3 id=\"definereactive-함수\" style=\"position:relative;\"><code class=\"language-text\">defineReactive</code> 함수<a href=\"#definereactive-%ED%95%A8%EC%88%98\" aria-label=\"definereactive 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이전 포스트에서 <code class=\"language-text\">defineReactive</code> 함수를 많이 보셨을 것입니다. <code class=\"language-text\">defineReactive</code> 함수는 프로퍼티를 <code class=\"language-text\">dep</code>과 <code class=\"language-text\">childOb</code>(<code class=\"language-text\">observe(val)</code>의 리턴 값)를 가지는 반응형 프로퍼티로 만들어 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Define a reactive property on an Object.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">defineReactive</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span>\n  customSetter<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Function<span class=\"token punctuation\">,</span>\n  shallow<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">let</span> childOb <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>shallow <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveGetter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> getter <span class=\"token operator\">?</span> <span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> val\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childOb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          childOb<span class=\"token punctuation\">.</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dependArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveSetter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n      childOb <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>shallow <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">defineReactive</code> 함수 코드입니다. 중요한 코드만 남기도 나머지 코드는 생략하였습니다.<br />\n위의 코드에서 <code class=\"language-text\">new Dep()</code>, <code class=\"language-text\">observe()</code>, <code class=\"language-text\">dependArray()</code>, <code class=\"language-text\">depend()</code> <code class=\"language-text\">notify()</code>가 호출됩니다. 먼저 <code class=\"language-text\">observe</code> 함수를 살펴보도록 하겠습니다.</p>\n<h3 id=\"observe-함수\" style=\"position:relative;\"><code class=\"language-text\">observe</code> 함수<a href=\"#observe-%ED%95%A8%EC%88%98\" aria-label=\"observe 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>간단히 말하면 <code class=\"language-text\">observe</code> 함수는 <code class=\"language-text\">Observer</code> 인스턴스를 리턴하는 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">observe</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">asRootData</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Observer <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">ob</span><span class=\"token operator\">:</span> Observer <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'__ob__'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">.</span>__ob__ <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ob <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>__ob__\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    shouldObserve <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span><span class=\"token function\">isServerRendering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>value<span class=\"token punctuation\">.</span>_isVue\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asRootData <span class=\"token operator\">&amp;&amp;</span> ob<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ob<span class=\"token punctuation\">.</span>vmCount<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ob\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">observe</code> 함수는 이전 포스트(<a href=\"/tech/vuejs/initialize-_init-function/#initdata-%ED%95%A8%EC%88%98\">4. Initialize - _init 함수</a>)의 <code class=\"language-text\">initData</code> 함수 안에서도 살펴보았습니다. <code class=\"language-text\">observer</code> 함수가 <code class=\"language-text\">data</code> 프로퍼티를 반응형으로 만드는 시작점입니다.</p>\n<p><code class=\"language-text\">observe</code> 함수는 존재하는 observer를 리턴하거나, observer를 생성(<code class=\"language-text\">new Observer(value)</code>)하여 리턴합니다. 객체일 때만 observer 타입을 리턴 합니다. 원시 값(Number, String 등..)은 void 값을 리턴합니다.</p>\n<p><code class=\"language-text\">value</code>가 root data 일 경우 <code class=\"language-text\">ob.vmCount++</code>로 vmCount를 증가시켜 <code class=\"language-text\">value</code>를 root data로 하는 컴포넌트 갯수를 체크합니다.</p>\n<h3 id=\"dependarray-함수\" style=\"position:relative;\"><code class=\"language-text\">dependArray</code> 함수<a href=\"#dependarray-%ED%95%A8%EC%88%98\" aria-label=\"dependarray 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">dependArray</code> 함수는 <code class=\"language-text\">defineReactive</code> 함수에서 정의한 get 함수에서 호출 되는 함수 입니다. <code class=\"language-text\">dependArray</code> 함수는 모든 배열 요소들에 <code class=\"language-text\">depend()</code> 호출 하도록 하는 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dependArray</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> e<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    e <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>__ob__ <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>__ob__<span class=\"token punctuation\">.</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dependArray</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>배열을 반복하면서 <code class=\"language-text\">e.__ob__.dep.depend()</code>를 호출합니다.</p>\n<h3 id=\"observer-클래스\" style=\"position:relative;\"><code class=\"language-text\">Observer</code> 클래스<a href=\"#observer-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"observer 클래스 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">observe</code> 함수에서 리턴하는 <code class=\"language-text\">Observer</code> 인스턴스를 만드는 <code class=\"language-text\">Observe</code> 클래스를 살펴보도록 하겠습니다.</p>\n<p><code class=\"language-text\">Observer</code> 클래스는 객체를 반복문을 사용하여 각 요소에 <code class=\"language-text\">defineReactive</code> 함수를 호출하여 각각의 요소를 반응형 프로퍼티로 만드는 역할을 하는 클래스입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">dep</span><span class=\"token operator\">:</span> Dep<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">vmCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">// number of vms that have this object as root $data</span>\n\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vmCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token function\">def</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'__ob__'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasProto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">protoAugment</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> arrayMethods<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">copyAugment</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> arrayMethods<span class=\"token punctuation\">,</span> arrayKeys<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">observeArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Walk through all properties and convert them into\n   * getter/setters. This method should only be called when\n   * value type is Object.\n   */</span>\n  <span class=\"token function\">walk</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Observe a list of Array items.\n   */</span>\n  <span class=\"token function\">observeArray</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">this.value</code>, <code class=\"language-text\">this.dep</code>, <code class=\"language-text\">this.vmCount</code>를 초기화와 <code class=\"language-text\">__ob__</code> 프로퍼티를 정의합니다.</p>\n<p><code class=\"language-text\">value</code>가 배열 일 경우, array 메소드(<code class=\"language-text\">push</code>, <code class=\"language-text\">pop</code>과 같은..)를 중간에 가로체 재정의 합니다. 이유는 Vue가 array 메소드를 호출했을때 알아차리기 위해서 입니다. 그 후 <code class=\"language-text\">observeArray</code> 함수를 호출합니다. <code class=\"language-text\">observeArray</code> 함수는 반복문을 통해 <code class=\"language-text\">observe</code> 함수를 실행하여 각 요소들을 반응형 프로퍼티로 만들어 줍니다.</p>\n<p>배열이 아닌 경우 <code class=\"language-text\">this.walk</code> 함수를 실행합니다. 이 함수는 객체에 각 요소마다 <code class=\"language-text\">defineReactive</code>를 호출하여 각 요소를 반응형 프로퍼티로 만들어줍니다.</p>\n<p><code class=\"language-text\">defineReactive</code> 함수에서 시작해서 <code class=\"language-text\">Observer</code> 클래스까지 코드 호출 순서를 보면,</p>\n<ol>\n<li><code class=\"language-text\">defineReactive()</code> 호출</li>\n<li><code class=\"language-text\">observe()</code> 호출</li>\n<li><code class=\"language-text\">new Observe(value)</code> 호출</li>\n<li><code class=\"language-text\">this.walk()</code> 호출</li>\n<li><code class=\"language-text\">defineReactive()</code> 호출</li>\n</ol>\n<p><code class=\"language-text\">defineReactive</code> 함수 호출로 시작하여 <code class=\"language-text\">defineReactive</code> 함수를 호출합니다. 이렇게 재귀적으로 <code class=\"language-text\">defineReactive</code> 함수를 호출하여 모든 하위 요소들을 반응형 프로퍼티로 변환하게 됩니다.</p>\n<p>이렇게 객체의 모든 하위 요소를 반응형 프로퍼티로 변환하는 이유는,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parents</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">mom</span><span class=\"token operator\">:</span> <span class=\"token string\">'foomom'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">dad</span><span class=\"token operator\">:</span> <span class=\"token string\">'foodad'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드와 같이 <code class=\"language-text\">data</code>라는 객체가 있을 때, <code class=\"language-text\">data.name</code>의 값이나 <code class=\"language-text\">data.parents.mom</code>의 값이 변경 되었을 때, <code class=\"language-text\">data</code>의 setter 함수는 호출 되지 습니다. setter 함수가 호출되지 않으면 <code class=\"language-text\">notify</code>가 호출되지 않아 view가 업데이트 되지 않습니다.</p>\n<p>재귀적으로 <code class=\"language-text\">defineReactive</code> 함수를 호출하면, 모든 하위 요소를 반응형 프로퍼티로 변환되어 <code class=\"language-text\">data.name</code>이나 <code class=\"language-text\">data.parents.mom</code>의 값이 변경 되어도 자동으로 view를 업데이트 할 수 있게 됩니다.</p>\n<h2 id=\"dep\" style=\"position:relative;\">Dep<a href=\"#dep\" aria-label=\"dep permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">src/core/observer/dep.js</code> 파일을 살펴보도록 하겠습니다. 이 파일에서 하는 주된 역할은 <code class=\"language-text\">Watcher</code>를 관리하는 역할을 합니다.</p>\n<h3 id=\"dep-클래스\" style=\"position:relative;\"><code class=\"language-text\">Dep</code> 클래스<a href=\"#dep-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"dep 클래스 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Dep</code> 클래스의 상단 주석을 보면</p>\n<blockquote>\n<p>A dep is an observable that can have multiple directives subscribing to it.</p>\n</blockquote>\n<p>라고 기록되어 있습니다. <code class=\"language-text\">Dep</code>는 여러개의 지시문(directives)을 구독(subscribe) 할 수 있는 관찰 가능한 객체입니다. <a href=\"https://ko.wikipedia.org/wiki/%EC%98%B5%EC%84%9C%EB%B2%84_%ED%8C%A8%ED%84%B4\">옵저버 패턴 wiki</a>를 보고 비교하자면, <code class=\"language-text\">Dep</code>은 옵저버들의 목록을 객체에 등록하여 관리하는 역할을 하는 것으로 보입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dep</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Watcher<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">subs</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Watcher<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> uid<span class=\"token operator\">++</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addSub</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">sub</span><span class=\"token operator\">:</span> Watcher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">removeSub</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">sub</span><span class=\"token operator\">:</span> Watcher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">depend</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">addDep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// stabilize the subscriber list first</span>\n    <span class=\"token keyword\">const</span> subs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>async<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// subs aren't sorted in scheduler if not running async</span>\n      <span class=\"token comment\">// we need to sort them now to make sure they fire in correct</span>\n      <span class=\"token comment\">// order</span>\n      subs<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> subs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      subs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Dep</code> 클래스는 <code class=\"language-text\">addSub</code>, <code class=\"language-text\">removeSub</code>, <code class=\"language-text\">depend</code>, <code class=\"language-text\">notify</code> 4개의 메소드로 구성된 클래스입니다.</p>\n<p><code class=\"language-text\">addSub</code>, <code class=\"language-text\">removeSub</code>, <code class=\"language-text\">notify</code>는 <code class=\"language-text\">this.subs</code>(<code class=\"language-text\">Watcher</code> 배열)을 다루는 메소드입니다. <code class=\"language-text\">Dep</code> 인스턴스는 <code class=\"language-text\">Watcher</code>들을 저장하고 있는 배열을 가지고 있습니다.</p>\n<h4 id=\"addsub-removesub-함수\" style=\"position:relative;\"><code class=\"language-text\">addSub</code>, <code class=\"language-text\">removeSub</code> 함수<a href=\"#addsub-removesub-%ED%95%A8%EC%88%98\" aria-label=\"addsub removesub 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">this.subs</code> 배열에 <code class=\"language-text\">Watcher</code>를 추가/제거하는 함수입니다.</p>\n<h4 id=\"notify-함수\" style=\"position:relative;\"><code class=\"language-text\">notify</code> 함수<a href=\"#notify-%ED%95%A8%EC%88%98\" aria-label=\"notify 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">notify</code>가 호출되면 배열에 있는 모든 <code class=\"language-text\">Watcher</code>의 <code class=\"language-text\">update</code> 함수가 실행됩니다. <code class=\"language-text\">notify</code> 함수는 <code class=\"language-text\">defineReactive</code> 함수에서 정의한 setter 함수에서 호출됩니다. 즉 반응형 프로퍼티가 변경이 되면 그 프로퍼티를 감시하고 있는 모든 <code class=\"language-text\">Watcher</code>들의 <code class=\"language-text\">update</code> 함수가 호출됩니다.</p>\n<h4 id=\"depend-함수\" style=\"position:relative;\"><code class=\"language-text\">depend</code> 함수<a href=\"#depend-%ED%95%A8%EC%88%98\" aria-label=\"depend 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">depend</code> 함수는 <code class=\"language-text\">Dep.target</code>을 확인하고 없다면 <code class=\"language-text\">Dep.target.addDep(this)</code>를 실행합니다.</p>\n<p><code class=\"language-text\">addDep</code> 함수는 <code class=\"language-text\">Watcher</code> 클래스에 정의되어 있습니다. <code class=\"language-text\">addDep</code>라는 함수 이름에서 <code class=\"language-text\">Watcher</code> 클래스가 <code class=\"language-text\">Dep</code> 배열을 가지고 있다는 것을 추측해 볼 수 있겠죠?</p>\n<h3 id=\"deptarget-객체\" style=\"position:relative;\"><code class=\"language-text\">Dep.target</code> 객체<a href=\"#deptarget-%EA%B0%9D%EC%B2%B4\" aria-label=\"deptarget 객체 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// The current target watcher being evaluated.</span>\n<span class=\"token comment\">// This is globally unique because only one watcher</span>\n<span class=\"token comment\">// can be evaluated at a time.</span>\nDep<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></code></pre></div>\n<p>주석을 보면 <code class=\"language-text\">Dep.target</code> 객체는 현재 평가되고 있는 Watcher라고 기록되어 있습니다. 평가된다 라는 말은 새로운 값을 가져온다라고 이해하시면 될 것 같습니다. <code class=\"language-text\">Dep.target</code>은 Watcher는 동시에 하나만 평가할 수 있기 때문에 전역으로 유니크하다고 합니다.</p>\n<h3 id=\"pushtarget-poptarget-함수\" style=\"position:relative;\"><code class=\"language-text\">pushTarget</code>, <code class=\"language-text\">popTarget</code> 함수<a href=\"#pushtarget-poptarget-%ED%95%A8%EC%88%98\" aria-label=\"pushtarget poptarget 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> targetStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pushTarget</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Watcher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  targetStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  Dep<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">popTarget</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  targetStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  Dep<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> targetStack<span class=\"token punctuation\">[</span>targetStack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">pushTarget</code>, <code class=\"language-text\">popTarget</code> 함수는 <code class=\"language-text\">Watcher</code> 클래스에서 호출되는 함수입니다.</p>\n<p>두 함수를 쉽게 이해하자면, 한 Watcher가 평가 도중에 다른 Watcher의 값을 가져와야 할 때 사용되거나, 다시 원래의 Watcher로 돌아갈 때 사용됩니다.</p>\n<h2 id=\"watcher\" style=\"position:relative;\">Watcher<a href=\"#watcher\" aria-label=\"watcher permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">src/core/observer/watcher.js</code> 파일을 살펴보도록 하겠습니다.</p>\n<h3 id=\"watcher-클래스\" style=\"position:relative;\"><code class=\"language-text\">Watcher</code> 클래스<a href=\"#watcher-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"watcher 클래스 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Watcher</code> 클래스의 코드는 좀 양이 많습니다. 클래스 상단의 주석을 통해 <code class=\"language-text\">Watcher</code> 클래스의 역할을 살펴볼 수 있습니다.</p>\n<blockquote>\n<p>A watcher parses an expression, collects dependencies, and fires callback when the expression value changes. This is used for both the $watch() api and directives.</p>\n</blockquote>\n<p><code class=\"language-text\">Watcher</code> 클래스는 expression(생성자를 통해 <code class=\"language-text\">expOrFn</code> 이름으로 전달 받습니다.)을 파싱하고, 종속성을 모으고, expression 값이 변경 될 때, 콜백함수를 실행합니다.</p>\n<p><code class=\"language-text\">$watch()</code>(<a href=\"/tech/vuejs/initialize-mixin-layer/#statemixin-%ED%95%A8%EC%88%98\">3. Initialize - Mixin Layer</a>에서 살펴본 <code class=\"language-text\">stateMixin</code> 함수에서 정의합니다.)와 <code class=\"language-text\">initComputed</code>(<a href=\"/tech/vuejs/initialize-_init-function/#initcomputed-%ED%95%A8%EC%88%98\">4. Initialize - _init 함수</a>에서 살펴보았습니다.)에서 <code class=\"language-text\">Watcher</code> 인스턴스를 생성합니다.</p>\n<h4 id=\"constructor-함수\" style=\"position:relative;\"><code class=\"language-text\">constructor</code> 함수<a href=\"#constructor-%ED%95%A8%EC%88%98\" aria-label=\"constructor 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">expOrFn</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> Function<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cb</span><span class=\"token operator\">:</span> Function<span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Object<span class=\"token punctuation\">,</span>\n  isRenderWatcher<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm <span class=\"token operator\">=</span> vm\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isRenderWatcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>_watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token punctuation\">}</span>\n  vm<span class=\"token punctuation\">.</span>_watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// options</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deep <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>deep\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>user\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lazy <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>lazy\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sync <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>sync\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>before <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>before\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deep <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lazy <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sync <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cb <span class=\"token operator\">=</span> cb\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>uid <span class=\"token comment\">// uid for batching</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lazy <span class=\"token comment\">// for lazy watchers</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newDeps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>depIds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newDepIds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span>\n    <span class=\"token operator\">?</span> expOrFn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token comment\">// parse expression for getter</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> expOrFn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> expOrFn\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> <span class=\"token function\">parsePath</span><span class=\"token punctuation\">(</span>expOrFn<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> noop\n      process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failed watching path: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>expOrFn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">'Watcher only accepts simple dot-delimited paths. '</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">'For full control, use a function instead.'</span><span class=\"token punctuation\">,</span>\n        vm\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lazy\n    <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드는 <code class=\"language-text\">Watcher</code> 클래스의 <code class=\"language-text\">constructor</code>(생성자) 함수입니다. 생성자 함수에서는 몇가지 변수들의 초기화와 <code class=\"language-text\">computed</code> 함수 또는 <code class=\"language-text\">watach</code> 표현식을 (<code class=\"language-text\">expOrFn</code>에 전달된 값들) <code class=\"language-text\">this.getter</code>에 저장합니다. 그리고 마지막으로 <code class=\"language-text\">this.lazy</code>가 아닐 경우 <code class=\"language-text\">this.get()</code>을 호출합니다.</p>\n<p><code class=\"language-text\">this.lazy</code>는 <a href=\"/tech/vuejs/reactive-lazy-sync-queue/\">6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy, Sync, Queue)</a>에서 자세히 살펴보도록 하겠습니다.</p>\n<h4 id=\"get-함수\" style=\"position:relative;\"><code class=\"language-text\">get</code> 함수<a href=\"#get-%ED%95%A8%EC%88%98\" aria-label=\"get 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n  * Evaluate the getter, and re-collect dependencies.\n  */</span>\n<span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">pushTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> value\n  <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">getter for watcher \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> e\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// \"touch\" every property so they are all tracked as</span>\n    <span class=\"token comment\">// dependencies for deep watching</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">popTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cleanupDeps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">get</code> 함수에서 <code class=\"language-text\">pushTarget</code>와 <code class=\"language-text\">popTarget</code> 함수를 볼 수 있습니다. 이 두 함수는 <code class=\"language-text\">src/core/observer/dep.js</code>에 정의되어 있는 함수 입니다. 현재 평가 중인 Watcher를 설정하는 함수 입니다.</p>\n<h4 id=\"watcher-동작-순서\" style=\"position:relative;\"><code class=\"language-text\">Watcher</code> 동작 순서<a href=\"#watcher-%EB%8F%99%EC%9E%91-%EC%88%9C%EC%84%9C\" aria-label=\"watcher 동작 순서 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">newName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'new!'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드와 같이 Vue 옵션을 정의했다고 가정합시다.</p>\n<ol>\n<li><code class=\"language-text\">Vue</code> 함수</li>\n<li><code class=\"language-text\">this._init()</code> 실행 (<code class=\"language-text\">initMixin</code> 함수에 <code class=\"language-text\">Vue.prototype._init</code> 함수임)</li>\n<li><code class=\"language-text\">initState(vm)</code> 실행</li>\n<li><code class=\"language-text\">initState</code> 함수에서 <code class=\"language-text\">initData(vm)</code> 실행</li>\n<li><code class=\"language-text\">proxy(vm, '_data', key)</code> 실행</li>\n<li><code class=\"language-text\">observe(data, true /* asRootData */)</code> 실행</li>\n</ol>\n<p>위의 순서로 <code class=\"language-text\">data</code> 는 반응형 프로퍼티로 변환됩니다. <code class=\"language-text\">proxy</code> 함수로 인해 <code class=\"language-text\">this.name</code>은 <code class=\"language-text\">this._data['name']</code>으로 프록시 됩니다.</p>\n<p>이제 본격적으로 <code class=\"language-text\">Watcher</code> 클래스의 동작 순서를 이야기 해 보겠습니다.</p>\n<ol>\n<li><code class=\"language-text\">Vue</code> 함수 -> <code class=\"language-text\">this._init</code> -> <code class=\"language-text\">initState</code> -> <code class=\"language-text\">initComputed</code> -> <code class=\"language-text\">new Watcher(...)</code> 순서로 <code class=\"language-text\">Watcher</code> 인스턴스가 생성됩니다.</li>\n<li>생성자 함수에서 <code class=\"language-text\">this.get()</code>를 호출합니다.</li>\n<li><code class=\"language-text\">get</code> 함수에서 <code class=\"language-text\">pushTarget(this)</code>를 호출하여 <code class=\"language-text\">Dep.target</code>를 현재 watcher로 변경합니다.</li>\n<li><code class=\"language-text\">get</code> 함수에서 <code class=\"language-text\">this.getter.call(vm, vm)</code>를 호출합니다. <code class=\"language-text\">this.getter</code>는 <code class=\"language-text\">initComputed</code> 함수에서 <code class=\"language-text\">Watcher</code> 인스턴스를 생성 할 때 전달 받은 <code class=\"language-text\">getter</code> 입니다. 즉, <code class=\"language-text\">this.getter</code>는 <code class=\"language-text\">computed</code> 속성에 정의된 함수입니다.\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userDef <span class=\"token operator\">=</span> computed<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> getter <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> userDef <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> userDef <span class=\"token operator\">:</span> userDef<span class=\"token punctuation\">.</span>get\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isSSR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create internal watcher for the computed property.</span>\n  watchers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>\n    vm<span class=\"token punctuation\">,</span>\n    getter <span class=\"token operator\">||</span> noop<span class=\"token punctuation\">,</span>\n    noop<span class=\"token punctuation\">,</span>\n    computedWatcherOptions\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n위의 코드는 <code class=\"language-text\">initComputed</code> 함수에서 <code class=\"language-text\">Watcher</code> 인스턴스를 생성하는 코드입니다.</li>\n<li><code class=\"language-text\">this.getter.call(vm, vm)</code>는 결국 <code class=\"language-text\">return this.name + 'new!'</code>를 호출한 것과 같습니다.</li>\n<li><code class=\"language-text\">this.name</code>은 <code class=\"language-text\">this._data['name']</code>이 프록시 된 값입니다. 반응형 프로퍼티인 <code class=\"language-text\">this._data['name']</code>의 getter(<code class=\"language-text\">defineReactive</code> 함수의 get 함수)가 실행됩니다.</li>\n<li><code class=\"language-text\">defineReactive</code> 함수에서 정의한 get 함수에서 <code class=\"language-text\">dep.depend()</code>를 호출합니다.</li>\n<li><code class=\"language-text\">Dep</code> 클래스의 <code class=\"language-text\">depend</code> 함수에서 <code class=\"language-text\">Dep.target.addDep(this)</code>를 호출합니다. 여기서 <code class=\"language-text\">this</code>는 <code class=\"language-text\">defineReactive</code> 함수에서 정의 한 <code class=\"language-text\">dep</code>(<code class=\"language-text\">const dep = new Dep()</code>)입니다. <code class=\"language-text\">defineReactive</code>를 호출한 주체는 <code class=\"language-text\">_data</code>이기 때문에, <code class=\"language-text\">dep</code>은 <code class=\"language-text\">_data</code>의 <code class=\"language-text\">dep</code>입니다.</li>\n<li><code class=\"language-text\">defineReactive</code> 함수에서 정의한 get 함수에서 <code class=\"language-text\">childOb.dep.depend()</code>를 호출합니다.</li>\n<li><code class=\"language-text\">Dep.target.addDep(this)</code>를 호출하는데, <code class=\"language-text\">this</code>는 <code class=\"language-text\">childOb.__ob__.dep</code>입니다.</li>\n<li><code class=\"language-text\">Watcher</code> 클래스의 <code class=\"language-text\">addDep</code> 함수에서 <code class=\"language-text\">this.newDepIds</code>와 <code class=\"language-text\">this.newDeps</code>에 각각 <code class=\"language-text\">dep.id</code>와 <code class=\"language-text\">dep</code>을 저장합니다.</li>\n<li><code class=\"language-text\">Watcher</code> 클래스의 <code class=\"language-text\">addDep</code> 함수에서 <code class=\"language-text\">this.depIds</code>의 기본 값은 빈 배열(<code class=\"language-text\">[]</code>)이기 때문에 <code class=\"language-text\">dep.addSub(this)</code>를 호출하게 됩니다.</li>\n<li><code class=\"language-text\">Dep</code> 클래스의 <code class=\"language-text\">addSub</code>는 <code class=\"language-text\">this.subs</code>에 현재 Watcher를 등록하는 역할을 합니다.</li>\n<li>6 ~ 13번을 거쳐 <code class=\"language-text\">Watcher</code> 클래스의 <code class=\"language-text\">get</code> 함수의 <code class=\"language-text\">value</code>에 값이 세팅됩니다.</li>\n<li><code class=\"language-text\">Watcher</code> 클래스의 <code class=\"language-text\">get</code> 함수에서 <code class=\"language-text\">traverse(value)</code>를 호출합니다.</li>\n<li><code class=\"language-text\">Watcher</code> 클래스의 <code class=\"language-text\">get</code> 함수에서 <code class=\"language-text\">popTarget()</code>를 호출합니다.</li>\n<li><code class=\"language-text\">Watcher</code> 클래스의 <code class=\"language-text\">get</code> 함수에서 <code class=\"language-text\">this.cleanupDeps()</code>를 호출합니다. <code class=\"language-text\">cleanupDeps</code> 함수는 종속성을 업데이트 하는 역할을 합니다.</li>\n</ol>\n<p>위의 과정을 거치면서 Watcher는 종속성(<code class=\"language-text\">Dep</code>)을 알게 되고, <code class=\"language-text\">Dep</code>는 구독자(subscriber)들을 알게 됩니다. 쉽게 말에 위의 과정을 통해 <code class=\"language-text\">Watcher</code>와 <code class=\"language-text\">Dep</code>과 <code class=\"language-text\">Observer</code>가 관계를 형성합니다. 이 관계를 통해 Vue는 반응형으로 동작하게 됩니다.</p>\n<p>반응형 프로퍼티들이 새로운 값으로 변경되면, <code class=\"language-text\">Dep</code>의 <code class=\"language-text\">notify</code> 함수가 호출되어 구독자들의 <code class=\"language-text\">get</code> 함수가 호출되고, 값과 관계(<code class=\"language-text\">Watcher</code>와 <code class=\"language-text\">Dep</code>과 <code class=\"language-text\">Observer</code>의 관계)들이 업데이트 됩니다.</p>\n<h2 id=\"요약\" style=\"position:relative;\">요약<a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><img src=\"/assets/img/posts/vuejs/vue_reactive.png\" alt=\"Vue 반응형 동작 순서\"></p>\n<p>위의 그림은 이번 포스트에서 이야기한 <code class=\"language-text\">Dep</code>와 <code class=\"language-text\">Watcher</code>, <code class=\"language-text\">Observer</code> 간의 관계를 이해하는데 도움이 될 수 있는 순서도 입니다. 반응형 프로퍼티가 수정이 되면, 위의 그림의 순서를 따라 동작하고, <code class=\"language-text\">computed</code> 속성과 관계를 업데이트 합니다.</p>\n<h2 id=\"다음으로-볼-것\" style=\"position:relative;\">다음으로 볼 것<a href=\"#%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C-%EB%B3%BC-%EA%B2%83\" aria-label=\"다음으로 볼 것 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>다음 포스트에서는 <a href=\"/tech/vuejs/reactive-lazy-sync-queue/\">6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy, Sync, Queue)</a>에 대해 이야기 하도록 하겠습니다.</p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://github.com/numbbbbb/read-vue-source-code/blob/master/04-dynamic-data-observer-dep-and-watcher.md\">https://github.com/numbbbbb/read-vue-source-code/blob/master/04-dynamic-data-observer-dep-and-watcher.md</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#observer\">Observer</a></p>\n<ul>\n<li><a href=\"#definereactive-%ED%95%A8%EC%88%98\"><code class=\"language-text\">defineReactive</code> 함수</a></li>\n<li><a href=\"#observe-%ED%95%A8%EC%88%98\"><code class=\"language-text\">observe</code> 함수</a></li>\n<li><a href=\"#dependarray-%ED%95%A8%EC%88%98\"><code class=\"language-text\">dependArray</code> 함수</a></li>\n<li><a href=\"#observer-%ED%81%B4%EB%9E%98%EC%8A%A4\"><code class=\"language-text\">Observer</code> 클래스</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dep\">Dep</a></p>\n<ul>\n<li><a href=\"#dep-%ED%81%B4%EB%9E%98%EC%8A%A4\"><code class=\"language-text\">Dep</code> 클래스</a></li>\n<li><a href=\"#deptarget-%EA%B0%9D%EC%B2%B4\"><code class=\"language-text\">Dep.target</code> 객체</a></li>\n<li><a href=\"#pushtarget-poptarget-%ED%95%A8%EC%88%98\"><code class=\"language-text\">pushTarget</code>, <code class=\"language-text\">popTarget</code> 함수</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#watcher\">Watcher</a></p>\n<ul>\n<li><a href=\"#watcher-%ED%81%B4%EB%9E%98%EC%8A%A4\"><code class=\"language-text\">Watcher</code> 클래스</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C-%EB%B3%BC-%EA%B2%83\">다음으로 볼 것</a></p>\n</li>\n</ul>","timeToRead":13,"excerpt":"이번 포스트에서는 Observer와 Dep, Watcher에 대해 이야기 하도록 하겠습니다. Vue는 data…","frontmatter":{"title":"[Inside Vue] 5. Reactive - Observer, Dep and Watcher","thumbnail":"vuejs/vuejs.png","summary":"Vue에서 데이터 변화를 감지하는 방법을 이야기할 것입니다."},"fields":{"createdDate":"2019-09-08"}}},"pageContext":{"slug":"/tech/vuejs/reactive-observer-dep-watcher/","image":"vuejs/vuejs.png","next":{"frontmatter":{"title":"[Inside Vue] 6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy, Sync, Queue)"},"fields":{"slug":"/tech/vuejs/reactive-lazy-sync-queue/"}},"previous":{"frontmatter":{"title":"[Inside Vue] 4. Initialize - _init 함수"},"fields":{"slug":"/tech/vuejs/initialize-_init-function/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}