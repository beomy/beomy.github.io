{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/vuejs/view-render-baseCompile-function/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png","srcSet":"/static/3667f690df14d116a821ba4acb8686fb/a5da5/vuejs.png 300w,\n/static/3667f690df14d116a821ba4acb8686fb/cadb4/vuejs.png 750w,\n/static/3667f690df14d116a821ba4acb8686fb/feb73/vuejs.png 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/6032c/vuejs.png 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/3d4b2/vuejs.png 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/3667f690df14d116a821ba4acb8686fb/29f5b/vuejs.webp 300w,\n/static/3667f690df14d116a821ba4acb8686fb/11ba1/vuejs.webp 750w,\n/static/3667f690df14d116a821ba4acb8686fb/089e1/vuejs.webp 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/ad4fd/vuejs.webp 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/d8a73/vuejs.webp 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/a28c0/vuejs.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p>이번 포스트에서는 <code class=\"language-text\">baseCompile</code> 함수에서 사용하는 <code class=\"language-text\">parse</code>, <code class=\"language-text\">optimize</code>, <code class=\"language-text\">generate</code> 함수에 대해 이야기합니다. <code class=\"language-text\">parse</code>, <code class=\"language-text\">optimize</code>, <code class=\"language-text\">generate</code> 함수는 모두 많은 양의 코드를 보유(?)하고 있습니다. 자세히 코드를 살펴보지는 않고 어떤 작업들을 하는지만 살펴볼 것입니다.</p>\n<h2 id=\"basecompile-함수\" style=\"position:relative;\"><code class=\"language-text\">baseCompile</code> 함수<a href=\"#basecompile-%ED%95%A8%EC%88%98\" aria-label=\"basecompile 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// `createCompilerCreator` allows creating compilers that use alternative</span>\n<span class=\"token comment\">// parser/optimizer/codegen, e.g the SSR optimizing compiler.</span>\n<span class=\"token comment\">// Here we just export a default compiler using the default parts.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createCompiler <span class=\"token operator\">=</span> <span class=\"token function\">createCompilerCreator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">baseCompile</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> CompilerOptions</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CompiledResult <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>optimize <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    ast<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">render</span><span class=\"token operator\">:</span> code<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">staticRenderFns</span><span class=\"token operator\">:</span> code<span class=\"token punctuation\">.</span>staticRenderFns\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">baseCompile</code> 함수를 보면, <code class=\"language-text\">parse</code> 함수에서 단순한 문자열인 <code class=\"language-text\">template</code>를 <code class=\"language-text\">ast</code>(<a href=\"https://ko.wikipedia.org/wiki/%EC%B6%94%EC%83%81_%EA%B5%AC%EB%AC%B8_%ED%8A%B8%EB%A6%AC\">Abstract Syntax Tree</a>)로 변환하는 것을 볼 수 있습니다. 그 후 <code class=\"language-text\">optimize</code> 함수와 <code class=\"language-text\">generate</code> 함수를 거쳐 <code class=\"language-text\">render</code> 함수와 <code class=\"language-text\">staticRenderFns</code>를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[AFTER PARSE]'</span><span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">)</span>\n<span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[AFTER OPTIMIZE]'</span><span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[AFTER GENERATE]'</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>위의 코드와 같이 <code class=\"language-text\">console.log</code>로 <code class=\"language-text\">ast</code>와 <code class=\"language-text\">code</code>를 살펴볼 것입니다. <a href=\"https://codepen.io/beomy/pen/OJLbqZW?editors=1012\">CodePen</a>에서 위의 코드와 같이 빌드한 Vue를 사용하였습니다.</p>\n<h3 id=\"parse-함수\" style=\"position:relative;\"><code class=\"language-text\">parse</code> 함수<a href=\"#parse-%ED%95%A8%EC%88%98\" aria-label=\"parse 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">parse</code> 함수는 <code class=\"language-text\">compiler/parser/index.js</code> 파일에 정의되어 있습니다. 코드량이 많기 때문에 이번 포스트에서 코드 언급 하지는 않겠습니다. <code class=\"language-text\">parse</code> 함수는 헬퍼 함수들을 정의하고 <code class=\"language-text\">parseHTML</code> 함수를 호출합니다.</p>\n<p><code class=\"language-text\">parse</code> 함수는 <code class=\"language-text\">template</code>를 <code class=\"language-text\">ast</code>로 빌드하는 함수입니다. 단순 문자열인 <code class=\"language-text\">template</code>를 이해하기 쉬운 트리 형태로 변경해 줍니다. <code class=\"language-text\">ast</code>는 <code class=\"language-text\">optimize</code> 함수와 <code class=\"language-text\">generate</code> 함수에서도 사용됩니다.</p>\n<p>하나의 코드를 예로들어, AST를 살펴보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ newName ? newName + 'true' : newName + 'false' }}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>This is static node<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">newName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'new!'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">parse</code> 함수를 통해 생성되는 <code class=\"language-text\">ast</code>는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attrsList</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token string\">'app'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attrsMap</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'app'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parent</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">expression</span><span class=\"token operator\">:</span><span class=\"token string\">'\"\\\\n  \"+_s(newName ? newName + \\'true\\' : newName + \\'false\\')+\"\\\\n  \"'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span><span class=\"token string\">'\\n  {{ newName ? newName + \\'true\\' : newName + \\'false\\' }}\\n  '</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attrsList</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attrsMap</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">parent</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        Circular\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        Array\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">plain</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plain</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attrs</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token string\">'\"app\"'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://codepen.io/beomy/pen/OJLbqZW?editors=1012\">CodePen</a>에서 <code class=\"language-text\">ast</code>를 살펴볼 수 있습니다.</p>\n<h3 id=\"optimize-함수\" style=\"position:relative;\"><code class=\"language-text\">optimize</code> 함수<a href=\"#optimize-%ED%95%A8%EC%88%98\" aria-label=\"optimize 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">optimize</code> 함수는 <code class=\"language-text\">compiler/optimizer.js</code> 파일에 정의되어 있습니다. <code class=\"language-text\">optimize</code> 함수는 AST에서 정적인 부분을 찾는 함수입니다. <code class=\"language-text\">optimize</code> 함수 실행 후의 AST를 살펴보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attrsList</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token string\">'app'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attrsMap</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'app'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parent</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">expression</span><span class=\"token operator\">:</span><span class=\"token string\">'\"\\\\n  \"+_s(newName ? newName + \\'true\\' : newName + \\'false\\')+\"\\\\n  \"'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span><span class=\"token string\">'\\n  {{ newName ? newName + \\'true\\' : newName + \\'false\\' }}\\n  '</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">static</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attrsList</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attrsMap</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">parent</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        Circular\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        Array\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">plain</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">static</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">staticInFor</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">staticRoot</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plain</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attrs</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token string\">'\"app\"'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">static</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">staticRoot</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">parse</code> 함수 이후의 AST와 <code class=\"language-text\">optimize</code> 함수 이후의 AST의 차이점은 static 플래그들이 추가된 점입니다. 정적인 요소들은 <code class=\"language-text\">static</code> 플래그가 <code class=\"language-text\">true</code>로 설정됩니다. <a href=\"https://codepen.io/beomy/pen/OJLbqZW?editors=1012\">CodePen</a>에서 <code class=\"language-text\">ast</code>를 살펴볼 수 있습니다.</p>\n<h3 id=\"generate-함수\" style=\"position:relative;\"><code class=\"language-text\">generate</code> 함수<a href=\"#generate-%ED%95%A8%EC%88%98\" aria-label=\"generate 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">generate</code> 함수는 <code class=\"language-text\">compiler/codegen/index.js</code> 파일에 정의되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">render</span><span class=\"token operator\">:</span><span class=\"token string\">'with(this){return _c(\\'div\\',{attrs:{\"id\":\"app\"}},[_v(\"\\\\n  \"+_s(newName ? newName + \\'true\\' : newName + \\'false\\')+\"\\\\n  \"),_c(\\'span\\',[_v(\"This is static node\")])])}'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">staticRenderFns</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">generate</code> 함수를 통해 생경되는 <code class=\"language-text\">code</code>는 위의 코드와 같습니다. <code class=\"language-text\">code</code> 객체는 문자열인 <code class=\"language-text\">render</code>와 배열인 <code class=\"language-text\">staticRenderFns</code>로 구성됩니다. <a href=\"https://codepen.io/beomy/pen/OJLbqZW?editors=1012\">CodePen</a>에서 <code class=\"language-text\">code</code> 객체를 살펴볼 수 있습니다.</p>\n<p><code class=\"language-text\">code</code> 객체에 포함된 <code class=\"language-text\">render</code> 함수는 <code class=\"language-text\">vnode = render.call(vm._renderProxy, vm.$createElement)</code> 이런 방법으로 호출합니다. <code class=\"language-text\">call</code> 메소드를 사용하여 <code class=\"language-text\">render</code> 함수 내의 <code class=\"language-text\">this</code>는 <code class=\"language-text\">vm._renderProxy</code>가 됩니다. 또 <code class=\"language-text\">render</code> 함수는 <code class=\"language-text\">with(this)</code> 메소드를 사용합니다. 이런 과정 때문에 Vue에서 <code class=\"language-text\">template</code>를 사용 할 때, <code class=\"language-text\">this</code>를 사용하지 않아도 됩니다.</p>\n<h2 id=\"요약\" style=\"position:relative;\">요약<a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>이번 포스트에서는 컴파일러가 어떻게 <code class=\"language-text\">template</code>를 랜더링 함수로 만들어 내는지 이야기 하였습니다.</p>\n<p><code class=\"language-text\">baseCompile</code> 함수에서 <code class=\"language-text\">parse</code>, <code class=\"language-text\">optimize</code>, <code class=\"language-text\">generate</code> 함수를 통해 <code class=\"language-text\">ast</code>, <code class=\"language-text\">code.render</code>, <code class=\"language-text\">code.staticRenderFns</code>가 생성됩니다.</p>\n<ol>\n<li><code class=\"language-text\">parse</code> 함수를 통해 단순 문자열인 <code class=\"language-text\">template</code>가 <code class=\"language-text\">ast</code>로 변경됩니다.</li>\n<li><code class=\"language-text\">optimize</code> 함수를 통해 static 플래그들이 추가 됩니다. 정적인 요소들은 <code class=\"language-text\">static</code> 플래그가 <code class=\"language-text\">true</code>로 설정됩니다.</li>\n<li><code class=\"language-text\">generate</code> 함수를 통해 <code class=\"language-text\">render</code> 함수와 <code class=\"language-text\">staticRenderFns</code>가 생성됩니다.</li>\n</ol>\n<h2 id=\"다음으로-볼-것\" style=\"position:relative;\">다음으로 볼 것<a href=\"#%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C-%EB%B3%BC-%EA%B2%83\" aria-label=\"다음으로 볼 것 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>다음 포스트(<a href=\"/tech/vuejs/view-render-patch/\">9. View Render - Patch</a>)에서는 생성된 <code class=\"language-text\">render</code> 함수와 <code class=\"language-text\">__patch__()</code> 함수로 웹페이지를 업데이트 하는 과정을 이야기 하도록 하겠습니다.</p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://github.com/numbbbbb/read-vue-source-code/blob/master/07-view-render-compiler.md\">https://github.com/numbbbbb/read-vue-source-code/blob/master/07-view-render-compiler.md</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#basecompile-%ED%95%A8%EC%88%98\"><code class=\"language-text\">baseCompile</code> 함수</a></p>\n<ul>\n<li><a href=\"#parse-%ED%95%A8%EC%88%98\"><code class=\"language-text\">parse</code> 함수</a></li>\n<li><a href=\"#optimize-%ED%95%A8%EC%88%98\"><code class=\"language-text\">optimize</code> 함수</a></li>\n<li><a href=\"#generate-%ED%95%A8%EC%88%98\"><code class=\"language-text\">generate</code> 함수</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C-%EB%B3%BC-%EA%B2%83\">다음으로 볼 것</a></p>\n</li>\n</ul>","timeToRead":5,"excerpt":"…","frontmatter":{"title":"[Inside Vue] 8. View Render - baseCompile 함수","thumbnail":"vuejs/vuejs.png","summary":"baseCompile 함수에서 사용하는 parse, optimize, generate 함수에 대해 이야기합니다."},"fields":{"createdDate":"2019-09-11"}}},"pageContext":{"slug":"/tech/vuejs/view-render-baseCompile-function/","image":"vuejs/vuejs.png","next":{"frontmatter":{"title":"[Inside Vue] 9. View Render - Patch"},"fields":{"slug":"/tech/vuejs/view-render-patch/"}},"previous":{"frontmatter":{"title":"[Inside Vue] 7. View Render - 컴파일러"},"fields":{"slug":"/tech/vuejs/view-render-compiler/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}