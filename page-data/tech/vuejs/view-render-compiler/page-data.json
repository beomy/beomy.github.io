{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/vuejs/view-render-compiler/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png","srcSet":"/static/3667f690df14d116a821ba4acb8686fb/a5da5/vuejs.png 300w,\n/static/3667f690df14d116a821ba4acb8686fb/cadb4/vuejs.png 750w,\n/static/3667f690df14d116a821ba4acb8686fb/feb73/vuejs.png 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/6032c/vuejs.png 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/3d4b2/vuejs.png 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/3667f690df14d116a821ba4acb8686fb/29f5b/vuejs.webp 300w,\n/static/3667f690df14d116a821ba4acb8686fb/11ba1/vuejs.webp 750w,\n/static/3667f690df14d116a821ba4acb8686fb/089e1/vuejs.webp 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/ad4fd/vuejs.webp 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/d8a73/vuejs.webp 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/a28c0/vuejs.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p>이번 포스트에서는 view를 DOM에 그릴 수 있도록 브라우저에서 실행되는 코드로 변환하는 컴파일러 함수를 만드는 과정을 이야기 할 것입니다.</p>\n<h2 id=\"랜더링-함수\" style=\"position:relative;\">랜더링 함수<a href=\"#%EB%9E%9C%EB%8D%94%EB%A7%81-%ED%95%A8%EC%88%98\" aria-label=\"랜더링 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>이전 포스트(<a href=\"/tech/vuejs/reactive-lazy-sync-queue/#view-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EB%A5%BC-%ED%8A%B8%EB%A6%AC%EA%B1%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy, Sync, Queue)</a>)에서 이야기 했던 <code class=\"language-text\">mountComponent</code> 함수를 시작으로 랜더링하는 함수들을 살펴보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mountComponent</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Element<span class=\"token punctuation\">,</span>\n  hydrating<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>performance <span class=\"token operator\">&amp;&amp;</span> mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">updateComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span><span class=\"token function\">_update</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">mountComponent</code> 함수는 <code class=\"language-text\">_update</code>와 <code class=\"language-text\">_render</code> 함수를 사용하여 view를 업데이트 합니다. 먼저 <code class=\"language-text\">_update</code> 함수를 살펴보도록 하겠습니다.</p>\n<h3 id=\"_update-함수\" style=\"position:relative;\"><code class=\"language-text\">_update</code> 함수<a href=\"#_update-%ED%95%A8%EC%88%98\" aria-label=\"_update 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">_update</code> 함수는 <code class=\"language-text\">src/core/instance/lifecycle.js</code> 파일의 <code class=\"language-text\">lifecycleMixin</code> 함수에 정의되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">vnode</span><span class=\"token operator\">:</span> VNode<span class=\"token punctuation\">,</span> hydrating<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">const</span> prevEl <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$el\n  <span class=\"token keyword\">const</span> prevVnode <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>_vnode\n  <span class=\"token keyword\">const</span> restoreActiveInstance <span class=\"token operator\">=</span> <span class=\"token function\">setActiveInstance</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n  vm<span class=\"token punctuation\">.</span>_vnode <span class=\"token operator\">=</span> vnode\n  <span class=\"token comment\">// Vue.prototype.__patch__ is injected in entry points</span>\n  <span class=\"token comment\">// based on the rendering backend used.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevVnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// initial render</span>\n    vm<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">__patch__</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">/* removeOnly */</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// updates</span>\n    vm<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">__patch__</span><span class=\"token punctuation\">(</span>prevVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">restoreActiveInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// update __vue__ reference</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevEl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    prevEl<span class=\"token punctuation\">.</span>__vue__ <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>__vue__ <span class=\"token operator\">=</span> vm\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// if parent is an HOC, update its $el as well</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">&amp;&amp;</span> vm<span class=\"token punctuation\">.</span>$parent <span class=\"token operator\">&amp;&amp;</span> vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">===</span> vm<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span>_vnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$el\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// updated hook is called by the scheduler to ensure that children are</span>\n  <span class=\"token comment\">// updated in a parent's updated hook.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">_update</code> 함수는 <code class=\"language-text\">__patch__</code> 함수를 호출합니다. <code class=\"language-text\">__patch__</code> 함수는 업데이트가 필요한 부분을 계산하고 해당 DOM을 업데이트 하는 역할을 합니다.</p>\n<h3 id=\"_render-함수\" style=\"position:relative;\"><code class=\"language-text\">_render</code> 함수<a href=\"#_render-%ED%95%A8%EC%88%98\" aria-label=\"_render 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">_render</code> 함수는 <code class=\"language-text\">src/core/instance/render.js</code> 파일의 <code class=\"language-text\">renderMixin</code> 함수에 정의되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> VNode <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> _parentVnode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options\n\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">// set parent vnode. this allows render functions to have access</span>\n  <span class=\"token comment\">// to the data on the placeholder node.</span>\n  vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">=</span> _parentVnode\n  <span class=\"token comment\">// render self</span>\n  <span class=\"token keyword\">let</span> vnode\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// There's no need to maintain a stack because all render fns are called</span>\n    <span class=\"token comment\">// separately from one another. Nested component's render fns are called</span>\n    <span class=\"token comment\">// when parent component is patched.</span>\n    currentRenderingInstance <span class=\"token operator\">=</span> vm\n    vnode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_renderProxy<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">.</span>$createElement<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    currentRenderingInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">_render</code> 함수는 <code class=\"language-text\">render</code> 함수를 호출합니다. <code class=\"language-text\">render</code> 함수는 <code class=\"language-text\">vm.$options</code>에서 추출된 함수입니다. <code class=\"language-text\">vm.$options</code> 객체를 살펴보도록 하겠습니다.</p>\n<h4 id=\"vmoptions-객체\" style=\"position:relative;\"><code class=\"language-text\">vm.$options</code> 객체<a href=\"#vmoptions-%EA%B0%9D%EC%B2%B4\" aria-label=\"vmoptions 객체 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">vm.$options</code> 객체는 <code class=\"language-text\">src/core/instance/init.js</code> 파일의 <code class=\"language-text\">initMixin</code> 함수에 정의 되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">vm<span class=\"token punctuation\">.</span>$options <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">resolveConstructorOptions</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  options <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  vm\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 코드의 <code class=\"language-text\">options</code>는 <code class=\"language-text\">new Vew({...})</code>를 통해 전달되는 값(<code class=\"language-text\">{...}</code>)입니다. <code class=\"language-text\">options.render</code>를 키워드로 전역 검색을 하여 정의하는 부분을 찾아 보도록 하겠습니다.</p>\n<p><img src=\"/assets/img/posts/vuejs/options_render.png\" alt=\"options render\"></p>\n<h4 id=\"optionsrender-함수\" style=\"position:relative;\"><code class=\"language-text\">options.render</code> 함수<a href=\"#optionsrender-%ED%95%A8%EC%88%98\" aria-label=\"optionsrender 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">src/platforms/web/entry-runtime-with-compiler.js</code> 파일의 <code class=\"language-text\">$mount</code> 함수 안에서 <code class=\"language-text\">options.render</code> 함수를 정의 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$mount</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">el<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> Element<span class=\"token punctuation\">,</span>\n  hydrating<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$options\n  <span class=\"token comment\">// resolve template/el and convert to render function</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> templ ate <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>template\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> template <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          template <span class=\"token operator\">=</span> <span class=\"token function\">idToTemplate</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span>nodeType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        template <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>innerHTML\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      template <span class=\"token operator\">=</span> <span class=\"token function\">getOuterHTML</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> staticRenderFns <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">compileToFunctions</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">outputSourceRange</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n        shouldDecodeNewlines<span class=\"token punctuation\">,</span>\n        shouldDecodeNewlinesForHref<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">delimiters</span><span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>delimiters<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>comments\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      options<span class=\"token punctuation\">.</span>render <span class=\"token operator\">=</span> render\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">$mount</code> 함수에서 <code class=\"language-text\">compileToFunctions</code> 함수를 <code class=\"language-text\">template</code>(Vue 인스턴스의 옵션의 <code class=\"language-text\">template</code> 혹은 <code class=\"language-text\">.vue</code> 파일의 가장 바깥쪽 <code class=\"language-text\">template</code>)를 전달하여 실행하면 <code class=\"language-text\">render</code>와 <code class=\"language-text\">staticRenderFns</code>를 리턴으로 받습니다.</p>\n<p><code class=\"language-text\">compileToFunctions</code> 함수를 먼저 살펴보도록 하겠습니다.</p>\n<h4 id=\"compiletofunctions-함수\" style=\"position:relative;\"><code class=\"language-text\">compileToFunctions</code> 함수<a href=\"#compiletofunctions-%ED%95%A8%EC%88%98\" aria-label=\"compiletofunctions 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">compileToFunctions</code> 함수는 <code class=\"language-text\">src/platforms/web/compiler/index.js</code>에서 가져옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* @flow */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> baseOptions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./options'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createCompiler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'compiler/index'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> compile<span class=\"token punctuation\">,</span> compileToFunctions <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">createCompiler</span><span class=\"token punctuation\">(</span>baseOptions<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> compile<span class=\"token punctuation\">,</span> compileToFunctions <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드는 <code class=\"language-text\">src/platforms/web/compiler/index.js</code> 파일의 내용입니다. <code class=\"language-text\">compileToFunctions</code> 함수는 <code class=\"language-text\">createCompiler</code> 함수를 통해 생성됩니다. <code class=\"language-text\">createCompiler</code>를 살펴보도록 하겠습니다.</p>\n<h4 id=\"createcompiler-함수\" style=\"position:relative;\"><code class=\"language-text\">createCompiler</code> 함수<a href=\"#createcompiler-%ED%95%A8%EC%88%98\" aria-label=\"createcompiler 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">src/compiler/index.js</code> 파일에서 <code class=\"language-text\">createCompiler</code> 함수가 정의됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// `createCompilerCreator` allows creating compilers that use alternative</span>\n<span class=\"token comment\">// parser/optimizer/codegen, e.g the SSR optimizing compiler.</span>\n<span class=\"token comment\">// Here we just export a default compiler using the default parts.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createCompiler <span class=\"token operator\">=</span> <span class=\"token function\">createCompilerCreator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">baseCompile</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> CompilerOptions</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CompiledResult <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>optimize <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    ast<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">render</span><span class=\"token operator\">:</span> code<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">staticRenderFns</span><span class=\"token operator\">:</span> code<span class=\"token punctuation\">.</span>staticRenderFns\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"createcompilercreator-함수\" style=\"position:relative;\"><code class=\"language-text\">createCompilerCreator</code> 함수<a href=\"#createcompilercreator-%ED%95%A8%EC%88%98\" aria-label=\"createcompilercreator 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">createCompilerCreator</code> 함수는 core 함수인 <code class=\"language-text\">baseCompiler</code>를 감싸는 함수로 이해 하시면 됩니다. <code class=\"language-text\">baseCompiler</code> 함수 안에서 호출하는 <code class=\"language-text\">parse()</code>, <code class=\"language-text\">optimize()</code>, <code class=\"language-text\">generate()</code>가 실제 작업을 수행하는 함수 입니다.</p>\n<h2 id=\"요약\" style=\"position:relative;\">요약<a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><img src=\"/assets/img/posts/vuejs/vue_render.png\" alt=\"vue 랜더링 과정\"></p>\n<ol>\n<li><code class=\"language-text\">parser</code>, <code class=\"language-text\">optimizer</code>, <code class=\"language-text\">generate</code>를 선택하여 코어 컴파일러 함수를 만듭니다.</li>\n<li>만들어진 코어 컴파일러 함수를 <code class=\"language-text\">createCompilerCreator</code> 함수의 파라미터로 전달 됩니다. <code class=\"language-text\">createCompilerCreator</code> 함수에서 리턴 된 함수는 <code class=\"language-text\">createCompiler</code>에 저장됩니다.</li>\n<li><code class=\"language-text\">createCompiler</code> 함수에 옵션들을 전달하여 호출합니다. 리턴 된 값은 실제 컴파일러 함수입니다.</li>\n<li>컴파일러 함수를 통해 <code class=\"language-text\">template</code>을 컴파일 하여 <code class=\"language-text\">render</code> 함수를 만듭니다.</li>\n<li><code class=\"language-text\">_render</code> 함수에서 생성된 <code class=\"language-text\">render</code> 함수를 호출하여 view를 랜더링합니다.</li>\n</ol>\n<h2 id=\"다음으로-볼-것\" style=\"position:relative;\">다음으로 볼 것<a href=\"#%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C-%EB%B3%BC-%EA%B2%83\" aria-label=\"다음으로 볼 것 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>다음 포스트에서(<a href=\"/tech/vuejs/view-render-baseCompile-function/\">8. View Render - baseCompile 함수</a>)는 compiler와 patch, VDom 설계 방법과 실제 Dom과의 차이를 빠르게 계산하는 방법에 대해 이야기 하도록 하겠습니다.</p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://github.com/numbbbbb/read-vue-source-code/blob/master/06-view-render-introduction.md\">https://github.com/numbbbbb/read-vue-source-code/blob/master/06-view-render-introduction.md</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%9E%9C%EB%8D%94%EB%A7%81-%ED%95%A8%EC%88%98\">랜더링 함수</a></p>\n<ul>\n<li><a href=\"#_update-%ED%95%A8%EC%88%98\"><code class=\"language-text\">_update</code> 함수</a></li>\n<li><a href=\"#_render-%ED%95%A8%EC%88%98\"><code class=\"language-text\">_render</code> 함수</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C-%EB%B3%BC-%EA%B2%83\">다음으로 볼 것</a></p>\n</li>\n</ul>","timeToRead":5,"excerpt":"이번 포스트에서는 view를 DOM에 그릴 수 있도록 브라우저에서 실행되는 코드로 변환하는 컴파일러 함수를 만드는 과정을 이야기 할 것입니다. 랜더링 함수 이전 포스트(6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy…","frontmatter":{"title":"[Inside Vue] 7. View Render - 컴파일러","thumbnail":"vuejs/vuejs.png","summary":"view를 DOM에 그릴 수 있도록 브라우저에서 실행되는 코드로 변환하는 컴파일러 함수를 만드는 과정을 이야기할 것입니다."},"fields":{"createdDate":"2019-09-10"}}},"pageContext":{"slug":"/tech/vuejs/view-render-compiler/","image":"vuejs/vuejs.png","next":{"frontmatter":{"title":"[Inside Vue] 8. View Render - baseCompile 함수"},"fields":{"slug":"/tech/vuejs/view-render-baseCompile-function/"}},"previous":{"frontmatter":{"title":"[Inside Vue] 6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy, Sync, Queue)"},"fields":{"slug":"/tech/vuejs/reactive-lazy-sync-queue/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}