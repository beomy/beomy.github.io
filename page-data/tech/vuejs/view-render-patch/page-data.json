{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/vuejs/view-render-patch/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://beomy.github.io"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png","srcSet":"/static/3667f690df14d116a821ba4acb8686fb/a5da5/vuejs.png 300w,\n/static/3667f690df14d116a821ba4acb8686fb/cadb4/vuejs.png 750w,\n/static/3667f690df14d116a821ba4acb8686fb/feb73/vuejs.png 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/6032c/vuejs.png 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/3d4b2/vuejs.png 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/f635c/vuejs.png 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/3667f690df14d116a821ba4acb8686fb/29f5b/vuejs.webp 300w,\n/static/3667f690df14d116a821ba4acb8686fb/11ba1/vuejs.webp 750w,\n/static/3667f690df14d116a821ba4acb8686fb/089e1/vuejs.webp 1080w,\n/static/3667f690df14d116a821ba4acb8686fb/ad4fd/vuejs.webp 1366w,\n/static/3667f690df14d116a821ba4acb8686fb/d8a73/vuejs.webp 1920w,\n/static/3667f690df14d116a821ba4acb8686fb/a28c0/vuejs.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1000}}},"markdownRemark":{"html":"<p><a href=\"/tech/vuejs/view-render-compiler/#%EB%9E%9C%EB%8D%94%EB%A7%81-%ED%95%A8%EC%88%98\">7. View Render - 컴파일러</a>에서 이야기 한 <code class=\"language-text\">mountComponent</code> 함수에서 view를 랜더링 하는데 사용된 2가지 함수인 <code class=\"language-text\">_render()</code>와 <code class=\"language-text\">_update()</code>에서 호출하는 <code class=\"language-text\">render</code> 함수와 <code class=\"language-text\">__patch__</code> 함수에 대해 이야기 하도록 하겠습니다.</p>\n<h2 id=\"view를-랜더링-하는-2가지-함수\" style=\"position:relative;\">view를 랜더링 하는 2가지 함수<a href=\"#view%EB%A5%BC-%EB%9E%9C%EB%8D%94%EB%A7%81-%ED%95%98%EB%8A%94-2%EA%B0%80%EC%A7%80-%ED%95%A8%EC%88%98\" aria-label=\"view를 랜더링 하는 2가지 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">mountComponent</code> 함수에서 view를 랜더링하는데 <code class=\"language-text\">_render</code>, <code class=\"language-text\">_update</code> 두가지 함수가 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mountComponent</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Element<span class=\"token punctuation\">,</span>\n  hydrating<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>performance <span class=\"token operator\">&amp;&amp;</span> mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">updateComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span><span class=\"token function\">_update</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">src/core/instance/lifecycle.js</code>에 <code class=\"language-text\">mountComponent</code> 함수가 정의되어 있습니다. 먼저 <code class=\"language-text\">_render</code> 함수에서 <code class=\"language-text\">render</code> 함수를 호출하는 코드를 살펴보도록 하겠습니다.</p>\n<h3 id=\"_render-함수\" style=\"position:relative;\"><code class=\"language-text\">_render</code> 함수<a href=\"#_render-%ED%95%A8%EC%88%98\" aria-label=\"_render 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">render</code> 함수를 호출하는 <code class=\"language-text\">_render</code> 함수 코드를 살펴보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mountComponent</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Element<span class=\"token punctuation\">,</span>\n  hydrating<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeMount'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> updateComponent\n  <span class=\"token comment\">/* istanbul ignore if */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>performance <span class=\"token operator\">&amp;&amp;</span> mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">updateComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span><span class=\"token function\">_update</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// we set this to vm._watcher inside the watcher's constructor</span>\n  <span class=\"token comment\">// since the watcher's initial patch may call $forceUpdate (e.g. inside child</span>\n  <span class=\"token comment\">// component's mounted hook), which relies on vm._watcher being already defined</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> updateComponent<span class=\"token punctuation\">,</span> noop<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">before</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_isMounted <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>vm<span class=\"token punctuation\">.</span>_isDestroyed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeUpdate'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* isRenderWatcher */</span><span class=\"token punctuation\">)</span>\n  hydrating <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token comment\">// manually mounted instance, call mounted on self</span>\n  <span class=\"token comment\">// mounted is called for render-created child components in its inserted hook</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>_isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'mounted'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> vm\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/tech/vuejs/reactive-lazy-sync-queue/#view-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EB%A5%BC-%ED%8A%B8%EB%A6%AC%EA%B1%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">6. Reactive - Watcher가 업데이트 하는 3가지 방법(Lazy, Sync, Queue)</a>에서 이야기 했던 것 처럼 <code class=\"language-text\">new Watcher(vm, updateComponent, noop, ...)</code>로 <code class=\"language-text\">updateComponent</code>가 실행되어 화면이 업데이트 됩니다. <code class=\"language-text\">_render</code> 함수를 살펴보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> VNode <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">// set parent vnode. this allows render functions to have access</span>\n  <span class=\"token comment\">// to the data on the placeholder node.</span>\n  vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">=</span> _parentVnode\n  <span class=\"token comment\">// render self</span>\n  <span class=\"token keyword\">let</span> vnode\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// There's no need to maintain a stack because all render fns are called</span>\n    <span class=\"token comment\">// separately from one another. Nested component's render fns are called</span>\n    <span class=\"token comment\">// when parent component is patched.</span>\n    currentRenderingInstance <span class=\"token operator\">=</span> vm\n    vnode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_renderProxy<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">.</span>$createElement<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    currentRenderingInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> vnode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">_render</code> 함수는 <code class=\"language-text\">src/core/instance/render.js</code> 파일에 정의되어 있습니다. <code class=\"language-text\">_render</code> 함수는 <code class=\"language-text\">vnode</code>를 리턴하는데 <code class=\"language-text\">vnode</code>는 <code class=\"language-text\">vnode = render.call(vm._renderProxy, vm.$createElement)</code>로 만들어집니다. <code class=\"language-text\">vnode</code>의 값을 알아 보기 위해 바로 밑에 <code class=\"language-text\">console.log(vnode)</code>를 추가하여 로그로 확인하도록 하겠습니다.</p>\n<p>위의 코드에 추가된 로그는 <a href=\"https://codepen.io/beomy/pen/QWLpdeq?editors=1012\">CodePen</a>에서 확인 할 수 있습니다.</p>\n<p><img src=\"/assets/img/posts/vuejs/virtual_node.png\" alt=\"VNode\"></p>\n<p><code class=\"language-text\">vnode</code>는 변수명에서 짐작할 수 있듯이 가상노드(virtual node)입니다. <code class=\"language-text\">render</code> 함수의 역할은 VNode를 가져오는 역할을 합니다.</p>\n<h3 id=\"_update-함수\" style=\"position:relative;\"><code class=\"language-text\">_update</code> 함수<a href=\"#_update-%ED%95%A8%EC%88%98\" aria-label=\"_update 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이번에는 나머지 랜더링 함수인 <code class=\"language-text\">_update</code> 함수를 살펴보도록 하겠습니다. <code class=\"language-text\">_update</code> 함수의 파라미터로 <code class=\"language-text\">_render</code> 함수에서 생성된 VNode가 전달됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">vnode</span><span class=\"token operator\">:</span> VNode<span class=\"token punctuation\">,</span> hydrating<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">const</span> prevEl <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$el\n  <span class=\"token keyword\">const</span> prevVnode <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>_vnode\n  <span class=\"token keyword\">const</span> restoreActiveInstance <span class=\"token operator\">=</span> <span class=\"token function\">setActiveInstance</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n  vm<span class=\"token punctuation\">.</span>_vnode <span class=\"token operator\">=</span> vnode\n  <span class=\"token comment\">// Vue.prototype.__patch__ is injected in entry points</span>\n  <span class=\"token comment\">// based on the rendering backend used.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevVnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// initial render</span>\n    vm<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">__patch__</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">/* removeOnly */</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// updates</span>\n    vm<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">__patch__</span><span class=\"token punctuation\">(</span>prevVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">restoreActiveInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// update __vue__ reference</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevEl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    prevEl<span class=\"token punctuation\">.</span>__vue__ <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>__vue__ <span class=\"token operator\">=</span> vm\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// if parent is an HOC, update its $el as well</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">&amp;&amp;</span> vm<span class=\"token punctuation\">.</span>$parent <span class=\"token operator\">&amp;&amp;</span> vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">===</span> vm<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span>_vnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$el\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// updated hook is called by the scheduler to ensure that children are</span>\n  <span class=\"token comment\">// updated in a parent's updated hook.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">_update</code> 함수에서 중요한 점은 <code class=\"language-text\">__patch__</code> 함수를 호출한다는 것입니다. <code class=\"language-text\">__patch__</code> 함수는 VNode를 파라미터로 전달받아 DOM을 초기화 하거나 업데이트 하는 역할을 합니다. <code class=\"language-text\">__patch__</code> 함수를 살펴보도록 하겠습니다.</p>\n<h4 id=\"__patch__-함수\" style=\"position:relative;\"><code class=\"language-text\">__patch__</code> 함수<a href=\"#__patch__-%ED%95%A8%EC%88%98\" aria-label=\"__patch__ 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__patch__ <span class=\"token operator\">=</span> inBrowser <span class=\"token operator\">?</span> patch <span class=\"token operator\">:</span> noop</code></pre></div>\n<p><code class=\"language-text\">__patch__</code> 함수는 <code class=\"language-text\">src/platforms/web/runtime/index.js</code> 파일에 정의 되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> nodeOps <span class=\"token keyword\">from</span> <span class=\"token string\">'web/runtime/node-ops'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createPatchFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'core/vdom/patch'</span>\n<span class=\"token keyword\">import</span> baseModules <span class=\"token keyword\">from</span> <span class=\"token string\">'core/vdom/modules/index'</span>\n<span class=\"token keyword\">import</span> platformModules <span class=\"token keyword\">from</span> <span class=\"token string\">'web/runtime/modules/index'</span>\n\n<span class=\"token comment\">// the directive module should be applied last, after all</span>\n<span class=\"token comment\">// built-in modules have been applied.</span>\n<span class=\"token keyword\">const</span> modules <span class=\"token operator\">=</span> platformModules<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>baseModules<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">patch</span><span class=\"token operator\">:</span> Function <span class=\"token operator\">=</span> <span class=\"token function\">createPatchFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nodeOps<span class=\"token punctuation\">,</span> modules <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">__patch__</code> 함수가 되는 <code class=\"language-text\">patch</code>는 <code class=\"language-text\">src/platforms/web/runtime/patch.js</code>에 정의되어 있습니다. <code class=\"language-text\">patch</code> 함수는 <code class=\"language-text\">createPatchFunction({ nodeOps, modules })</code>가 호출되어 생성됩니다. <code class=\"language-text\">nodeOps</code>를 살펴보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createElementNS</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">namespace</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tagName</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Element <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElementNS</span><span class=\"token punctuation\">(</span>namespaceMap<span class=\"token punctuation\">[</span>namespace<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tagName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createTextNode</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Text <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createComment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Comment <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createComment</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">insertBefore</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">parentNode</span><span class=\"token operator\">:</span> Node<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">newNode</span><span class=\"token operator\">:</span> Node<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">referenceNode</span><span class=\"token operator\">:</span> Node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">,</span> referenceNode<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeChild</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> Node<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">child</span><span class=\"token operator\">:</span> Node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">appendChild</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> Node<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">child</span><span class=\"token operator\">:</span> Node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드와 같이 실제 DOM을 조작하는 메소드들을 볼 수 있습니다. <code class=\"language-text\">const modules = platformModules.concat(baseModules)</code>를 통해 생성되는 <code class=\"language-text\">modules</code> 역시 실제 DOM을 조작하는 메소드들이 모여 있습니다.</p>\n<h2 id=\"vue가-dom을-빠르게-업데이트-하는-방법\" style=\"position:relative;\">Vue가 DOM을 빠르게 업데이트 하는 방법<a href=\"#vue%EA%B0%80-dom%EC%9D%84-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"vue가 dom을 빠르게 업데이트 하는 방법 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>지금까지 VNode를 만드는 방법과 DOM을 수정하는 메소드들에 대해 이야기 했습니다. 이번에는 이것들을 사용하여 Vue가 어떻게 DOM을 빠르게 업데이트 하는지에 대해 이야기 하도록 하겠습니다.</p>\n<p><code class=\"language-text\">patch</code> 함수를 만드는 <code class=\"language-text\">createPatchFunction</code>를 살펴보도록 하겠습니다. <code class=\"language-text\">src/vdom/patch.js</code>에 정의되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createPatchFunction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">backend</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">patch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">,</span> removeOnly</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// empty mount (likely as component), create new root element</span>\n      isInitialPatch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token function\">createElm</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> isRealElement <span class=\"token operator\">=</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">.</span>nodeType<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isRealElement <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// patch existing root node</span>\n        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> removeOnly<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">invokeInsertHook</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> isInitialPatch<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> vnode<span class=\"token punctuation\">.</span>elm\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">createPatchFunction</code> 함수의 코드량이 어마어마 합니다. <code class=\"language-text\">src/vdom/patch.js</code> 파일 최상단에 있는 주석을 보면, <a href=\"https://github.com/snabbdom/snabbdom\">Snabbdom</a>을 사용하여 가상 DOM을 patch 한다고 이야기합니다.</p>\n<h3 id=\"patchvnode-함수\" style=\"position:relative;\"><code class=\"language-text\">patchVnode</code> 함수<a href=\"#patchvnode-%ED%95%A8%EC%88%98\" aria-label=\"patchvnode 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>DOM을 업데이트 하는 코어 함수인 <code class=\"language-text\">patchVNode</code> 함수에 대해 이야기 하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">patchVnode</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">oldVnode<span class=\"token punctuation\">,</span>\n  vnode<span class=\"token punctuation\">,</span>\n  insertedVnodeQueue<span class=\"token punctuation\">,</span>\n  ownerArray<span class=\"token punctuation\">,</span>\n  index<span class=\"token punctuation\">,</span>\n  removeOnly</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                  <span class=\"token comment\">// 1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>          <span class=\"token comment\">// 3</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCh <span class=\"token operator\">!==</span> ch<span class=\"token punctuation\">)</span> <span class=\"token function\">updateChildren</span><span class=\"token punctuation\">(</span>elm<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> removeOnly<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                   <span class=\"token comment\">// 4</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">checkDuplicateKeys</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span>elm<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">addVnodes</span><span class=\"token punctuation\">(</span>elm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>               <span class=\"token comment\">// 5</span>\n      <span class=\"token function\">removeVnodes</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>       <span class=\"token comment\">// 6</span>\n      nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span>elm<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">.</span>text <span class=\"token operator\">!==</span> vnode<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 2</span>\n    nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span>elm<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드의 주석번호(<code class=\"language-text\">// 1</code> 등..)와 밑의 설명의 번호를 매칭하면서 보시길 바랍니다.</p>\n<ol>\n<li>가장 바깥쪽 <code class=\"language-text\">if</code> 절을 살펴보면 <code class=\"language-text\">isUndef(vnode.text)</code>로 <code class=\"language-text\">vnode.text</code>가 정의되어 있지 않을 때 <code class=\"language-text\">if</code> 절이 동작합니다.</li>\n<li>가장 바깥쪽의 <code class=\"language-text\">else if</code> 절을 살펴보면 <code class=\"language-text\">oldVnode.text !== vnode.text</code> 일 때, <code class=\"language-text\">nodeOps.setTextContent(elm, vnode.text)</code>를 실행합니다. 즉 leaf 노드이면서 <code class=\"language-text\">text</code>가 다를 때 <code class=\"language-text\">text</code>를 업데이트 합니다.</li>\n<li>이전 노드와 새로운 노드 둘다 자식노드들을 가지고 있으면서, 두 노드가 다를 때, <code class=\"language-text\">updateChildren</code> 함수를 호출합니다.</li>\n<li>새로운 노드가 자식을 가지고, 이전 노드가 <code class=\"language-text\">text</code>를 가질 때, <code class=\"language-text\">addVnodes</code> 함수를 호출하여 새로운 노드의 자식 노드를 추가합니다.</li>\n<li>이전 노드가 자식을 가지고 새로운 노드가 leaf 노드일 때, <code class=\"language-text\">removeVnodes</code> 함술르 호출하여 이전 노드의 자식 노드를 제거합니다.</li>\n<li>이전 노드와 새로운 노드 모두 자식 노드가 없고 이전 노드의 <code class=\"language-text\">text</code>가 정의 되어 있지 않을 때 <code class=\"language-text\">nodeOps.setTextContent(elm, '')</code>를 호출하여 <code class=\"language-text\">text</code>를 제거합니다.</li>\n</ol>\n<h3 id=\"updatechildren-함수\" style=\"position:relative;\"><code class=\"language-text\">updateChildren</code> 함수<a href=\"#updatechildren-%ED%95%A8%EC%88%98\" aria-label=\"updatechildren 함수 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>다음으로 <code class=\"language-text\">patchVnode</code> 함수에서 호출했던 <code class=\"language-text\">updateChildren</code> 함수를 살펴보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateChildren</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parentElm<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> removeOnly</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> oldStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> newStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> oldEndIdx <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span>oldEndIdx<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> newEndIdx <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span>newEndIdx<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> oldKeyToIdx<span class=\"token punctuation\">,</span> idxInOld<span class=\"token punctuation\">,</span> vnodeToMove<span class=\"token punctuation\">,</span> refElm\n\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>oldStartIdx <span class=\"token operator\">&lt;=</span> oldEndIdx <span class=\"token operator\">&amp;&amp;</span> newStartIdx <span class=\"token operator\">&lt;=</span> newEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span> <span class=\"token comment\">// Vnode has been moved left</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n      oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span>\n      newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newEndIdx<span class=\"token punctuation\">)</span>\n      oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n      newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Vnode moved right</span>\n      <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newEndIdx<span class=\"token punctuation\">)</span>\n      canMove <span class=\"token operator\">&amp;&amp;</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span>\n      newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Vnode moved left</span>\n      <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n      canMove <span class=\"token operator\">&amp;&amp;</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldEndVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">)</span>\n      oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n      newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>oldKeyToIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> oldKeyToIdx <span class=\"token operator\">=</span> <span class=\"token function\">createKeyToOldIdx</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span>\n      idxInOld <span class=\"token operator\">=</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">?</span> oldKeyToIdx<span class=\"token punctuation\">[</span>newStartVnode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">:</span> <span class=\"token function\">findIdxInOld</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>idxInOld<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// New element</span>\n        <span class=\"token function\">createElm</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> parentElm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        vnodeToMove <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span>idxInOld<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>vnodeToMove<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>vnodeToMove<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n          oldCh<span class=\"token punctuation\">[</span>idxInOld<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n          canMove <span class=\"token operator\">&amp;&amp;</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> vnodeToMove<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// same key but different element. treat as new element</span>\n          <span class=\"token function\">createElm</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> parentElm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드를 그림으로 설명해보도록 하겠습니다.</p>\n<p><img src=\"/assets/img/posts/vuejs/update_children_1.png\" alt=\"vue updateChildren\"></p>\n<p>위의 그림에서 <code class=\"language-text\">oldCh</code>, <code class=\"language-text\">newCh</code>는 <code class=\"language-text\">updateChildren</code> 함수의 파라미터입니다. 각각 이전의 자식 VNode, 새로운 자식 VNode 배열을 나타냅니다. <code class=\"language-text\">oldStartIdx</code>, <code class=\"language-text\">oldEndIdx</code>, <code class=\"language-text\">oldStartVNode</code>, <code class=\"language-text\">oldEndVNode</code>, <code class=\"language-text\">newStartIdx</code>, <code class=\"language-text\">newEndIdx</code>, <code class=\"language-text\">newStartVNode</code>, <code class=\"language-text\">newEndVNode</code> 변수를 적용한 그림입니다.</p>\n<p>위의 그림의 따라 동작하는 코드를 살펴보겠습니다.</p>\n<ul>\n<li><code class=\"language-text\">while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {</code>의 값이 <code class=\"language-text\">true</code>로 배열을 반복하여 탐색하게 됩니다.</li>\n<li><code class=\"language-text\">if (isUndef(oldStartVnode))</code>와 <code class=\"language-text\">else if (isUndef(oldEndVnode))</code>로 <code class=\"language-text\">oldStartVnode</code>와 <code class=\"language-text\">oldEndVnode</code>가 항상 정의 됩니다.</li>\n<li><code class=\"language-text\">else if (sameVnode(oldStartVnode, newStartVnode))</code>, <code class=\"language-text\">oldStartVnode</code>와 <code class=\"language-text\">newStartVnode</code>가 서로 같은 노드라면 이전에 살펴봤던 <code class=\"language-text\">patchVnode</code> 함수를 실행하여 DOM을 업데이트 합니다.</li>\n</ul>\n<p><code class=\"language-text\">oldStartVnode</code>와 <code class=\"language-text\">newStartVnode</code>가 서로 같은 노드라고 가정한다면,</p>\n<p><img src=\"/assets/img/posts/vuejs/update_children_2.png\" alt=\"vue updateChildren\"></p>\n<p>위의 그림과 같이 변수들이 업데이트 됩니다. 위의 방법을 <code class=\"language-text\">while</code>문 조건이 <code class=\"language-text\">true</code>일 때 반복하여 동작합니다.</p>\n<h5 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://github.com/numbbbbb/read-vue-source-code/blob/master/08-view-render-patch.md\">https://github.com/numbbbbb/read-vue-source-code/blob/master/08-view-render-patch.md</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#view%EB%A5%BC-%EB%9E%9C%EB%8D%94%EB%A7%81-%ED%95%98%EB%8A%94-2%EA%B0%80%EC%A7%80-%ED%95%A8%EC%88%98\">view를 랜더링 하는 2가지 함수</a></p>\n<ul>\n<li><a href=\"#_render-%ED%95%A8%EC%88%98\"><code class=\"language-text\">_render</code> 함수</a></li>\n<li><a href=\"#_update-%ED%95%A8%EC%88%98\"><code class=\"language-text\">_update</code> 함수</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#vue%EA%B0%80-dom%EC%9D%84-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">Vue가 DOM을 빠르게 업데이트 하는 방법</a></p>\n<ul>\n<li><a href=\"#patchvnode-%ED%95%A8%EC%88%98\"><code class=\"language-text\">patchVnode</code> 함수</a></li>\n<li><a href=\"#updatechildren-%ED%95%A8%EC%88%98\"><code class=\"language-text\">updateChildren</code> 함수</a></li>\n</ul>\n</li>\n</ul>","timeToRead":10,"excerpt":"7. View Render - 컴파일러에서 이야기 한  함수에서 view를 랜더링 하는데 사용된 2가지 함수인 와 에서 호출하는  함수와  함수에 대해 이야기 하도록 하겠습니다. view를 랜더링 하는 2가지 함수  함수에서 view…","frontmatter":{"title":"[Inside Vue] 9. View Render - Patch","thumbnail":"vuejs/vuejs.png","summary":"_render()와 _update()에서 호출하는 render 함수와 __patch__ 함수에 대해 이야기 하도록 하겠습니다."},"fields":{"createdDate":"2019-09-12"}}},"pageContext":{"slug":"/tech/vuejs/view-render-patch/","image":"vuejs/vuejs.png","next":{"frontmatter":{"title":"[JavaScript] 자바스크립트 런타임"},"fields":{"slug":"/tech/javascript/javascript-runtime/"}},"previous":{"frontmatter":{"title":"[Inside Vue] 8. View Render - baseCompile 함수"},"fields":{"slug":"/tech/vuejs/view-render-baseCompile-function/"}}}},"staticQueryHashes":["1817256549","2192852387","3417480192"]}